{"title":"python数据可视化：pyecharts v1版本","uid":"c5a3632aecdc3f50f32639748c6ea233","slug":"python数据可视化：pyecharts-v1版本","date":"2021-06-05T02:29:26.000Z","updated":"2022-04-03T06:06:56.542Z","comments":true,"path":"api/articles/python数据可视化：pyecharts-v1版本.json","keywords":null,"cover":null,"content":"<p><a class=\"link\"   href=\"https://github.com/ecomfe/echarts\" >Echarts<i class=\"fas fa-external-link-alt\"></i></a>是一个由百度开源的数据可视化，结合巧妙的交互性，精巧的图表设计；而 Python 是一门富有表达力的语言，很适合用于数据处理。分析遇上数据可视化时，<a class=\"link\"   href=\"https://github.com/pyecharts/pyecharts\" >pyecharts<i class=\"fas fa-external-link-alt\"></i></a>诞生了。<br>个人觉得可视化最好用的，不接受反驳，毕竟用echarts的都那么多；<br><a class=\"link\"   href=\"https://pyecharts.org/#/zh-cn/intro\" >官方文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li>自己挑了一些碰到的坑记了一下，分享一些自己学习过程中发现的资源，其他看文档就够了</li>\n</ul>\n<h1 id=\"基础柱状图\"><a href=\"#基础柱状图\" class=\"headerlink\" title=\"基础柱状图\"></a>基础柱状图</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">from pyecharts import options as opts\nfrom pyecharts.charts import Bar\nfrom pyecharts.faker import Faker\nc &#x3D; (\n    Bar()\n    .add_xaxis(Faker.choose())\n    .add_yaxis(&quot;商家A&quot;, Faker.values())#gap&#x3D;&quot;0%&quot;；category_gap&#x3D;&quot;80%&quot;；stack&#x3D;&quot;stack1&quot;\n    .add_yaxis(&quot;商家B&quot;, Faker.values())#gap&#x3D;&quot;0%&quot;；is_selected&#x3D;False；stack&#x3D;&quot;stack1&quot;；label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False)\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;Bar-基本示例&quot;, subtitle&#x3D;&quot;我是副标题&quot;))\n                     # datazoom_opts&#x3D;[opts.DataZoomOpts(), opts.DataZoomOpts(type_&#x3D;&quot;inside&quot;)],#时间轴显示并可同通过鼠标滑动\n    .set_series_opts(\n        label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False),\n        markpoint_opts&#x3D;opts.MarkPointOpts(\n            data&#x3D;[\n                opts.MarkPointItem(type_&#x3D;&quot;max&quot;, name&#x3D;&quot;最大值&quot;),\n                opts.MarkPointItem(type_&#x3D;&quot;min&quot;, name&#x3D;&quot;最小值&quot;),\n#                 opts.MarkPointItem(type_&#x3D;&quot;average&quot;, name&#x3D;&quot;平均值&quot;),\n            ]\n        ),\n        markline_opts&#x3D; opts.MarkLineOpts(data &#x3D; [opts.MarkLineItem(type_ &#x3D; &quot;average&quot;,name &#x3D; &quot;平均值&quot;)])\n    )\n    .render_notebook()\n)\nc</code></pre>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/6460608-c318cf13b19d947a.1zz3gy9m634w.png\"\n                     \n                ></p>\n<ul>\n<li><p>只能通过滑动水平轴缩放x轴：只传入datazoom_opts=[opts.DataZoomOpts()]；省略掉 opts.DataZoomOpts(), 删除水平轴，就只能通过鼠标拖动；</p>\n</li>\n<li><p>显示水平轴的比例（默认）：<br>opts.DataZoomOpts(range_start=20,range_end=80)</p>\n</li>\n<li><p>取消柱子上方数据显示：<br>label_opts=opts.LabelOpts(is_show=False)</p>\n</li>\n<li><p>添加y轴水平轴：<br>datazoom_opts=opts.DataZoomOpts(orient=”vertical”)，可缩放大小；</p>\n</li>\n<li><p>柱间距离：<br>加入参数gap=”0%”(两个add_yaxis里面都要传)；<br>加入参数category_gap=”80%”，表示单系柱间距离；</p>\n</li>\n<li><p>默认取消显示某 Series：<br>加入参数is_selected=False，默认取消显示某 Series</p>\n</li>\n<li><p>堆叠数据：传入stack=”stack1”，希望哪几个指标堆叠就传那几个add_yaxis中；</p>\n</li>\n<li><p>显示ToolBox：在set_global_opts()中传入        toolbox_opts=opts.ToolboxOpts(), brush_opts=opts.BrushOpts(),；</p>\n</li>\n<li><p>XY轴名称：在set_globel_opts()中加入 yaxis_opts=opts.AxisOpts(name=”我是 Y  轴”),xaxis_opts=opts.AxisOpts(name=”我是 X 轴”),  ；</p>\n</li>\n<li><p>Y轴数据单位：在set_globel_opts()中加入 yaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(formatter=”{value} /月”)),  ；</p>\n</li>\n<li><p>加入标记线</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">    .set_series_opts(\n        label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False),\n        markline_opts&#x3D;opts.MarkLineOpts(\n            data&#x3D;[opts.MarkLineItem(y&#x3D;50, name&#x3D;&quot;yAxis&#x3D;50&quot;)]\n        ),\n    )\n#set_global_opts()后加入set_series_opts，加入标记线，这里是y&#x3D;50；</code></pre></li>\n<li><p>标记线的维度（当然可以是横轴）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.set_series_opts(\n\tmarkline_opts&#x3D;opts.MarkLineOpts(\n                data&#x3D;[opts.MarkLineItem(type_&#x3D;&quot;average&quot;,value_dim&#x3D;&quot;x&quot;, name&#x3D;&quot;xAxis&quot;),\n                     opts.MarkLineItem(type_&#x3D;&quot;average&quot;,value_dim&#x3D;&quot;y&quot;, name&#x3D;&quot;xAxis&quot;)\n                     ]</code></pre></li>\n<li><p>加入标记值</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#set_series_opts中加入，表示传入标记，最大、最小、平均值。\n        markpoint_opts&#x3D;opts.MarkPointOpts(\n            data&#x3D;[\n                opts.MarkPointItem(type_&#x3D;&quot;max&quot;, name&#x3D;&quot;最大值&quot;),\n                opts.MarkPointItem(type_&#x3D;&quot;min&quot;, name&#x3D;&quot;最小值&quot;),\n                opts.MarkPointItem(type_&#x3D;&quot;average&quot;, name&#x3D;&quot;平均值&quot;),\n            ]</code></pre></li>\n<li><p>xy轴互换</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#设置完add_yaxis后接着\n    .reversal_axis()#xy轴互换\n    .set_series_opts(label_opts&#x3D;opts.LabelOpts(position&#x3D;&quot;right&quot;))#显示数据在柱子右边</code></pre></li>\n<li><p>x轴名字标签过长，旋转角度</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">在set_global_opts（）中传入\nxaxis_opts&#x3D;opts.AxisOpts(axislabel_opts&#x3D;opts.LabelOpts(rotate&#x3D;-15)),</code></pre></li>\n<li><p>连接空数据 </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import pyecharts.options as opts\nfrom pyecharts.charts import Line\nfrom pyecharts.faker import Faker\n\ny &#x3D; Faker.values()\ny[3], y[5] &#x3D; None, None\nc &#x3D; (\n    Line()\n    .add_xaxis(Faker.choose())\n    .add_yaxis(&quot;商家A&quot;, y, is_connect_nones&#x3D;True)\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;Line-连接空数据&quot;))\n    .render(&quot;line_connect_null.html&quot;)\n)</code></pre></li>\n<li><p>自定义标记点</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import pyecharts.options as opts\nfrom pyecharts.charts import Line\nfrom pyecharts.faker import Faker\n\nx, y &#x3D; Faker.choose(), Faker.values()\nc &#x3D; (\n    Line()\n    .add_xaxis(x)\n    .add_yaxis(\n        &quot;商家A&quot;,\n        y,\n        markpoint_opts&#x3D;opts.MarkPointOpts(\n            data&#x3D;[opts.MarkPointItem(name&#x3D;&quot;自定义标记点&quot;, coord&#x3D;[x[2], y[2]], value&#x3D;y[2])]\n        ),\n    )\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;Line-MarkPoint（自定义）&quot;))\n    .render(&quot;line_markpoint_custom.html&quot;)\n)</code></pre></li>\n<li><p>作条形图时由于有时候座标轴文字过长，缩放后导致无法完全显示，此时则需要调整座标轴与图像的边距。调整边距是采用grid（）方法。在图形设置完成后，使用grid设置座标轴与图像边界的距离。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">report_day_line &#x3D; Grid()\nreport_day_line.add(report_day_line1,opts.GridOpts(pos_left&#x3D;&quot;10%&quot;,pos_top &#x3D;&quot;10%&quot;), is_control_axis_index&#x3D;True)\nreport_day_line.render_notebook()</code></pre></li>\n<li><p>指定chart_id时要将写好的图形定义成函数，这样子可以复用后面的page中图片位置，方便更改</p>\n</li>\n<li><p>jscode的妙用 <a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/133533187\" >https://zhuanlan.zhihu.com/p/133533187<i class=\"fas fa-external-link-alt\"></i></a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">tooltip_opts&#x3D;opts.TooltipOpts(\n                formatter&#x3D;JsCode(\n                &quot;function (params) &#123;return params.value[2] + &#39; ：复购率：&#39; +(Number(params.value[0])* 100).toFixed(2) + &#39;%&#39;+&#39;，销售额：&#39;+ params.value[1];&#125;&quot;\n                )\n#                 trigger&#x3D;&quot;axis&quot;, axis_pointer_type&#x3D;&quot;cross&quot;\n            ),</code></pre>\n<h3 id=\"pyecharts画时间排序图\"><a href=\"#pyecharts画时间排序图\" class=\"headerlink\" title=\"pyecharts画时间排序图\"></a>pyecharts画时间排序图</h3></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from pyecharts import options as opts\nfrom pyecharts.charts import Bar,Timeline\nfrom pyecharts.faker import Faker\nimport random\nimport pandas as pd\nimport numpy as np\n\n# 受这篇文章启发https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_42512684&#x2F;article&#x2F;details&#x2F;108176613\ndata &#x3D; np.array([random.randint(30,150) for i in range(52*7) ]).reshape(52,7)\ndf &#x3D; pd.DataFrame(data,index&#x3D;[i for i in range(1969,2021)],columns &#x3D; random.sample(attr, len(attr)))\ndf</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">df_sorted &#x3D; [r[:].sort_values() for i,r in df.iterrows()]\ndf_sorted[0].values\nt1  &#x3D; Timeline()# 创建 Timeline对象\n\nfor j in range(1969,2021):\n    bar &#x3D; (\n    Bar()\n    .add_xaxis([str(i) for i in df_sorted[j-1969].index])\n    .add_yaxis(&#39;Data&#39;,[int(i) for i in df_sorted[j-1969].values]\n               ,label_opts &#x3D; opts.LabelOpts(position &#x3D; &#39;right&#39;),\n             )\n    .set_series_opts(label_opts &#x3D; opts.LabelOpts(is_show &#x3D; True,position &#x3D; &#39;right&#39;))\n    .reversal_axis()\n    .set_global_opts(title_opts &#x3D; opts.TitleOpts(&quot;&#123;&#125;&quot;.format(j),\n                                                 pos_left &#x3D; &#39;50%&#39;,\n\n                                                ),\n                    legend_opts &#x3D; opts.LegendOpts(pos_right &#x3D; &#39;10%&#39;))\n\n    )\n\n    t1.add(bar,&#39;&#123;&#125;年&#39;.format(j))\n    \nt1.add_schema(\nsymbol &#x3D; &#39;arrow&#39;,# 设置标记时间；\n    #orient &#x3D; &#39;vertical&#39;,\n     symbol_size &#x3D; 2,# 标记大小;\n    play_interval &#x3D; 1000,# 播放时间间隔；\n    control_position &#x3D; &#39;right&#39;,# 控制位置;\nlinestyle_opts &#x3D; opts.LineStyleOpts(width &#x3D; 5,\n                                   type_ &#x3D; &#39;dashed&#39;,\n                                   color &#x3D; &#39;rgb(255,0,0,0.5)&#39;),\n    label_opts &#x3D; opts.LabelOpts(color &#x3D; &#39;rgb(0,0,255,0.5)&#39;,\n                                    font_size &#x3D; 15,\n                                    font_style &#x3D; &#39;italic&#39;,\n                                    font_weight &#x3D; &#39;bold&#39;,\n                                     font_family &#x3D;&#39;Time New Roman&#39;,\n\n                                position &#x3D; &#39;left&#39;,\n                                interval &#x3D; 20,\n                                    )\n)\nt1.render_notebook()</code></pre>\n\n<h1 id=\"pyecharts画地理图-geo-map\"><a href=\"#pyecharts画地理图-geo-map\" class=\"headerlink\" title=\"pyecharts画地理图-geo,map\"></a>pyecharts画地理图-geo,map</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">def my_geo(city, city_value):\n    c &#x3D; (\n        Geo(init_opts&#x3D;opts.InitOpts(theme&#x3D;ThemeType.DARK,chart_id&#x3D;1))\n            .add_schema(maptype&#x3D;&quot;china&quot;)\n            .add(&quot;geo&quot;, [list(z) for z in zip(city, city_value)])\n            .set_series_opts(label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False))\n            .set_global_opts(\n            visualmap_opts&#x3D;opts.VisualMapOpts(), title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;用户城市分布&quot;)\n        )  # .render(&quot;geo_base.html&quot;)\n    )\n    return c</code></pre>\n<p>is_piecewise参数：在 set_global_opts()中的visualmap_opts=opts.VisualMapOpts(is_piecewise=True),表示分段显示；</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">def my_map(province, num):\n    c &#x3D; (\n        Map(init_opts&#x3D;opts.InitOpts(theme&#x3D;ThemeType.DARK,chart_id&#x3D;2))\n            .add(&quot;map&quot;, [list(z) for z in zip(province, num)], &quot;china&quot;)\n            .set_series_opts(label_opts&#x3D;opts.LabelOpts(is_show&#x3D;False))\n            .set_global_opts(visualmap_opts&#x3D;opts.VisualMapOpts(), title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;用户省份分布&quot;))\n    )  # .render(&quot;map_base.html&quot;)\n    return c</code></pre>\n<h1 id=\"pyecharts画内层嵌套饼图\"><a href=\"#pyecharts画内层嵌套饼图\" class=\"headerlink\" title=\"pyecharts画内层嵌套饼图\"></a>pyecharts画内层嵌套饼图</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">c &#x3D; (\n    Pie()\n    .add(&quot;&quot;, [list(z) for z in zip(Faker.choose(), Faker.values())])#center&#x3D;[&quot;35%&quot;, &quot;50%&quot;],\n    .set_global_opts(title_opts&#x3D;opts.TitleOpts(title&#x3D;&quot;Pie-基本示例&quot;))#legend_opts&#x3D;opts.LegendOpts(pos_left&#x3D;&quot;15%&quot;),\n    .set_series_opts(label_opts&#x3D;opts.LabelOpts(formatter&#x3D;&quot;&#123;b&#125;: &#123;c&#125;&quot;))\n#     .render(&quot;pie_base.html&quot;)\n)\nc.render_notebook()</code></pre>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/6460608-109a65be286830ab.wpn8qntfni8.png\"\n                     \n                ></p>\n<h1 id=\"内嵌饼图nested-pies\"><a href=\"#内嵌饼图nested-pies\" class=\"headerlink\" title=\"内嵌饼图nested_pies\"></a>内嵌饼图nested_pies</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">inner_x_data &#x3D; [&quot;直达&quot;, &quot;营销广告&quot;, &quot;搜索引擎&quot;]\ninner_y_data &#x3D; [335, 679, 1548]\ninner_data_pair &#x3D; [list(z) for z in zip(inner_x_data, inner_y_data)]\n\nouter_x_data &#x3D; [&quot;直达&quot;, &quot;营销广告&quot;, &quot;搜索引擎&quot;, &quot;邮件营销&quot;, &quot;联盟广告&quot;, &quot;视频广告&quot;, &quot;百度&quot;, &quot;谷歌&quot;]\nouter_y_data &#x3D; [335, 310, 234, 135, 1048, 251, 147, 102]\nouter_data_pair &#x3D; [list(z) for z in zip(outer_x_data, outer_y_data)]\n(\n    Pie(init_opts&#x3D;opts.InitOpts())#theme&#x3D;ThemeType.DARK 指定主题为黑色\n    .add(\n        series_name&#x3D;&quot;访问来源&quot;,\n        data_pair&#x3D;inner_data_pair,#指定数据源\n        radius&#x3D;[0, &quot;30%&quot;],#半径 \n        label_opts&#x3D;opts.LabelOpts(position&#x3D;&quot;inner&quot;),#图形位置\n    )\n    .add(\n        series_name&#x3D;&quot;访问来源&quot;,\n        radius&#x3D;[&quot;40%&quot;, &quot;55%&quot;],\n        data_pair&#x3D;outer_data_pair,\n        label_opts&#x3D;opts.LabelOpts(\n            position&#x3D;&quot;outside&quot;,\n            formatter&#x3D;&quot;&#123;a|&#123;a&#125;&#125;&#123;abg|&#125;\\n&#123;hr|&#125;\\n &#123;b|&#123;b&#125;: &#125;&#123;c&#125; &#123;per|&#123;d&#125;%&#125;  &quot;,#&quot;&#123;a&#125; &lt;br&#x2F;&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot; 文本样式\n            background_color&#x3D;&quot;#eee&quot;,  #背景颜色\n            border_color&#x3D;&quot;#aaa&quot;,  #边框颜色\n            border_width&#x3D;1,   #边框宽度\n            border_radius&#x3D;4,  #边界半径\n            rich&#x3D;&#123;\n                &quot;a&quot;: &#123;&quot;color&quot;: &quot;#999&quot;, &quot;lineHeight&quot;: 22, &quot;align&quot;: &quot;center&quot;&#125;,\n                &quot;abg&quot;: &#123;\n                    &quot;backgroundColor&quot;: &quot;#e3e3e3&quot;,\n                    &quot;width&quot;: &quot;100%&quot;,\n                    &quot;align&quot;: &quot;right&quot;,\n                    &quot;height&quot;: 22,\n                    &quot;borderRadius&quot;: [4, 4, 0, 0],\n                &#125;,\n                &quot;hr&quot;: &#123;\n                    &quot;borderColor&quot;: &quot;#aaa&quot;,\n                    &quot;width&quot;: &quot;100%&quot;,\n                    &quot;borderWidth&quot;: 0.5,\n                    &quot;height&quot;: 0,\n                &#125;,\n                &quot;b&quot;: &#123;&quot;fontSize&quot;: 16, &quot;lineHeight&quot;: 33&#125;,#,&quot;color&quot;:&quot;#999&quot;\n#                 &quot;c&quot;:&#123;&quot;color&quot;:&quot;#999&quot;&#125;,\n                &quot;per&quot;: &#123;\n                    &quot;color&quot;: &quot;#eee&quot;,\n                    &quot;backgroundColor&quot;: &quot;#334455&quot;,\n                    &quot;padding&quot;: [2, 4],\n                    &quot;borderRadius&quot;: 2,\n                &#125;,\n            &#125;,\n        ),\n    )\n    .set_global_opts(legend_opts&#x3D;opts.LegendOpts(pos_left&#x3D;&quot;left&quot;, orient&#x3D;&quot;vertical&quot;,textstyle_opts&#x3D;&#123;&quot;color&quot;:&quot;#999&quot;&#125;))#设置图例字体为白色\n    .set_series_opts(\n        tooltip_opts&#x3D;opts.TooltipOpts(\n            trigger&#x3D;&quot;item&quot;, formatter&#x3D;&quot;&#123;a&#125; &lt;br&#x2F;&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot;    # &#39;item&#39;: 数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。\n        )\n    )\n#     .render(&quot;nested_pies.html&quot;)\n).render_notebook()</code></pre>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/6460608-85a5b5d8ee7790a8.5qowy1o8a20.png\"\n                     \n                ></p>\n<p>那个formatter配置项可以在这里了解：<br>{a}（系列名称），{b}（数据项名称），{c}（数值）, {d}（百分比）<br><a class=\"link\"   href=\"https://echarts.apache.org/zh/option.html#grid.tooltip.formatter\" >https://echarts.apache.org/zh/option.html#grid.tooltip.formatter<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h1 id=\"pyecharts中page的使用类似BI大屏展示\"><a href=\"#pyecharts中page的使用类似BI大屏展示\" class=\"headerlink\" title=\"pyecharts中page的使用类似BI大屏展示\"></a>pyecharts中page的使用类似BI大屏展示</h1><pre class=\"line-numbers language-none\"><code class=\"language-none\">page &#x3D; Page(layout&#x3D; Page.DraggablePageLayout, page_title&#x3D; &quot;大屏展示&quot;)\n# page &#x3D; Page()\npage.add(\n    bar_datazoom_slider(),\n    line_markpoint(),\n    pie_rosetype(),\n    grid_mutil_yaxis(),\n    liquid_data_precision(),\n    table_base(),\n)\npage.render(&quot;temp.html&quot;)</code></pre>\n<p>然后自己点那开个temp.html文件进行拖拽，缩放，布局称自己想要的样子，最后点击save_config按钮，下载那个chart_config.json文件。</p>\n<h3 id=\"不带标题，修改配置文件为百分比\"><a href=\"#不带标题，修改配置文件为百分比\" class=\"headerlink\" title=\"不带标题，修改配置文件为百分比\"></a>不带标题，修改配置文件为百分比</h3><ul>\n<li><p>修改json配置文件，改成百分比主要是为了页面自适应屏幕大小。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">df &#x3D; pd.read_json(&quot;chart_config.json&quot;)\ndf[&quot;width&quot;] &#x3D; df.width.apply(lambda x: x[:-2])\ndf[&quot;height&quot;] &#x3D; df.height.apply(lambda x: x[:-2])\ndf[&quot;top&quot;] &#x3D; df.top.apply(lambda x: x[:-2])\ndf[&quot;left&quot;] &#x3D; df.left.apply(lambda x: x[:-2])\n# df.astype(&#123;&#39;width&#39;:&#39;float&#39;,&#39;height&#39;:&#39;float&#39;,&#39;top&#39;:&#39;float&#39;,&#39;height&#39;:&#39;float&#39;&#125;).dtypes\ndf[&quot;width&quot;]&#x3D; df.width.apply(lambda x: str(round(float(x)&#x2F;1256*100,4))+&quot;%&quot;)#这里1256、640是你自己电脑屏幕的px值\ndf[&quot;height&quot;] &#x3D; df.height.apply(lambda x: str(round(float(x)&#x2F;640*100*11&#x2F;12,4))+&quot;%&quot;)#如果出现右侧滑块，可适当进行缩放，这里按11&#x2F;12的比例缩放\ndf[&quot;top&quot;] &#x3D; df.top.apply(lambda x: str(round(float(x)&#x2F;640*100*11&#x2F;12,4))+&quot;%&quot;)\ndf[&quot;left&quot;] &#x3D; df.left.apply(lambda x: str(round(float(x)&#x2F;1256*100,4))+&quot;%&quot;)\ndf.to_json(&quot;chart_config2.json&quot;,orient &#x3D; &quot;records&quot;)</code></pre></li>\n<li><p>修改好json数据之后，再运行这行代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#第一个字段是前面拖拽的html文件名，cfg_file就是你刚save的json文件名，dest是你要生成的文件名\npage.save_resize_html( &#39;temp.html&#39;, cfg_file&#x3D; &#39;chart_config2.json&#39;,dest&#x3D; &#39;设置好位置后的BI看板.html&#39;)</code></pre>\n<h3 id=\"加上标题，可自定义html\"><a href=\"#加上标题，可自定义html\" class=\"headerlink\" title=\"加上标题，可自定义html\"></a>加上标题，可自定义html</h3></li>\n</ul>\n<p>这样弄完有点问题就是背景页面可能和图片背景有违和感，你可以使用BeautifulSoup再修改下页面背景颜色啥的,相关网课链接<a class=\"link\"   href=\"https://www.bilibili.com/video/BV1KT4y1c7pb?p=22\" >https://www.bilibili.com/video/BV1KT4y1c7pb?p=22<i class=\"fas fa-external-link-alt\"></i></a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from bs4 import BeautifulSoup\nimport os\n\n#这里要先读取那个json文件\n\nwith open(os.path.join(os.path.abspath(&quot;.&quot;), &quot;设置好位置后的BI看板.html&quot;), &#39;r+&#39;, encoding&#x3D;&quot;utf8&quot;) as html:\n    html_bf &#x3D; BeautifulSoup(html, &quot;lxml&quot;)\n    divs &#x3D; html_bf.find_all(&quot;div&quot;)\n    #读取config_json文件，循环写入到HTML\n    for i in range(len(df_config)):\n        width &#x3D; df_config.loc[i,&#39;width&#39;]\n        height &#x3D; df_config.loc[i,&#39;height&#39;]\n        top &#x3D; df_config.loc[i,&#39;top&#39;]\n        left &#x3D; df_config.loc[i,&#39;left&#39;]\n        divs[i+1][&quot;style&quot;] &#x3D; f&quot;width:&#123;width&#125;;height:&#123;height&#125;;position:absolute;top:&#123;top&#125;;left:&#123;left&#125;;&quot;\n        \n    body &#x3D; html_bf.find(&quot;body&quot;)\n    body[&quot;style&quot;]&#x3D;&quot;background-color:#333333;&quot;\n#     div_title &#x3D; &quot;&lt;div align&#x3D;\\&quot;center\\&quot; style&#x3D;\\&quot;width:100%;\\&quot;&gt;\\n&lt;span style&#x3D;\\&quot;font-size:30px;font face&#x3D;\\&#39;微软雅黑\\&#39;;color :#FFFFFF\\&quot;&gt;&lt;b&gt;CD_NOW数据看板&lt;&#x2F;b&gt;&lt;&#x2F;div&gt;&quot;  # 修改页面背景色、追加标题\n#     body.insert(0, BeautifulSoup(div_title, &quot;lxml&quot;).div)\n    html_new &#x3D; str(html_bf)\n    html.seek(0, 0)\n    html.truncate()\n    html.write(html_new)\n    html.close()</code></pre>\n<p>当然也可以把那个json文件里面的值传到对应的样式代码中在HTML页面中进行布局，需要注意的是画图时指定好每个图表的chart_id,便于通过字符串格式进行指定对应图表位置。</p>\n<p>注意点：（来自<a class=\"link\"   href=\"https://www.jianshu.com/p/47e8f056e5cf%EF%BC%89\" >https://www.jianshu.com/p/47e8f056e5cf）<i class=\"fas fa-external-link-alt\"></i></a><br>1.由于图片的布局是根据chart_config.json中图片id的对应关系进行布局，因此每张图片均需要指定其id；<br>如：<br>Bar(init_opts=opts.InitOpts(chart_id=1))<br>2.在本次操作工程中，发现Table类中不包含init_opts参数，可以通过修改源码，在D:\\Anaconda3\\Lib\\site-packages\\pyecharts\\component\\table指定char_id,具体修改的代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">class Table(ChartMixin):\n    def __init__(self, page_title: str &#x3D; CurrentConfig.PAGE_TITLE, js_host: str &#x3D; &quot;&quot;,chart_id&#x3D;None):\n        self.page_title &#x3D; page_title\n        self.js_host &#x3D; js_host or CurrentConfig.ONLINE_HOST\n        self.js_dependencies: OrderedSet &#x3D; OrderedSet()\n        self.js_functions: OrderedSet &#x3D; OrderedSet()\n        self.title_opts: ComponentTitleOpts &#x3D; ComponentTitleOpts()\n        self.html_content: str &#x3D; &quot;&quot;\n        self._component_type: str &#x3D; &quot;table&quot;\n        if chart_id:\n            self.chart_id: str &#x3D; chart_id\n        else:\n            self.chart_id: str &#x3D; uuid.uuid4().hex</code></pre>\n<p><a class=\"link\"   href=\"https://www.bilibili.com/video/BV1KT4y1c7pb\" >https://www.bilibili.com/video/BV1KT4y1c7pb<i class=\"fas fa-external-link-alt\"></i></a> 网课里有资源自己去取</p>\n","text":"Echarts是一个由百度开源的数据可视化，结合巧妙的交互性，精巧的图表设计；而 Python 是一门富有表达力的语言，很适合用于数据处理。分析遇上数据可视化时，pyecharts诞生了。个人觉得可视化最好用的，不接受反驳，毕竟用echarts的都那么多；官方文档 自己挑了一些碰...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%9F%B1%E7%8A%B6%E5%9B%BE\"><span class=\"toc-text\">基础柱状图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pyecharts%E7%94%BB%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F%E5%9B%BE\"><span class=\"toc-text\">pyecharts画时间排序图</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pyecharts%E7%94%BB%E5%9C%B0%E7%90%86%E5%9B%BE-geo-map\"><span class=\"toc-text\">pyecharts画地理图-geo,map</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pyecharts%E7%94%BB%E5%86%85%E5%B1%82%E5%B5%8C%E5%A5%97%E9%A5%BC%E5%9B%BE\"><span class=\"toc-text\">pyecharts画内层嵌套饼图</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%B5%8C%E9%A5%BC%E5%9B%BEnested-pies\"><span class=\"toc-text\">内嵌饼图nested_pies</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pyecharts%E4%B8%ADpage%E7%9A%84%E4%BD%BF%E7%94%A8%E7%B1%BB%E4%BC%BCBI%E5%A4%A7%E5%B1%8F%E5%B1%95%E7%A4%BA\"><span class=\"toc-text\">pyecharts中page的使用类似BI大屏展示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%B8%A6%E6%A0%87%E9%A2%98%EF%BC%8C%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%BA%E7%99%BE%E5%88%86%E6%AF%94\"><span class=\"toc-text\">不带标题，修改配置文件为百分比</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E4%B8%8A%E6%A0%87%E9%A2%98%EF%BC%8C%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89html\"><span class=\"toc-text\">加上标题，可自定义html</span></a></li></ol></li></ol></li></ol>","author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/avater.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"python连接mysql:读取、写入、更新、删除","uid":"f671959f062d49d2d4345cd4aa269a83","slug":"python数据分析：连接mysql，读取、写入、更新、删除","date":"2021-07-04T05:16:15.000Z","updated":"2022-04-03T06:07:42.361Z","comments":true,"path":"api/articles/python数据分析：连接mysql，读取、写入、更新、删除.json","keywords":null,"cover":null,"text":"1、连接读取数据第一种：用pymysql连接#安装pymysql conda install pymysql #或者 pip install pymysql import pymysql #创建数据库连接，依次是主机名，用户名，密码，要打开的数据库，端口号和编码类型 def ge...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/avater.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"python数据采集：selenium爬虫、自动化","uid":"8ca00045c38562501faacb57ba3b1700","slug":"python数据采集：selenium爬虫、自动化","date":"2021-05-05T02:34:57.000Z","updated":"2022-04-03T06:07:55.115Z","comments":true,"path":"api/articles/python数据采集：selenium爬虫、自动化.json","keywords":null,"cover":null,"text":"中文文档https:&#x2F;&#x2F;python-selenium-zh.readthedocs.io&#x2F;zh_CN&#x2F;latest&#x2F; 装包：pip install selenium下载chrome：https://www.google.cn/c...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/avater.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}