{"title":"python面向对象习题","uid":"1eac341c429c84a40e6d901f88df1212","slug":"python面向对象习题","date":"2019-07-19T04:59:17.000Z","updated":"2022-04-03T06:08:04.656Z","comments":true,"path":"api/articles/python面向对象习题.json","keywords":null,"cover":null,"content":"<p>写完对对象这个东西了解很多了</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># coding&#x3D;utf-8\n&quot;&quot;&quot;\n一：定义一个学生类。有下面的类属性：\n1 姓名\n2 年龄\n3 成绩（语文，数学，英语)[每课成绩的类型为整数]\n类方法：\n1 获取学生的姓名：get_name() 返回类型:str\n2 获取学生的年龄：get_age() 返回类型:int\n3 返回3门科目中最高的分数。get_course() 返回类型:int\n写好类以后，可以定义2个同学测试下:\nzm &#x3D; Student(&#39;zhangming&#39;,20,[69,88,100])\n返回结果：\nzhangming\n20\n100\n&quot;&quot;&quot;\nclass Student(object):\n    def __init__(self, name, age, scores):\n        self.name &#x3D; name\n        self.age &#x3D; age\n        self.scores &#x3D; scores\n    def get_name(self):\n        return self.name\n    def get_age(self):\n        return self.age\n    def get_course(self):\n        return max(self.scores)\nzm &#x3D; Student(&#39;zhangming&#39;, 20, [69, 88, 100])\nprint zm.get_name()\nprint zm.get_age()\nprint zm.get_course()</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;&quot;&quot;\n二：定义一个字典类：dictclass。完成下面的功能：\ndict &#x3D; dictclass(&#123;你需要操作的字典对象&#125;)\n1 删除某个key\ndel_dict(key)\n2 判断某个键是否在字典里，如果在返回键对应的值，不存在则返回&quot;not found&quot;\nget_dict(key)\n3 返回键组成的列表：返回类型;(list)\nget_key()\n4 合并字典，并且返回合并后字典的values组成的列表。返回类型:(list)\nupdate_dict(&#123;要合并的字典&#125;)\n&quot;&quot;&quot;\nclass dictclass(object):\n    def __init__(self, dict):\n        self.dict &#x3D; dict\n    def get_dict(self, key):\n        if self.dict. has_key(key):\n            return self.dict[key]\n        return &#39;not found&#39;\n    def del_dict(self, key):\n        if self.dict.has_key(key):\n            self.dict.pop(key)\n        else:\n            return &#39;no that key&#39;\n    def get_key(self):\n        return self.dict.keys()\n    def updata_dict(self, dict2):\n        self.dict &#x3D; dict(self.dict, **dict2)\n        return self.dict.values()\n \nA &#x3D; dictclass(&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;)\nprint A.get_dict(&#39;c&#39;)\nprint A.del_dict(&#39;c&#39;)\nprint A.get_key()\nprint A.updata_dict(&#123;&#39;c&#39;: 3, &#39;d&#39;: 4&#125;)\n \n# 关于删除字典中的元素\n# pop 删除并返回对应的value值\nB &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;\nprint B.pop(&#39;b&#39;)\nprint B\n# del void不返回值\nC &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;\ndel C[&#39;a&#39;]\nprint C\n# del dict 删除字典，不存在这个字典\n# dict.clear()删除字典内所有元素但字典还是存在只是没有元素\nD &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\nD.clear()\n# 关于合并字典\nA &#x3D; &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;\nB &#x3D; &#123;&#39;d&#39;: 4, &#39;e&#39;: 5, &#39;f&#39;: 6&#125;\nC &#x3D; dict(A.items() + B.items())\nD &#x3D; dict(A, **B)  # 这种合并方法会比上一种快很多对于重复的key，B会覆盖A</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;&quot;&quot;\n定义一个列表的操作类：Listinfo\n包括的方法:\n1 列表元素添加: add_key(keyname)  [keyname:字符串或者整数类型]\n2 列表元素取值：get_key(num) [num:整数类型]\n3 列表合并：update_list(list)\t  [list:列表类型]\n4 删除并且返回最后一个元素：del_key()\nlist_info &#x3D; Listinfo([44,222,111,333,454,&#39;sss&#39;,&#39;333&#39;])\n&quot;&quot;&quot;\nclass Listinfo(object):\n    def __init__(self, list_val):\n        self.varlist &#x3D; list_val\n \n    def add_key(self, key_name):\n        if isinstance(key_name, (str, int)):\n            self.varlist.append(key_name)\n            return self.varlist\n        else:\n            return &#39;error&#39;\n \n    def get_key(self, num):\n        if num &gt;&#x3D; 0 and num &lt; len(self.varlist):\n            return self.varlist[num]\n        else:\n            return &#39;error&#39;\n \n    def update_list(self, List_et):\n        self.varlist.extend(List_et)\n        return self.varlist\n \n    def del_key(self):\n        if len(self.varlist) &gt;&#x3D; 0:\n            return self.varlist.pop(-1)\n        else:\n            return &#39;error&#39;\nlist_info &#x3D; Listinfo([44, 222, 111, 333, 454, &#39;sss&#39;, &#39;333&#39;])\nprint list_info.add_key(&#39;1111&#39;)\nprint list_info.get_key(4)\nprint list_info.update_list([&#39;1&#39;, &#39;2&#39;, &#39;3&#39;])\nprint list_info.del_key()</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;&quot;&quot;\n定义一个集合的操作类：Setinfo\n包括的方法:\n1 集合元素添加: add_setinfo(keyname)  [keyname:字符串或者整数类型]\n2 集合的交集：get_intersection(unioninfo) [unioninfo :集合类型]\n3 集合的并集： get_union(unioninfo)[unioninfo :集合类型]\n4 集合的差集：del_difference(unioninfo) [unioninfo :集合类型]\nset_info &#x3D;  Setinfo(你要操作的集合)\n&quot;&quot;&quot;\nclass Setinfo(object):\n    def __init__(self, my_Set):\n        self.Sett &#x3D; my_Set\n \n    def add_setinfo(self, keyname):\n        if isinstance(keyname, (int, str)):\n            self.Sett.add(keyname)\n            return self.Sett\n        return &#39;error&#39;\n \n    def get_intersection(self, unioninfo):\n        if isinstance(unioninfo, set):\n            return self.Sett &amp; unioninfo\n        return &#39;error&#39;\n \n    def get_union(self, unioninfo):\n        if isinstance(unioninfo, set):\n            return self.Sett | unioninfo\n        return &#39;error&#39;\n \n    def del_difference(self, unioninfo):\n        if isinstance(unioninfo, set):\n            return self.Sett - unioninfo\n        return &#39;error&#39;\n \nA &#x3D; set([1, 2, 3, 4, 5, 2])\nB &#x3D; set([5, 6, 3])\nset_info &#x3D; Setinfo(A)\nprint set_info.add_setinfo(&#39;f&#39;)\nprint set_info.get_intersection(B)\nprint set_info.get_union(B)\nprint set_info.del_difference(B)</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;&quot;&quot;\n题目一： 写一个网页数据操作类。完成下面的功能：\n提示：需要用到urllib模块\nget_httpcode()获取网页的状态码，返回结果例如：200,301,404等 类型为int\nget_htmlcontent() 获取网页的内容。返回类型:str\nget_linknum()计算网页的链接数目。\n&quot;&quot;&quot;\nimport urllib\nimport urllib2\nclass page_data(object):\n    def __init__(self, url_add):\n        self.url &#x3D; url_add\n \n    def get_httpcode(self):\n        status &#x3D; urllib.urlopen(self.url).code\n        return status\n \n    def get_htmlcontent(self):\n        contentstr &#x3D; urllib2.urlopen(self.url).read()\n        return contentstr\n \n    def get_linknum(self):\n        content &#x3D; urllib2.urlopen(self.url).read()\n        return len(content.split(&#39;&lt;a href&#x3D;&#39;)) - 1\n \nA &#x3D; page_data(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)\nprint A.get_httpcode()\nprint A.get_htmlcontent()\nprint A.get_linknum()</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># coding&#x3D;utf-8\nclass SchoolMember:\n    # Represents any school member.\n    def __init__(self, name, age):\n        self.name &#x3D; name\n        self.age &#x3D; age\n        print &#39;(Initialized SchoolMember: %s)&#39; % self.name\n \n    def tell(self):\n        # Tell my details.\n        print &#39;Name:&quot;%s&quot; Age:&quot;%s&quot;&#39; % (self.name, self.age),\n \n \nclass Teacher(SchoolMember):\n    # Represents a teacher.\n    def __init__(self, name, age, salary):\n        SchoolMember.__init__(self, name, age)\n        self.salary &#x3D; salary\n        print &#39;(Initialized Teacher: %s)&#39; % self.name\n \n    def tell(self):\n        SchoolMember.tell(self)\n        print &#39;Salary: &quot;%d&quot;&#39; % self.salary\n \n \nclass Student(SchoolMember):\n    # Represents a student.\n    def __init__(self, name, age, marks):\n        SchoolMember.__init__(self, name, age)\n        self.marks &#x3D; marks\n        print &#39;(Initialized Student: %s)&#39; % self.name\n \n    def tell(self):\n        SchoolMember.tell(self)\n        print &#39;Marks: &quot;%d&quot;&#39; % self.marks\n \nt &#x3D; Teacher(&#39;Mrs. Shrividya&#39;, 40, 30000)\ns &#x3D; Student(&#39;Swaroop&#39;, 22, 75)\nc &#x3D; SchoolMember(&#39;Swar&#39;, 22)\nt.tell()\ns.tell()\nc.tell()</code></pre>\n\n<p><a class=\"link\"   href=\"https://blog.csdn.net/bullpride/article/details/52022701\" >https://blog.csdn.net/bullpride/article/details/52022701<i class=\"fas fa-external-link-alt\"></i></a></p>\n","text":"写完对对象这个东西了解很多了 # coding&#x3D;utf-8 &quot;&quot;&quot; 一：定义一个学生类。有下面的类属性： 1 姓名 2 年龄 3 成绩（语文，数学，英语)[每课成绩的类型为整数] 类方法： 1 获取学生的姓名：get_name() 返回类型...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"toc":"","author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/default-cover.df7c128c.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"python电影数据分析","uid":"defb5a725379b00e673d55a61c52ceb3","slug":"python电影数据分析","date":"2020-03-11T05:25:31.000Z","updated":"2022-04-03T06:02:27.993Z","comments":true,"path":"api/articles/python电影数据分析.json","keywords":null,"cover":null,"text":" 一、数据概述id：标识号imdb_id：IMDB 标识号popularity：在 Movie Database 上的相对页面查看次数budget：预算（美元）revenue：收入（美元）original_title：电影名称cast：演员列表，按 | 分隔，最多 5 名演员ho...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/default-cover.df7c128c.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"记一次面试题：excel数据处理","uid":"a602a3ffbe3a3d828d4555b8d6284dc6","slug":"记一次面试题：excel数据处理","date":"2019-03-19T08:43:39.000Z","updated":"2022-04-03T06:08:27.928Z","comments":true,"path":"api/articles/记一次面试题：excel数据处理.json","keywords":null,"cover":null,"text":"Sales表： Institution表： Product表： Price表： Question：求各省份2017全年销售金额(全部产品)Top1的医院；(请保留计算过程) import pandas as pd import openpyxl path &#x3D; r&#39...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/default-cover.df7c128c.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}