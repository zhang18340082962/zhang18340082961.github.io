{"title":"sql数据分析：自动化报表，多场景持续更新","uid":"ce3f6facdcd7d14d49266cce6ca90c5e","slug":"sql数据分析：自动化报表，多场景更新","date":"2021-08-06T15:19:59.000Z","updated":"2022-04-03T06:06:35.307Z","comments":true,"path":"api/articles/sql数据分析：自动化报表，多场景更新.json","keywords":null,"cover":null,"content":"<h3 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">CREATE TABLE &#96;cd_20210414&#96; (\n  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,\n  &#96;platform&#96; varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT &#39;&#39; COMMENT &#39;平台&#39;,\n  &#96;platform_id&#96; varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT &#39;0&#39; COMMENT &#39;平台id 即storeid&#39;,\n  &#96;product_id&#96; varchar(255) CHARACTER SET utf8mb4 DEFAULT &#39;0&#39; COMMENT &#39;商品id&#39;,\n  &#96;barcode&#96; varchar(50) CHARACTER SET utf8mb4 DEFAULT &#39;0&#39; COMMENT &#39;商品upc编码&#39;,\t\n  &#96;sort_id&#96; int(11) DEFAULT &#39;0&#39; COMMENT &#39;商品排序&#39;,\n  &#96;title&#96; varchar(255) COLLATE utf8mb4_general_ci DEFAULT &#39;&#39; COMMENT &#39;商品名称&#39;,\n  &#96;promotion_price&#96; float(10,2)  DEFAULT null COMMENT &#39;促销价&#39;,\n  &#96;full_price&#96;  float(10,2)  DEFAULT null COMMENT &#39;商品原价&#39;,\n  &#96;product_month_sale&#96; varchar(10) DEFAULT null COMMENT &#39;月销&#39;,\n  &#96;promotion&#96; varchar(255)  CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT &#39;促销活动&#39;,\n  &#96;image_url&#96; text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,\n  &#96;catname1&#96; varchar(50) CHARACTER SET utf8mb4 DEFAULT &#39; &#39;,\n&#96;brand&#96; varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#39;品牌&#39;,\n  &#96;time&#96; datetime DEFAULT CURRENT_TIMESTAMP,\n  PRIMARY KEY (&#96;id&#96;),\n  KEY &#96;a&#96; (&#96;platform&#96;,&#96;platform_id&#96;)\n) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_general_ci;</code></pre>\n<h3 id=\"新增标签列，加索引\"><a href=\"#新增标签列，加索引\" class=\"headerlink\" title=\"新增标签列，加索引\"></a>新增标签列，加索引</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">alter table cd_20210414 add COLUMN crawler_id VARCHAR(30);\nalter table cd_20210414 add COLUMN detail_full_price float(12,2);\nalter table cd_20210414 add index a(sku);\nalter table cd_20210414 add index b(platform,platform_id);</code></pre>\n<h3 id=\"查询当月日期及对应上月日期\"><a href=\"#查询当月日期及对应上月日期\" class=\"headerlink\" title=\"查询当月日期及对应上月日期\"></a>查询当月日期及对应上月日期</h3><p>mysql</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#当月日期\nselect DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY),interval -day(DATE_SUB(CURDATE(),INTERVAL 1 DAY))+1 day),\nDATE_SUB(CURDATE(),INTERVAL 1 DAY);\n#对应上月日期\nselect DATE_SUB(DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY),interval -day(DATE_SUB(CURDATE(),INTERVAL 1 DAY))+1 day),INTERVAL 1 MONTH),\nDATE_SUB(DATE_SUB(CURDATE(),INTERVAL 1 DAY),INTERVAL 1 MONTH);</code></pre>\n\n<p>hive</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#昨天\nselect date_format(date_sub(current_date(),1), &#39;yyyyMMdd&#39;);\n#当月月初\nselect concat(from_unixtime(unix_timestamp(), &#39;yyyyMM&#39;),&#39;01&#39;);\n#上月同期\nselect date_format(add_months(from_unixtime(unix_timestamp(), &#39;yyyy-MM-dd&#39;),-1),&#39;yyyyMMdd&#39;);\n#昨天环比上月同期\nselect date_format(date_sub(add_months(from_unixtime(unix_timestamp(), &#39;yyyy-MM-dd&#39;),-1),1),&#39;yyyyMMdd&#39;);\n#上月月初\nselect concat(date_format(add_months(from_unixtime(unix_timestamp(), &#39;yyyy-MM-dd&#39;),-1),&#39;yyyyMM&#39;),&#39;01&#39;);</code></pre>\n\n<h3 id=\"每个部门薪水最高的员工-包含部门名称\"><a href=\"#每个部门薪水最高的员工-包含部门名称\" class=\"headerlink\" title=\"每个部门薪水最高的员工(包含部门名称)\"></a>每个部门薪水最高的员工(包含部门名称)</h3><ul>\n<li>员工表和部门表进行连接，对部门id进行组内分组根据薪资降序排序，这里使用rank()并列也算</li>\n<li>筛选排序序号为1的部门，并查询员工薪资</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select * \nfrom \n    (SELECT \n    employee_id\n    ,first_name\n    ,e.department_id\n    ,department_name\n    ,salary \n    ,rank() over(partition by department_id order by salary desc) as salary_rank \n    FROM &#96;employees&#96; e \n    inner join \n    &#96;departments&#96; d \n    on e.department_id &#x3D; d.department_id\n    ) a \nwhere a.salary_rank&#x3D;1;</code></pre>\n<h3 id=\"众数、平均数、中位数\"><a href=\"#众数、平均数、中位数\" class=\"headerlink\" title=\"众数、平均数、中位数\"></a>众数、平均数、中位数</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 求员工工资的众数\n\nSELECT salary,count(1) AS cnt\nFROM employees\nGROUP BY salary\nHAVING count(*) &gt;&#x3D; ALL(SELECT COUNT(*) FROM employees GROUP BY salary)\n\n-- 求员工工资的平均数\nselect AVG(salary) from employees\n\nselect sum(salary)&#x2F;count(0) as avg_salary \nfrom employees \n\n-- 求员工工资的中位数\n-- 中位数定义：将数从小到大排列，若总数为奇数，取中间位置的数值。若总数为偶数，取中间位置两个数的平均值\n\nselect avg(emp_salary)\nfrom\n(#排位次\nselect salary,\n row_number() over(order by salary) as rn,\ncount(*) over() as n\nfrom employees\n) t \nwhere rn in (floor(n&#x2F;2)+1,if(mod(n,2) &#x3D; 0,floor(n&#x2F;2),floor(n&#x2F;2)+1))</code></pre>\n\n<h3 id=\"上、下四分位数\"><a href=\"#上、下四分位数\" class=\"headerlink\" title=\"上、下四分位数\"></a>上、下四分位数</h3><ul>\n<li>全部玩家人数的中位数、上下四分位数</li>\n<li>再根据人数总量细拆 排序好的玩家在线时长表</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select round(count(distinct user_id)&#x2F;4) as 下四分位数,\nround(count(distinct user_id)&#x2F;2) as 中位数,\nround(count(distinct user_id)&#x2F;4*3) as 上四分位数\nfrom tap_fun_test;\n下四分位数：207234 中位数：414467 上四分位数：621701\nSELECT min(avg_online_minutes) 最小值,\n(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 207233,1) as 下四分位数,\n(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 414466,1) as 中位数,\n(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 621700,1) as 上四分位数,\nmax( avg_online_minutes) 最大值\nFROM &#96;tap_fun_test&#96;\t\n最小值0.0,下四分位数:0.5,中位数:1.666667，上四分位数：5，最大值：1605.833333</code></pre>\n\n<h3 id=\"截至当前，每个用户已经连续签到的天数\"><a href=\"#截至当前，每个用户已经连续签到的天数\" class=\"headerlink\" title=\"截至当前，每个用户已经连续签到的天数\"></a>截至当前，每个用户已经连续签到的天数</h3><ul>\n<li>查出最后一次不登录的日期（即未登录时间的最大值）</li>\n<li>与当前日期进行比较，二者差值为几就是连续登录几天</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select \nuser_id ,\nmax(date),\nDATEDIFF(&#39;2021-02-19&#39;,max(date)) as max_con_days \nfrom user_attendence \nwhere is_sign &#x3D; 0 \ngroup by user_id;</code></pre>\n<h3 id=\"计算有史以来用户最大连续签到天数；\"><a href=\"#计算有史以来用户最大连续签到天数；\" class=\"headerlink\" title=\"计算有史以来用户最大连续签到天数；\"></a>计算有史以来用户最大连续签到天数；</h3><ul>\n<li>对用户分组，按日期进行row_number()over()排序，排序序号为rank;（一个用户一天只能签到一次）</li>\n<li>如果日期与序号的差值为相等，按这个差值进行分组并计数，取最大值</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select \nuser_id \n,max(次数) &#96;最大连续登录天数&#96;\nfrom \n    (select user_id \n    ,subdate(a.&#96;date&#96;,a.rn) diff \n    ,count(*) 次数\n    from \n        (select \n        user_id \n        ,date,\n        row_number() over(partition by user_id order by date asc) rn\n        from user_attendence  \n        where is_sign &#x3D; 1\n        ) a \n    group by user_id,diff\n    ) b \ngroup by user_id;</code></pre>\n<h3 id=\"用户最大连续购买天数及次数\"><a href=\"#用户最大连续购买天数及次数\" class=\"headerlink\" title=\"用户最大连续购买天数及次数\"></a>用户最大连续购买天数及次数</h3><p>最里面子查询先对日期进行聚合，将购买次数求和，然后类比连续签到</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select \nuser_id \n,max(count_days) &#96;天数&#96;\n,sum(sum_user_counts) &#96;次数&#96;\nfrom \n    (select user_id \n    ,subdate(a.&#96;date&#96;,a.rn) diff \n    ,count(*) count_days\n\t,sum(user_counts) sum_user_counts\n    from \n        (select \n        user_id \n        ,&#96;date&#96;\n        ,row_number() over(partition by user_id order by &#96;date&#96; asc) rn\n\t\t,user_counts\n        from (\n\t\t\t\tselect user_id\n\t\t\t\t,DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;) &#96;date&#96;\n\t\t\t\t,count(&#96;month&#96;) user_counts \n\t\t\t\tfrom cd_now \n\t\t\t\tgroup by user_id,DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;)\n\t\t\t\t) m \n        ) a \n    group by user_id,diff\n    ) b \ngroup by user_id;</code></pre>\n\n<h3 id=\"某一天以及近七天新增用户数\"><a href=\"#某一天以及近七天新增用户数\" class=\"headerlink\" title=\"某一天以及近七天新增用户数\"></a>某一天以及近七天新增用户数</h3><ul>\n<li>指定当前日期为1998-02-10，使用date_sub确定前七天日期</li>\n<li>使用if判定用户是否当日注册，DISTINCT进行去重</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">set @date_day &#x3D; &quot;1998-02-10&quot;;\n\nselect \ncount(DISTINCT if(DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;)&#x3D;@date_day,user_id,null)) as new_id\n,count(DISTINCT user_id) as user_7\n,count(DISTINCT user_id)&#x2F;7 as avg7_id\nfrom \ncd_now \nwhere \nDATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;) between DATE_SUB(@date_day,INTERVAL 7 day) and @date_day</code></pre>\n<h3 id=\"支付金额在前-20-的用户\"><a href=\"#支付金额在前-20-的用户\" class=\"headerlink\" title=\"支付金额在前 20%的用户\"></a>支付金额在前 20%的用户</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 问题：求支付金额在前 20%的用户\nselect \na.user_name \n,a.sum_amount \nfrom \n(select \nuser_name \n,sum(pay_amount) sum_amount \n,ntile(5) over(order by sum(pay_amount) desc) sum_amount_rank \n-- ,sum(pay_amount) over(order by user_name) cumsum\n-- ,round(sum(pay_amount) over(order by user_name)&#x2F;sum(pay_amount) over(),4) cumsum_rate\nfrom user_sales_table \ngroup by user_name ) a \nwhere a.sum_amount_rank &#x3D; 1 </code></pre>\n<h3 id=\"每月最受欢迎的前三名\"><a href=\"#每月最受欢迎的前三名\" class=\"headerlink\" title=\"每月最受欢迎的前三名\"></a>每月最受欢迎的前三名</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">select \n*\nfrom \n\t(select \n\ta.品牌\n\t,a.mon\n\t,a.num\n\t,row_number()over(PARTITION by a.mon order by a.num desc) as num_rank\t\n\tfrom \n\t\t(SELECT \n\t\t*\n\t\t,date_format(日期,&quot;%Y-%m-01&quot;) mon\n\t\t,count(orser_id) num\n\t\tFROM &#96;alcohol&#96;\n\t\tgroup by \n\t\tdate_format(日期,&quot;%Y-%m-01&quot;) ,品牌) a\n\t) b \nwhere b.num_rank&lt;4 \norder by b.mon asc </code></pre>\n<h3 id=\"用户留存\"><a href=\"#用户留存\" class=\"headerlink\" title=\"用户留存\"></a>用户留存</h3><ul>\n<li>用户第一次购买时间和最后一次购买时间，根据user_id进行连接，计算购买时间间隔</li>\n<li>使用case when 进行判定</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select \n(case when t3.day_value&#x3D;1 then &quot;次日留存&quot;\nwhen t3.day_value &#x3D; 3 then &quot;三日留存&quot;\nwhen t3.day_value &#x3D; 7 then &quot;七日留存&quot;\nelse &quot;其他&quot;\nend\n) as type\n,count(t3.user_id) &quot;用户个数&quot;\nfrom \n\t(select \n\tt1.user_id\n\t,t1.first_time\n\t,t2.last_time\n\t,datediff(t2.last_time,t1.first_time) day_value\n\tfrom\n\t\t(select \n\t\tuser_id\n\t\t,date(min(pur_dt)) first_time\n\t\tfrom cd_now \n\t\tgroup by \n\t\tuser_id) t1\n\t\tleft join \n\t\t(select \n\t\tuser_id\n\t\t,date(max(pur_dt)) last_time\n\t\tfrom cd_now\n\t\tgroup by \n\t\tuser_id\n\t\t) t2\n\ton t1.user_id&#x3D;t2.user_id\n\t) t3\ngroup by \n(case when t3.day_value&#x3D;1 then &quot;次日留存&quot;\nwhen t3.day_value &#x3D; 3 then &quot;三日留存&quot;\nwhen t3.day_value &#x3D; 7 then &quot;七日留存&quot;\nelse &quot;其他&quot;\nend\n) </code></pre>\n<h3 id=\"产品留存\"><a href=\"#产品留存\" class=\"headerlink\" title=\"产品留存\"></a>产品留存</h3><p>一共三个字段：下单日期，产品名称，用户id；</p>\n<p>前7天的购买用户作为新客，后24天无购买的为流失；后24天有购买为复购：购买相同产品的为留存，购买其他的为替换；</p>\n<p>先查total全量数据temp1，然后前7天购买和后24天购买数据，接着依次查询新客、复购、留存。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">with temp1 as (\n\tSELECT \n\tpt\n\t,spec_name\n\t,user_id\n\tFROM &#96;order_item&#96; \n\twhere pt between &#39;20211001&#39; and &#39;20211031&#39; \n),\ntemp07 as (\n\tselect \n\tpt\n\t,spec_name\n\t,user_id\n\tfrom temp1\n\twhere pt between &#39;20211001&#39; and &#39;20211007&#39;\n),\ntemp24 as (\n\tselect \n\tpt\n\t,spec_name\n\t,user_id\n\tfrom temp1\n\twhere pt between &#39;20211008&#39; and &#39;20211031&#39;\n),\ntemp_xinke as (\n\tselect \n\tspec_name\n\t,count(distinct user_id) &#96;user_xinke&#96;\n\tfrom temp07\n\tgroup by spec_name\n),\ntemp_fugou as (\n\tselect \n\ttemp07.spec_name \n\t,count(distinct temp07.user_id) &#96;user_fugou&#96;\n\tfrom temp07 \n\tinner join temp24\n\ton temp07.user_id&#x3D;temp24.user_id \n\tgroup by temp07.spec_name\n),\ntemp_liucun as (\n\tselect \n\ttemp07.spec_name \n\t,count(distinct temp07.user_id) &#96;user_liucun&#96;\n\tfrom temp07 \n\tinner join temp24\n\ton temp07.user_id&#x3D;temp24.user_id and temp07.spec_name&#x3D;temp24.spec_name \n\tgroup by temp07.spec_name\n),\ntemp_total as (\n\tselect \n\ttemp_xinke.spec_name &#96;产品名称&#96;\n\t,temp_xinke.&#96;user_xinke&#96; &#96;新客人数&#96;\n\t,temp_fugou.&#96;user_fugou&#96; &#96;复购人数&#96;\n\t,temp_liucun.&#96;user_liucun&#96; &#96;留存人数&#96;\n\t,temp_xinke.&#96;user_xinke&#96;-temp_fugou.&#96;user_fugou&#96; &#96;流失人数&#96;\n\t,temp_fugou.&#96;user_fugou&#96;-temp_liucun.&#96;user_liucun&#96; &#96;替换人数&#96;\n\tfrom temp_xinke \n\tinner join temp_fugou on temp_xinke.spec_name&#x3D; temp_fugou.spec_name\n\tinner join temp_liucun on temp_xinke.spec_name &#x3D; temp_liucun.spec_name\n) select * from temp_total;</code></pre>\n\n\n\n<h3 id=\"新老客-amp-复购\"><a href=\"#新老客-amp-复购\" class=\"headerlink\" title=\"新老客&amp;复购\"></a>新老客&amp;复购</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">with temp1 as ( # 1、找出每个用户第一次下单的时间和年月\nselect user_id,min(pur_dt),date_format(min(pur_dt),&#39;%Y-%m&#39;) &#96;年月&#96;\nfrom cd_now \ngroup by user_id \n),\n temp2 as(# 2、找出每月的新客户数目 \nselect user_id,&#96;年月&#96;,count(user_id) as &#96;新客户数&#96; \nfrom \n temp1 \ngroup by &#96;年月&#96; \n ),\n temp3 as( # 3.1、找出当月有复购的新客户数目，第一步找出用户在第一次下单的那个月的购买次数\nselect n.user_id,count(n.order_id) as &#96;次数&#96;,&#96;年月&#96; \nfrom cd_now n \n inner join temp1 \non n.user_id &#x3D; temp1.user_id and temp1.&#96;年月&#96; &#x3D; date_format(pur_dt,&quot;%Y-%m&quot;)\ngroup by temp1.user_id\n ),\n temp4 as ( # 3.2、找出当月有复购的新客户数目,第二步是将有复购的新客筛选出来（购买次数&gt;&#x3D;2）\nselect &#96;年月&#96;,temp3.user_id,count(temp3.user_id) as &#96;有复购的新客户数目&#96;\nfrom temp3 \nwhere &#96;次数&#96;&gt;&#x3D;2\ngroup by temp3.&#96;年月&#96;\n ),\n temp5 as ( # 计算复购率\nselect temp2.&#96;年月&#96;,temp2.&#96;新客户数&#96;,ifnull(temp4.&#96;有复购的新客户数目&#96;,0) &#96;老客户数&#96;,\n ifnull(temp4.&#96;有复购的新客户数目&#96;&#x2F;temp2.&#96;新客户数&#96;,0) &#96;复购率&#96;\n from temp2\n left join temp4\non temp2.&#96;年月&#96; &#x3D; temp4.&#96;年月&#96;\n ) select * from temp5</code></pre>\n<h3 id=\"rfm模型\"><a href=\"#rfm模型\" class=\"headerlink\" title=\"rfm模型\"></a>rfm模型</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 用户id,下单次数,最近下单时间,顾客实付,下单间隔,实付客单,rfm类型,\nselect \na.user_id\n,a.&#96;下单次数&#96;\n,a.&#96;最近下单时间&#96;\n,a.&#96;顾客实付&#96;\n,a.&#96;下单间隔&#96;\n,a.&#96;实付客单&#96;\n,case \nwhen a.&#96;下单间隔&#96; &gt; 45 and a.&#96;下单次数&#96; &lt;&#x3D; 1 and a.&#96;实付客单&#96; &lt;&#x3D;50 then &#39;111&#39; \nwhen a.&#96;下单间隔&#96; &gt; 45 and a.&#96;下单次数&#96; &lt;&#x3D; 1 and a.&#96;实付客单&#96; &gt;50 then &#39;112&#39; \nwhen a.&#96;下单间隔&#96; &gt; 45 and a.&#96;下单次数&#96; &gt; 1 and a.&#96;实付客单&#96; &lt;&#x3D;50 then &#39;121&#39; \nwhen a.&#96;下单间隔&#96; &lt;&#x3D; 45 and a.&#96;下单次数&#96; &lt;&#x3D; 1 and a.&#96;实付客单&#96; &lt;&#x3D;50 then &#39;211&#39; \nwhen a.&#96;下单间隔&#96; &lt;&#x3D; 45 and a.&#96;下单次数&#96; &gt; 1 and a.&#96;实付客单&#96; &lt;&#x3D;50 then &#39;221&#39; \nwhen a.&#96;下单间隔&#96; &lt;&#x3D; 45 and a.&#96;下单次数&#96; &lt;&#x3D; 1 and a.&#96;实付客单&#96; &gt; 50 then &#39;212&#39; \nwhen a.&#96;下单间隔&#96; &lt;&#x3D; 45 and a.&#96;下单次数&#96; &gt; 1 and a.&#96;实付客单&#96; &gt; 50 then &#39;222&#39; \nwhen a.&#96;下单间隔&#96; &gt; 45 and a.&#96;下单次数&#96; &gt; 1 and a.&#96;实付客单&#96; &gt; 50 then &#39;122&#39; \nend as &#39;rfm_type&#39;\nfrom \n(select \nuser_id \n,count(pur_dt) &#96;下单次数&#96;\n,date_format(max(pur_dt),&quot;%Y-%m-%d&quot;) &#96;最近下单时间&#96;\n,sum(pur_amount) &#96;顾客实付&#96;\n,datediff(&quot;1998-03-31&quot;,date_format(max(pur_dt),&quot;%Y-%m-%d&quot;)) &#96;下单间隔&#96;\n,avg(pur_amount) as &#96;实付客单&#96;\nfrom supermanzwg.cd_now \nwhere date_format(month,&quot;%Y-%m-%d&quot;) between &quot;1998-01-01&quot; and &quot;1998-03-01&quot;\ngroup by \nuser_id ) a ;</code></pre>\n\n<h3 id=\"用户行为\"><a href=\"#用户行为\" class=\"headerlink\" title=\"用户行为\"></a>用户行为</h3><ul>\n<li><p>有订单事务表、收藏事务表,要求：请用一句SQL取出所有用户对商品的行为特征，特征分为已购买、</p>\n</li>\n<li><p>购买未收藏、收藏未购买、收藏且购买</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 数据准备\ncreate table redbk_orders(\n &#96;id&#96; int(5),\n &#96;user_id&#96; varchar(10),\n &#96;item_id&#96; int(5),\n &#96;par_time&#96; varchar(30),\n &#96;item_num&#96; int(5)\n);\ninsert into redbk_orders values(1,&#39;001&#39;,&#39;201&#39;,&#39;2018-08-31 00:00:01&#39;,1);\ninsert into redbk_orders values(2,&#39;002&#39;,&#39;203&#39;,&#39;2018-09-02 12:00:02&#39;,2);\ninsert into redbk_orders values(3,&#39;003&#39;,&#39;203&#39;,&#39;2018-09-01 00:00:01&#39;,1);\ninsert into redbk_orders values(4,&#39;003&#39;,&#39;203&#39;,&#39;2018-09-04 09:10:30&#39;,1);\ncreate table redbk_favorites(\n &#96;id&#96; int(5),\n &#96;user_id&#96; varchar(10),\n &#96;item_id&#96; INT(5),\n &#96;fav_time&#96; varchar(30)\n);\ninsert into redbk_favorites values(1,&#39;001&#39;,201,&#39;2018-08-31 00:00:01&#39;);\ninsert into redbk_favorites values(2,&#39;002&#39;,202,&#39;2018-09-02 12:00:02&#39;);\ninsert into redbk_favorites values(3,&#39;003&#39;,204,&#39;2018-09-01 00:00:01&#39;);</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">select \no.user_id \n,o.item_id \n,1 as &quot;已购买&quot; \n,case when f.item_id is null then 1 else 0 end as &quot;购买未收藏&quot;\n,0 as &quot;收藏未购买&quot; \n,case when f.item_id is not null then 1 else 0 end as &quot;收藏且购买&quot;\nfrom myemployees.redbk_orders o \nleft join myemployees.redbk_favorites f \non o.user_id &#x3D; f.user_id and o.item_id &#x3D; f.item_id \nwhere o.user_id is not null \nunion \nselect \no.user_id \n,o.item_id \n,case when o.item_id is not null then 1 else 0 end as &quot;已购买&quot; \n,0 as &quot;购买未收藏&quot;\n,case when o.item_id is null then 1 else 0 end as &quot;收藏未购买&quot; \n,case when o.item_id is not null then 1 else 0 end as &quot;收藏且购买&quot;\nfrom myemployees.redbk_favorites f \nleft join myemployees.redbk_orders o \non o.user_id &#x3D; f.user_id and o.item_id &#x3D; f.item_id\nwhere o.user_id is not null;</code></pre></li>\n<li><p>某购物APP最近上线了一个新功能，用户签到后可以跳转到大转盘抽奖，抽奖获得的奖金可以抵消购物的费用，以此来培养用户使用app的习惯。</p>\n</li>\n<li><p>现有一张用户行为表user_log，主要字段如下，记录了用户在app上的所有行为日志，即何人user_id在何时event_time进行了什么操作event_id。</p>\n</li>\n</ul>\n<h3 id=\"贡献度-累计求和\"><a href=\"#贡献度-累计求和\" class=\"headerlink\" title=\"贡献度-累计求和\"></a>贡献度-累计求和</h3><ul>\n<li>计算各个用户的消费金额综合</li>\n<li>对用户消费金额进行累加，并计算累计占比，就是贡献度<pre class=\"line-numbers language-none\"><code class=\"language-none\">select \nt.*\nfrom\n\t(select \n\tuser_id \n\t,round(amount,2) amount\n\t,round(sum(amount)over(order by amount desc) ,2) cum_amount\n\t,round(sum(amount)over(order by amount desc)&#x2F;(select sum(pur_amount) from cd_now),4) as cum_rate\n\tfrom \n\t\t(select \n\t\tuser_id \n\t\t,sum(pur_amount) amount\n\t\tfrom \n\t\tcd_now \n\t\twhere pur_amount &gt;0\n\t\tgroup by \n\t\tuser_id ) user_table\n\t) t\nwhere t.cum_rate&lt;0.8</code></pre></li>\n</ul>\n<h3 id=\"电商类\"><a href=\"#电商类\" class=\"headerlink\" title=\"电商类\"></a>电商类</h3><ul>\n<li><p>商品活动流水表，表名为event，字段：goods_id， time；</p>\n</li>\n<li><p>求参加活动次数最多的商品的最近一次参加活动的时间</p>\n</li>\n</ul>\n<p>数据准备：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#创建 event 表\nCREATE TABLE &#96;event&#96; (\n &#96;goods_id&#96; varchar(255),\n &#96;time&#96; varchar(255)\n );\n#插入数据\nINSERT INTO &#96;event&#96; VALUES (&#39;可口可乐&#39;, &#39;2021-02-22&#39;);\nINSERT INTO &#96;event&#96; VALUES (&#39;雪碧&#39;, &#39;2021-03-01&#39;);\nINSERT INTO &#96;event&#96; VALUES (&#39;可口可乐&#39;, &#39;2021-03-04&#39;);\nINSERT INTO &#96;event&#96; VALUES (&#39;东鹏特饮&#39;, &#39;2021-03-06&#39;);\nINSERT INTO &#96;event&#96; VALUES (&#39;雪碧&#39;, &#39;2021-03-07&#39;);\nINSERT INTO &#96;event&#96; VALUES (&#39;红牛&#39;, &#39;2021-03-07&#39;);\nINSERT INTO &#96;event&#96; VALUES (&#39;东鹏特饮&#39;, &#39;2021-03-08&#39;);\nINSERT INTO &#96;event&#96; VALUES (&#39;雪碧&#39;, &#39;2021-03-08&#39;);</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 求参加活动次数最多的商品的最近一次参加活动的时间\n-- 统计每种商品参加活动的次数，以及最近一次参与活动的时间\nselect \n*\nfrom \n(select \ngoods_id\n,count(*) goods_num\n,max(time) max_time\nfrom event \ngroup by goods_id) a \norder by goods_num desc limit 1</code></pre>\n\n<ul>\n<li>新老客 <code>trans</code>和<code>profile</code></li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 请计算每一类客户在2019年每月产生的销售(即购买金额大于0，及发生购买的人数(客户类型分为:新客，老客；新客:2019年产生第一次购买；老客:2019年之前已经购买过)\n-- 先分清新老客,在分类统计\nselect \nmonth(purchase_date) &#96;月份&#96;\n,customer_type  \n,sum(Quantity*Unit_price) &#96;金额&#96;\n,count(*)\nfrom \n(select \nt.*\n,case when year(p.FIRST_PUR_DATE)&#x3D;2019 then &#39;新客&#39; else &#39;老客&#39; end as &#96;customer_type&#96;\nfrom &#96;trans&#96; t \nleft join &#96;profile&#96; p\non t.Customer_ID &#x3D; p.Customer_ID\nwhere year(purchase_date)&#x3D;2019) a\ngroup by month(purchase_date),customer_type;</code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-- 现要给2019年新客发送A、B小样，线上新客发放A小样，线下新客发放B小样，请编写程序抽取相应的名单\n-- 字段 COUNTERID : offline 线下，online 线上\nselect \n*\n,case when COUNTER_ID like &#39;online%&#39; then &#39;A&#39; else &#39;B&#39; end as &#39;demo_type&#39;\nfrom \n(select \nt.*\n,case when year(p.FIRST_PUR_DATE)&#x3D;2019 then &#39;新客&#39; else &#39;老客&#39; end as &#96;customer_type&#96;\nfrom &#96;trans&#96; t \nleft join &#96;profile&#96; p\non t.Customer_ID &#x3D; p.Customer_ID\nwhere year(purchase_date)&#x3D;2019) a\nwhere &#96;customer_type&#96;&#x3D;&#39;新客&#39;;</code></pre>\n\n<h3 id=\"相邻座位互换\"><a href=\"#相邻座位互换\" class=\"headerlink\" title=\"相邻座位互换\"></a>相邻座位互换</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">create TABLE \n&#96;Seat&#96; (\n\t&#96;id&#96; VARCHAR(255),\n\t&#96;employee&#96; VARCHAR(255)\n);\ninsert INTO &#96;Seat&#96; VALUES (&#39;1&#39;, &#39;Jack&#39;);\nINSERT INTO &#96;Seat&#96; VALUES (&#39;2&#39;, &#39;Scott&#39;);\nINSERT INTO &#96;Seat&#96; VALUES (&#39;3&#39;, &#39;Emery&#39;);\nINSERT INTO &#96;Seat&#96; VALUES (&#39;4&#39;, &#39;Green&#39;);\nINSERT INTO &#96;Seat&#96; VALUES (&#39;5&#39;, &#39;Linda&#39;);\nINSERT INTO &#96;Seat&#96; VALUES (&#39;6&#39;, &#39;Jane&#39;);\n\n#查询每两个相邻的座位互换（可以看作是两两相邻奇数和偶数呼唤，奇数下移，偶数上移）\nselect \n(case \nwhen mod(id,2)!&#x3D;0 and id!&#x3D;a.counts then id+1 \nwhen mod(id,2)!&#x3D;0 and id&#x3D;a.counts then id \nelse id-1 end) as id \n,employee\nfrom \n&#96;Seat&#96;,(select count(*) counts from &#96;Seat&#96;) a\norder by id;</code></pre>\n\n","text":"建表CREATE TABLE &#96;cd_20210414&#96; ( &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT, &#96;platform&#96; varchar(10) CHARACTER SET utf8mb4 CO...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E8%A1%A8\"><span class=\"toc-text\">建表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%A2%9E%E6%A0%87%E7%AD%BE%E5%88%97%EF%BC%8C%E5%8A%A0%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">新增标签列，加索引</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E8%AF%A2%E5%BD%93%E6%9C%88%E6%97%A5%E6%9C%9F%E5%8F%8A%E5%AF%B9%E5%BA%94%E4%B8%8A%E6%9C%88%E6%97%A5%E6%9C%9F\"><span class=\"toc-text\">查询当月日期及对应上月日期</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%8F%E4%B8%AA%E9%83%A8%E9%97%A8%E8%96%AA%E6%B0%B4%E6%9C%80%E9%AB%98%E7%9A%84%E5%91%98%E5%B7%A5-%E5%8C%85%E5%90%AB%E9%83%A8%E9%97%A8%E5%90%8D%E7%A7%B0\"><span class=\"toc-text\">每个部门薪水最高的员工(包含部门名称)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%97%E6%95%B0%E3%80%81%E5%B9%B3%E5%9D%87%E6%95%B0%E3%80%81%E4%B8%AD%E4%BD%8D%E6%95%B0\"><span class=\"toc-text\">众数、平均数、中位数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8A%E3%80%81%E4%B8%8B%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0\"><span class=\"toc-text\">上、下四分位数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%AA%E8%87%B3%E5%BD%93%E5%89%8D%EF%BC%8C%E6%AF%8F%E4%B8%AA%E7%94%A8%E6%88%B7%E5%B7%B2%E7%BB%8F%E8%BF%9E%E7%BB%AD%E7%AD%BE%E5%88%B0%E7%9A%84%E5%A4%A9%E6%95%B0\"><span class=\"toc-text\">截至当前，每个用户已经连续签到的天数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E6%9C%89%E5%8F%B2%E4%BB%A5%E6%9D%A5%E7%94%A8%E6%88%B7%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E7%AD%BE%E5%88%B0%E5%A4%A9%E6%95%B0%EF%BC%9B\"><span class=\"toc-text\">计算有史以来用户最大连续签到天数；</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E8%B4%AD%E4%B9%B0%E5%A4%A9%E6%95%B0%E5%8F%8A%E6%AC%A1%E6%95%B0\"><span class=\"toc-text\">用户最大连续购买天数及次数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%90%E4%B8%80%E5%A4%A9%E4%BB%A5%E5%8F%8A%E8%BF%91%E4%B8%83%E5%A4%A9%E6%96%B0%E5%A2%9E%E7%94%A8%E6%88%B7%E6%95%B0\"><span class=\"toc-text\">某一天以及近七天新增用户数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%AF%E4%BB%98%E9%87%91%E9%A2%9D%E5%9C%A8%E5%89%8D-20-%E7%9A%84%E7%94%A8%E6%88%B7\"><span class=\"toc-text\">支付金额在前 20%的用户</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%8F%E6%9C%88%E6%9C%80%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E5%89%8D%E4%B8%89%E5%90%8D\"><span class=\"toc-text\">每月最受欢迎的前三名</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E7%95%99%E5%AD%98\"><span class=\"toc-text\">用户留存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%A7%E5%93%81%E7%95%99%E5%AD%98\"><span class=\"toc-text\">产品留存</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E8%80%81%E5%AE%A2-amp-%E5%A4%8D%E8%B4%AD\"><span class=\"toc-text\">新老客&amp;复购</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#rfm%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">rfm模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">用户行为</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B4%A1%E7%8C%AE%E5%BA%A6-%E7%B4%AF%E8%AE%A1%E6%B1%82%E5%92%8C\"><span class=\"toc-text\">贡献度-累计求和</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%B5%E5%95%86%E7%B1%BB\"><span class=\"toc-text\">电商类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B8%E9%82%BB%E5%BA%A7%E4%BD%8D%E4%BA%92%E6%8D%A2\"><span class=\"toc-text\">相邻座位互换</span></a></li></ol>","author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/default-cover.df7c128c.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"python办公自动化：pdf和word","uid":"3cd7e57c6f854790d628f23694417fc5","slug":"python办公自动化：pdf和word","date":"2021-08-26T06:16:31.000Z","updated":"2022-04-03T06:10:22.109Z","comments":true,"path":"api/articles/python办公自动化：pdf和word.json","keywords":null,"cover":null,"text":"python 使用 PyPDF2 和 pdfplumber 操作pdf PyPDF2 官网：https://pythonhosted.org/PyPDF2/ PyPDF2 可以更好的读取、写入、分割、合并 PDF 文件； pdfplumber 官网：https://github....","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"自动化","slug":"自动化","count":4,"path":"api/tags/自动化.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/default-cover.df7c128c.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"python-flask疫情数据可视化","uid":"d36edaa00a28ef96e171ed217c165e70","slug":"python-flask疫情数据可视化","date":"2021-07-21T06:18:39.000Z","updated":"2022-04-03T06:06:25.002Z","comments":true,"path":"api/articles/python-flask疫情数据可视化.json","keywords":null,"cover":null,"text":"Flask是一个轻量级的web框架，看了https://www.bilibili.com/video/BV177411j7qJ 大佬的视频，做的一个疫情可视化项目,（电脑屏幕小看着有点拥挤。大屏展示还是挺好看的），热搜词云的数据找不到网站了，就弄了个表格；自己修改了一些部分，感兴...","link":"","photos":[],"count_time":{"symbolsCount":309,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"https://zhang18340082962.github.io/static/img/default-cover.df7c128c.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}