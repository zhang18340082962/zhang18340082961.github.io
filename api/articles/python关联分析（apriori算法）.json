{"title":"python关联分析（apriori算法）","uid":"917af4fce65ef9c1196ef8527f6229c9","slug":"python关联分析（apriori算法）","date":"2021-02-28T14:05:20.000Z","updated":"2022-04-03T06:07:30.257Z","comments":true,"path":"api/articles/python关联分析（apriori算法）.json","keywords":null,"cover":null,"content":"<p>若两个或多个变量的取值之间存在某种规律性，就称为关联。关联规则是寻找在同一个事件中出现的不同项的相关性，比如在一次购买活动中所买不同商品的相关性。例如：“在购买计算机的顾客中，有30％的人也同时购买了打印机”。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.60btv7guvhxc.png\"\n                     \n                ></p>\n<p>一个样本称为一个“事务”<br>每个事务由多个属性来确定，这里的属性称为“项”<br>多个项组成的集合称为“项集”<br>####由k个项构成的集合<br>{牛奶}、{啤酒}都是1-项集；<br>{牛奶，果冻}是2-项集；<br>{啤酒，面包，牛奶}是3-项集<br>####X==&gt;Y含义：<br>X和Y是项集<br>X称为规则前项（antecedent）<br>Y称为规则后项（consequent）<br>####支持度（support）：一个项集或者规则在所有事务中出现的频率，σ(X):表示项集X的支持度计数<br>项集X的支持度：s(X)=σ(X)/N<br>规则X==&gt;Y表示物品集X对物品集Y的支持度，也就是物品集X和物品集Y同时出现的概率<br>某天共有100个顾客到商场购买物品，其中有30个顾客同时购买了啤酒和尿布，那么上述的关联规则的支持度就是30％<br>####置信度（confidence）：确定Y在包含X的事务中出现的频繁程度。c(X → Y) = σ(X∪Y)/σ(X)<br>p（Y│X）＝p（XY）/p(X)。<br>置信度反应了关联规则的可信度—购买了项目集X中的商品的顾客同时也购买了Y中商品的可能性有多大<br>购买薯片的顾客中有50％的人购买了可乐,则置信度为50％</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4qn34mu3vvr4.png\"\n                     \n                ></p>\n<p>####(X , Y)==&gt;Z :<br>支持度:交易中包含{X 、 Y 、 Z}的可能性<br>置信度:包含{X 、 Y}的交易中也包含Z的条件概率<br>####设最小支持度为50%, 最小可信度为 50%, 则可得到 :<br>A==&gt;C (50%, 66.6%)<br>C==&gt;A (50%, 100%)</p>\n<p>若关联规则X-&gt;Y的支持度和置信度分别大于或等于用户指定的最小支持率minsupport和最小置信度minconfidence，则称关联规则X-&gt;Y为强关联规则，否则称关联规则X-&gt;Y为弱关联规则。</p>\n<p>####提升度（lift）：物品集A的出现对物品集B的出现概率发生了多大的变化<br>lift（A==&gt;B）=confidence（A==&gt;B）/support(B)=p(B|A)/p(B)<br>现在有** 1000 ** 个消费者，有** 500** 人购买了茶叶，其中有** 450人同时** 购买了咖啡，另** 50人** 没有。由于** confidence(茶叶=&gt;咖啡)=450/500=90%** ，由此可能会认为喜欢喝茶的人往往喜欢喝咖啡。但如果另外没有购买茶叶的** 500人** ，其中同样有** 450人** 购买了咖啡，同样是很高的** 置信度90%** ,由此，得到不爱喝茶的也爱喝咖啡。这样看来，其实是否购买咖啡，与有没有购买茶叶并没有关联，两者是相互独立的，其** 提升度90%/[(450+450)/1000]=1** 。<br>由此可见，lift正是弥补了confidence的这一缺陷，if lift=1,X与Y独立，X对Y出现的可能性没有提升作用，其值越大(lift&gt;1),则表明X对Y的提升程度越大，也表明关联性越强。<br>####Leverage 与 Conviction的作用和lift类似，都是值越大代表越关联<br>Leverage : P(A,B)-P(A)P(B)<br>Conviction:P(A)P(!B)/P(A,!B）<br>####所有指标的计算公式：<br><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.1iip63ea95vk.png\"\n                     \n                ></p>\n<p>接下来获取电影数据集中个电影类型之间的关联关系：<br>anaconda安装mlxtend包</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">conda install -c conda-forge mlxtend</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import pandas as pd\nfrom mlxtend.frequent_patterns import apriori\nfrom mlxtend.frequent_patterns import association_rules\nmovie_genres &#x3D; pd.DataFrame(data,columns&#x3D;[&#39;original_title&#39;,&#39;genres&#39;])\nmovies_ohe &#x3D; movie_genres.drop(&#39;genres&#39;,1).join(movie_genres.genres.str.get_dummies())\nmovies_ohe.shape#(10866, 21)\nmovies_ohe.set_index([&#39;original_title&#39;],inplace&#x3D;True)\nfrequent_itemsets_movies &#x3D; apriori(movies_ohe,use_colnames&#x3D;True, min_support&#x3D;0.025)\nresult &#x3D; [i for i in frequent_itemsets_movies.itemsets if len(i)&gt;1]\nlen(result)#37\nrules_movies &#x3D;  association_rules(frequent_itemsets_movies, metric&#x3D;&#39;lift&#39;, min_threshold&#x3D;1.25)\nrules_movies[(rules_movies.lift&gt;4)].sort_values(by&#x3D;[&#39;lift&#39;], ascending&#x3D;False)</code></pre>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.70uir8omojk0.png\"\n                     \n                ></p>\n<p>也挺符合常理哈。</p>\n","text":"若两个或多个变量的取值之间存在某种规律性，就称为关联。关联规则是寻找在同一个事件中出现的不同项的相关性，比如在一次购买活动中所买不同商品的相关性。例如：“在购买计算机的顾客中，有30％的人也同时购买了打印机”。 一个样本称为一个“事务”每个事务由多个属性来确定，这里的属性称为“项...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"数据分析","slug":"数据分析","count":18,"path":"api/tags/数据分析.json"}],"toc":"","author":{"name":"弦好想断","slug":"blog-author","avatar":"D:\\blog\\public\\avatar.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"python办公自动化：文件和目录操作","uid":"3d3f9536d1b98ac2adb8f0a4ceb774df","slug":"python办公自动化：文件和目录操作","date":"2021-03-06T15:07:45.000Z","updated":"2022-04-03T06:09:17.212Z","comments":true,"path":"api/articles/python办公自动化：文件和目录操作.json","keywords":null,"cover":null,"text":"import os 创建目录结构 os.makedirs 可以递归的创建目录结构，比如os.makedirs(&#39;tmp&#x2F;python&#x2F;fileop&#39;,exist_ok&#x3D;True) 在当前工作目录下面创建 tmp目录，在tmp目录下面再...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"自动化","slug":"自动化","count":4,"path":"api/tags/自动化.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"D:\\blog\\public\\avatar.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"我们这样的人，谈爱都太奢侈","uid":"d3beaa185b8db8984fb4d7e370d2c9a0","slug":"我们这样的人，谈爱都太奢侈","date":"2020-09-24T03:17:06.000Z","updated":"2021-12-20T05:57:48.507Z","comments":true,"path":"api/articles/我们这样的人，谈爱都太奢侈.json","keywords":null,"cover":null,"text":"爱是人类的本能，可是成年人的世界里，所谓的真心，更多的换来的却是失落与沮丧，渐渐的他们学会了伪装与克制，变得沉默且凉薄。前几天和朋友闲聊，突然听到现如今找女朋友就像找大熊猫一样，哈哈哈，还是大学的时候投资好啊，现在估计早都不担心了。 房子带来的安稳，汽车带来的便捷，手机平板带来的...","link":"","photos":[],"count_time":{"symbolsCount":802,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"成长，旧时光","slug":"成长，旧时光","count":4,"path":"api/tags/成长，旧时光.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"D:\\blog\\public\\avatar.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}