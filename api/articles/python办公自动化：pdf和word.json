{"title":"python办公自动化：pdf和word","uid":"3cd7e57c6f854790d628f23694417fc5","slug":"python办公自动化：pdf和word","date":"2021-08-26T06:16:31.000Z","updated":"2022-05-29T15:35:52.717Z","comments":true,"path":"api/articles/python办公自动化：pdf和word.json","keywords":null,"cover":[],"content":"<h2 id=\"python-使用-PyPDF2-和-pdfplumber-操作pdf\"><a href=\"#python-使用-PyPDF2-和-pdfplumber-操作pdf\" class=\"headerlink\" title=\"python 使用 PyPDF2 和 pdfplumber 操作pdf\"></a>python 使用 PyPDF2 和 pdfplumber 操作pdf</h2><ul>\n<li>PyPDF2 官网：<a href=\"https://pythonhosted.org/PyPDF2/\">https://pythonhosted.org/PyPDF2/</a></li>\n<li>PyPDF2 可以更好的读取、写入、分割、合并 PDF 文件；</li>\n<li>pdfplumber 官网：<a href=\"https://github.com/jsvine/pdfplumber\">https://github.com/jsvine/pdfplumber</a></li>\n<li>pdfplumber 可以更好地读取 PDF 文件内容和提取 PDF 中的表格；</li>\n<li>查找某个包 anaconda search -t conda pdfplumber<br>下载某个包 anaconda show package</li>\n</ul>\n<h2 id=\"python-提取-PDF-文字内容\"><a href=\"#python-提取-PDF-文字内容\" class=\"headerlink\" title=\"python 提取 PDF 文字内容\"></a>python 提取 PDF 文字内容</h2><h3 id=\"1）利用-pdfplumber-提取文字\"><a href=\"#1）利用-pdfplumber-提取文字\" class=\"headerlink\" title=\"1）利用 pdfplumber 提取文字\"></a>1）利用 pdfplumber 提取文字</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import PyPDF2 \nimport pdfplumber \nwith pdfplumber.open(&quot;test.pdf&quot;) as p: \npage &#x3D; p.pages[2] \nprint(page.extract_text())#打印第3页所有文字</code></pre>\n<h3 id=\"2）利用-pdfplumber-提取表格并写入-excel\"><a href=\"#2）利用-pdfplumber-提取表格并写入-excel\" class=\"headerlink\" title=\"2）利用 pdfplumber 提取表格并写入 excel\"></a>2）利用 pdfplumber 提取表格并写入 excel</h3><ul>\n<li>extract_table()：如果一页有一个表格；</li>\n<li>extract_tables()：如果一页有多个表格；<pre class=\"line-numbers language-none\"><code class=\"language-none\">import PyPDF2 \nimport pdfplumber \nfrom openpyxl import Workbook \nwith pdfplumber.open(&quot;test.pdf&quot;) as p: \npage &#x3D; p.pages[4] \ntable &#x3D; page.extract_table() \nprint(table) \nworkbook &#x3D; Workbook()\nsheet &#x3D; workbook.active \nfor row in table: \n  if not &quot;&quot;.join([str(i) for i in row]) &#x3D;&#x3D; &quot;&quot;:\n  #将列表中每个元素都连接成一个字符串，如果还是一个空字符串那么肯定就是空行。\n    sheet.append(row)\n  #sheet.append(row) #直接append这里提取出来的表格有很多空行\nworkbook.save(filename &#x3D; &quot;新pdf.xlsx&quot;)</code></pre>\n提取表格这也是一种方式：<a href=\"https://github.com/camelot-dev/camelot\">https://github.com/camelot-dev/camelot</a></li>\n</ul>\n<h3 id=\"3、PDF-合并及页面的排序和旋转\"><a href=\"#3、PDF-合并及页面的排序和旋转\" class=\"headerlink\" title=\"3、PDF 合并及页面的排序和旋转\"></a>3、PDF 合并及页面的排序和旋转</h3><h4 id=\"1）分割及合并-pdf\"><a href=\"#1）分割及合并-pdf\" class=\"headerlink\" title=\"1）分割及合并 pdf\"></a>1）分割及合并 pdf</h4><p>① 合并 pdf<br>首先，我们有如下几个文件，可以发现这里共有三个 PDF 文件需要我们合并。同时可以发现他们的文件名都是有规律的(如果文件名，没有先后顺序，我们合并起来就没有意义了。)</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from PyPDF2 import PdfFileReader, PdfFileWriter \npdf_writer &#x3D; PdfFileWriter() \nfor i in range(1,len(os.listdir(r&quot;G:\\concat_pdf&quot;))+1):\n  print(i*50+1,(i+1)*50) \n  pdf_reader &#x3D; PdfFileReader(&quot;G:\\concat_pdf\\&#123;&#125;-&#123;&#125;.pdf&quot;.format(i*50+1,(i+1)*50))  \n  #这里是指文件名的格式为51-100，101-150、151-200\n  for page in range(pdf_reader.getNumPages()):\n    pdf_writer.addPage(pdf_reader.getPage(page)) \nwith open(&quot;G:\\concat_pdf\\merge.pdf&quot;, &quot;wb&quot;) as out: \n  pdf_writer.write(out)</code></pre>\n<p>② 拆分 pdf<br>这里有一个“时间序列.pdf”的文件，共 3 页，我们将其每一页存为一个 PDF 文件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from PyPDF2 import PdfFileReader, PdfFileWriter \npdf_reader &#x3D; PdfFileReader(r&quot;G:\\concat_pdf\\时间序列.pdf&quot;) \nfor page in range(pdf_reader.getNumPages()): \n  pdf_writer &#x3D; PdfFileWriter() \n  pdf_writer.addPage(pdf_reader.getPage(page)) \n  with open(f&quot;G:\\concat_pdf\\\\&#123;page&#125;.pdf&quot;, &quot;wb&quot;) as out: \n    pdf_writer.write(out)</code></pre>\n<h4 id=\"2）旋转及排序-pdf\"><a href=\"#2）旋转及排序-pdf\" class=\"headerlink\" title=\"2）旋转及排序 pdf\"></a>2）旋转及排序 pdf</h4><p>① 旋转 pdf</p>\n<ul>\n<li>.rotateClockwise(90 的倍数)：顺时针旋转 90 度</li>\n<li>.rotateCounterClockwise(90 的倍数)：逆时针旋转 90 度<pre class=\"line-numbers language-none\"><code class=\"language-none\">from PyPDF2 import PdfFileReader, PdfFileWriter\npdf_reader &#x3D; PdfFileReader(r&quot;G:\\concat_pdf\\时间序列.pdf&quot;) \npdf_writer &#x3D; PdfFileWriter() \nfor page in range(pdf_reader.getNumPages()): \n  if page % 2 &#x3D;&#x3D; 0: \n    rotation_page &#x3D; pdf_reader.getPage(page).rotateCounterClockwise(90) \n  else: \n    rotation_page &#x3D; pdf_reader.getPage(page).rotateClockwise(90) \n  pdf_writer.addPage(rotation_page) \n  with open(&quot;G:\\concat_pdf\\旋转.pdf&quot;, &quot;wb&quot;) as out: \n    pdf_writer.write(out)\n&quot;&quot;&quot; \n上述代码中，我们循环遍历了这个 pdf，对于偶数页我们逆时针旋转 90°，对于奇数页我\n们顺时针旋转 90°； 注意：旋转的角度只能是 90 的倍数；\n&quot;&quot;&quot;</code></pre>\n② 排序 pdf<br>PDF 文件需要倒序排列，应该怎么做呢？</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from PyPDF2 import PdfFileReader, PdfFileWriter \npdf_reader &#x3D; PdfFileReader(r&quot;G:\\concat_pdf\\时间序列.pdf&quot;) \npdf_writer &#x3D; PdfFileWriter() \nfor page in range(pdf_reader.getNumPages()-1, -1, -1): \n#这里用到range，很巧妙\n  pdf_writer.addPage(pdf_reader.getPage(page)) \n  with open(&quot;G:\\concat_pdf\\倒序.pdf&quot;, &quot;wb&quot;) as out:\n    pdf_writer.write(out)</code></pre>\n<h3 id=\"4、pdf-批量加水印及加密、解密\"><a href=\"#4、pdf-批量加水印及加密、解密\" class=\"headerlink\" title=\"4、pdf 批量加水印及加密、解密\"></a>4、pdf 批量加水印及加密、解密</h3><h4 id=\"1）批量加水印\"><a href=\"#1）批量加水印\" class=\"headerlink\" title=\"1）批量加水印\"></a>1）批量加水印</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">from PyPDF2 import PdfFileReader, PdfFileWriter \nfrom copy import copy \nwater &#x3D; PdfFileReader(r&quot;G:\\concat_pdf\\水印.pdf&quot;) \nwater_page &#x3D; water.getPage(0) \npdf_reader &#x3D; PdfFileReader(r&quot;G:\\concat_pdf\\aa.pdf&quot;) \npdf_writer &#x3D; PdfFileWriter() \nfor page in range(pdf_reader.getNumPages()): \n  my_page &#x3D; pdf_reader.getPage(page) \n  new_page &#x3D; copy(water_page) \n  new_page.mergePage(my_page) \n  pdf_writer.addPage(new_page) \n  with open(&quot;G:\\concat_pdf\\\\添加水印后的 aa.pdf&quot;, &quot;wb&quot;) as out: \n    pdf_writer.write(out) \n&quot;&quot;&quot; \n这里有一点需要注意：进行 pdf 合并的时候，我们希望“水印”在下面,\n文字在上面，因此 是“水印”.mergePage(“图片页”)\n&quot;&quot;&quot;</code></pre>\n<h3 id=\"2）批量加密、解密\"><a href=\"#2）批量加密、解密\" class=\"headerlink\" title=\"2）批量加密、解密\"></a>2）批量加密、解密</h3><ul>\n<li><p>这里的“解密”，是在知道 pdf 的密码下，去打开 pdf，而不是暴力破解；<br>① 加密 pdf</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from PyPDF2 import PdfFileReader, PdfFileWriter \npdf_reader &#x3D; PdfFileReader(r&quot;G:\\concat_pdf\\test.pdf&quot;) \npdf_writer &#x3D; PdfFileWriter() \nfor page in range(pdf_reader.getNumPages()): \npdf_writer.addPage(pdf_reader.getPage(page)) \n# 添加密码\npdf_writer.encrypt(&quot;a123456&quot;)\nwith open(&quot;G:\\concat_pdf\\\\test.pdf&quot;, &quot;wb&quot;) as out: \npdf_writer.write(out)</code></pre>\n<p>② 解密 pdf 并保存为未加密的 pdf</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from PyPDF2 import PdfFileReader, PdfFileWriter \npdf_reader &#x3D; PdfFileReader(r&quot;G:\\concat_pdf\\test.pdf&quot;) \n# 解密\npdf pdf_reader.decrypt(&quot;a123456&quot;) \npdf_writer &#x3D; PdfFileWriter() \nfor page in range(pdf_reader.getNumPages()): \n  pdf_writer.addPage(pdf_reader.getPage(page))\n  with open(&quot;G:\\concat_pdf\\未加密.pdf&quot;, &quot;wb&quot;) as out: \n    pdf_writer.write(out)</code></pre>\n<h2 id=\"python-使用-python-docx-操作-word\"><a href=\"#python-使用-python-docx-操作-word\" class=\"headerlink\" title=\"python 使用 python-docx 操作 word\"></a>python 使用 python-docx 操作 word</h2><h3 id=\"1、python-docx-库介绍\"><a href=\"#1、python-docx-库介绍\" class=\"headerlink\" title=\"1、python-docx 库介绍\"></a>1、python-docx 库介绍</h3></li>\n<li><p>该模块儿可以创建、修改 Word（.docx）文件；</p>\n</li>\n<li><p>此模块儿不属于 python 标准库，需要单独安装；</p>\n</li>\n<li><p>python-docx 使用官网： <a href=\"https://python-docx.readthedocs.io/en/latest/%EF%BC%9B\">https://python-docx.readthedocs.io/en/latest/；</a></p>\n</li>\n<li><p>我们在安装此模块儿使用的是 pip install python-docx，但是在导入的时候是 import<br>docx； </p>\n<h3 id=\"2、Python-读取-Word-文档内容\"><a href=\"#2、Python-读取-Word-文档内容\" class=\"headerlink\" title=\"2、Python 读取 Word 文档内容\"></a>2、Python 读取 Word 文档内容</h3></li>\n<li><p>注意：每进行一个操作，必须保存一下，否则等于白做；<br>1）word 文档结构介绍</p>\n</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.5t8bcxum41a8.png\"><br>2）python-docx 提取文字和文字块儿<br>① python-docx 提取文字<br>有一个这样的 docx 文件，提取其中的文字</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from docx import Document \ndoc &#x3D; Document(r&quot;G:\\concat_word\\test1.docx&quot;) \nprint(doc.paragraphs) \nfor paragraph in doc.paragraphs: \n  print(paragraph.text)</code></pre>\n<p>② python-docx 提取文字块儿</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from docx import Document \ndoc &#x3D; Document(r&quot;G:\\concat_word\\test1.docx&quot;) \nprint(doc.paragraphs) \nfor i range(len((doc.paragraphs)):\n#这里按段落进行循环\n  paragraph &#x3D; doc.paragraphs[i] \n  runs &#x3D; paragraph.runs \n  print(runs) \n  for run in paragraph.runs: \n    print(run.text)</code></pre>\n<p>3）利用 Python 向 Word 文档写入内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">from docx import Document \ndoc &#x3D; Document(r&quot;G:\\concat_word\\test1.docx&quot;) \n# print(doc.add_heading(&quot;一级标题&quot;, level&#x3D;1)) 添加一级标题的时候出错，还没有解决！\nparagraph1 &#x3D; doc.add_paragraph(&quot;这是一个段落&quot;) \nparagraph2 &#x3D; doc.add_paragraph(&quot;这是第二个段落&quot;) \ndoc.save(r&quot;G:\\concat_word\\test1.docx&quot;) \n&quot;&quot;&quot; \n添加段落的时候，赋值给一个变量，方便我们后面进行格式调整；\n&quot;&quot;&quot;</code></pre>\n<ul>\n<li>读取word文档中的表格内容<pre class=\"line-numbers language-none\"><code class=\"language-none\">import docx\n\nfn &#x3D; r&#39;D:\\长恨歌.docx&#39;\ndoc &#x3D; docx.Document(fn)\n\n# 按段落读取全部数据\nfor paragraph in doc.paragraphs:\n    print(paragraph.text)\n\n# 按表格读取全部数据\nfor table in doc.tables:\n    for row in table.rows:\n        for cell in row.cells:\n            print(cell.text)\n\ntable_num &#x3D; len(doc.tables)\n# 获取文档的表格个数\nprint(table_num)\n\ntable_0 &#x3D; doc.tables[0]\n# 选取第一个表\ntable_rows &#x3D; len(table_0.rows)\n# 获取第一个表的行数\nprint(table_rows)\n\ntab &#x3D; doc.tables[0].rows[0].cells[0]\n# 获取第一张表第一行第一列数据\nprint(tab.text)\n\npar &#x3D; doc.paragraphs[2]\n# 读取第三段数据\nprint(par.text)</code></pre></li>\n<li>批量提取word中表格内容<pre class=\"line-numbers language-none\"><code class=\"language-none\">import docx\nimport pandas as pd\nfrom docx import Document #导入库\npath &#x3D; &quot;word2.docx&quot; #文件路径\ndocument &#x3D; Document(path) #读入文件\ntables &#x3D; document.tables #获取文件中的表格集\ntable &#x3D; tables[0]#获取文件中的第一个表格\n\nfor table in tables:\n    columns &#x3D; [table.cell(0,c).text for c in range(len(table.columns))]#获取表头 \n#     print(columns)\n    values &#x3D; []\n    for i in range(1,len(table.rows)):#从表格第二行开始循环读取表格数据\n        result &#x3D; [table.cell(i,c).text for c in range(len(table.columns))]# 自动获取每一行的数据\n        #cell(i,0)表示第(i+1)行第1列数据，以此类推\n#         print(result)\n        values.append(result)\n    print(values)\n    print(columns)\n    print(pd.DataFrame(data &#x3D; values,columns&#x3D;columns))</code></pre>\n在操作word这块感觉并不怎么实用，等遇到问题了再加，也可以参考<br><a href=\"https://juejin.cn/post/6868073137263607821\">https://juejin.cn/post/6868073137263607821</a></li>\n</ul>\n","text":"python 使用 PyPDF2 和 pdfplumber 操作pdf PyPDF2 官网：https://pythonhosted.org/PyPDF2/ PyPDF2 可以更好的读取、写入、分割、合并 PDF 文件； pdfplumber 官网：https://github....","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"python","slug":"python","count":18,"path":"api/categories/python.json"}],"tags":[{"name":"自动化","slug":"自动化","count":6,"path":"api/tags/自动化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python-%E4%BD%BF%E7%94%A8-PyPDF2-%E5%92%8C-pdfplumber-%E6%93%8D%E4%BD%9Cpdf\"><span class=\"toc-text\">python 使用 PyPDF2 和 pdfplumber 操作pdf</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python-%E6%8F%90%E5%8F%96-PDF-%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">python 提取 PDF 文字内容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E5%88%A9%E7%94%A8-pdfplumber-%E6%8F%90%E5%8F%96%E6%96%87%E5%AD%97\"><span class=\"toc-text\">1）利用 pdfplumber 提取文字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E5%88%A9%E7%94%A8-pdfplumber-%E6%8F%90%E5%8F%96%E8%A1%A8%E6%A0%BC%E5%B9%B6%E5%86%99%E5%85%A5-excel\"><span class=\"toc-text\">2）利用 pdfplumber 提取表格并写入 excel</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81PDF-%E5%90%88%E5%B9%B6%E5%8F%8A%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%8E%92%E5%BA%8F%E5%92%8C%E6%97%8B%E8%BD%AC\"><span class=\"toc-text\">3、PDF 合并及页面的排序和旋转</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E5%88%86%E5%89%B2%E5%8F%8A%E5%90%88%E5%B9%B6-pdf\"><span class=\"toc-text\">1）分割及合并 pdf</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E6%97%8B%E8%BD%AC%E5%8F%8A%E6%8E%92%E5%BA%8F-pdf\"><span class=\"toc-text\">2）旋转及排序 pdf</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81pdf-%E6%89%B9%E9%87%8F%E5%8A%A0%E6%B0%B4%E5%8D%B0%E5%8F%8A%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86\"><span class=\"toc-text\">4、pdf 批量加水印及加密、解密</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%EF%BC%89%E6%89%B9%E9%87%8F%E5%8A%A0%E6%B0%B4%E5%8D%B0\"><span class=\"toc-text\">1）批量加水印</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89%E6%89%B9%E9%87%8F%E5%8A%A0%E5%AF%86%E3%80%81%E8%A7%A3%E5%AF%86\"><span class=\"toc-text\">2）批量加密、解密</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python-%E4%BD%BF%E7%94%A8-python-docx-%E6%93%8D%E4%BD%9C-word\"><span class=\"toc-text\">python 使用 python-docx 操作 word</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81python-docx-%E5%BA%93%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">1、python-docx 库介绍</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81Python-%E8%AF%BB%E5%8F%96-Word-%E6%96%87%E6%A1%A3%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">2、Python 读取 Word 文档内容</span></a></li></ol></li></ol>","author":{"name":"弦好想断","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"python中requests使用中文乱码的解决方案","uid":"8a288770ed82450aa993ccbeacfd0367","slug":"requests乱码问题解决","date":"2021-12-02T15:30:02.000Z","updated":"2022-05-29T15:36:46.176Z","comments":true,"path":"api/articles/requests乱码问题解决.json","keywords":null,"cover":null,"text":" 中文乱码处理import requests url &#x3D; &quot;http:&#x2F;&#x2F;www.baidu.com&quot; r &#x3D; requests.get(url) # 自动选择合适的编码方式 r.encoding &#x3D; r.ap...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":18,"path":"api/categories/python.json"}],"tags":[{"name":"数据分析","slug":"数据分析","count":15,"path":"api/tags/数据分析.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"sql数据分析：自动化报表，多场景持续更新","uid":"ce3f6facdcd7d14d49266cce6ca90c5e","slug":"sql数据分析：自动化报表，多场景更新","date":"2021-08-06T15:19:59.000Z","updated":"2022-06-22T16:06:58.563Z","comments":true,"path":"api/articles/sql数据分析：自动化报表，多场景更新.json","keywords":null,"cover":null,"text":"建表CREATE TABLE &#96;cd_20210414&#96; ( &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT, &#96;platform&#96; varchar(10) CHARACTER SET utf8mb4 CO...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"16 mins."},"categories":[{"name":"sql","slug":"sql","count":5,"path":"api/categories/sql.json"}],"tags":[{"name":"数据分析","slug":"数据分析","count":15,"path":"api/tags/数据分析.json"}],"author":{"name":"弦好想断","slug":"blog-author","avatar":"/img/avatar.jpg","link":"/","description":"处女座男生，热爱技术、吉他、旅行。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}