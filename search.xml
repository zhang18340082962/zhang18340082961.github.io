<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python关联分析（apriori算法）</title>
    <url>/2021/02/28/python%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90%EF%BC%88apriori%E7%AE%97%E6%B3%95%EF%BC%89/</url>
    <content><![CDATA[<p>若两个或多个变量的取值之间存在某种规律性，就称为关联。关联规则是寻找在同一个事件中出现的不同项的相关性，比如在一次购买活动中所买不同商品的相关性。例如：“在购买计算机的顾客中，有30％的人也同时购买了打印机”。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="C:\Users\supermanzwg\AppData\Roaming\Typora\typora-user-images\image-20211207005033327.png"
                      alt="image-20211207005033327"
                ></p>
<p>一个样本称为一个“事务”<br>每个事务由多个属性来确定，这里的属性称为“项”<br>多个项组成的集合称为“项集”<br>####由k个项构成的集合<br>{牛奶}、{啤酒}都是1-项集；<br>{牛奶，果冻}是2-项集；<br>{啤酒，面包，牛奶}是3-项集<br>####X==&gt;Y含义：<br>X和Y是项集<br>X称为规则前项（antecedent）<br>Y称为规则后项（consequent）<br>####支持度（support）：一个项集或者规则在所有事务中出现的频率，σ(X):表示项集X的支持度计数<br>项集X的支持度：s(X)=σ(X)/N<br>规则X==&gt;Y表示物品集X对物品集Y的支持度，也就是物品集X和物品集Y同时出现的概率<br>某天共有100个顾客到商场购买物品，其中有30个顾客同时购买了啤酒和尿布，那么上述的关联规则的支持度就是30％<br>####置信度（confidence）：确定Y在包含X的事务中出现的频繁程度。c(X → Y) = σ(X∪Y)/σ(X)<br>p（Y│X）＝p（XY）/p(X)。<br>置信度反应了关联规则的可信度—购买了项目集X中的商品的顾客同时也购买了Y中商品的可能性有多大<br>购买薯片的顾客中有50％的人购买了可乐,则置信度为50％</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/6460608-3dcd7e03045254b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                     
                ></p>
<p>####(X , Y)==&gt;Z :<br>支持度:交易中包含{X 、 Y 、 Z}的可能性<br>置信度:包含{X 、 Y}的交易中也包含Z的条件概率<br>####设最小支持度为50%, 最小可信度为 50%, 则可得到 :<br>A==&gt;C (50%, 66.6%)<br>C==&gt;A (50%, 100%)</p>
<p>若关联规则X-&gt;Y的支持度和置信度分别大于或等于用户指定的最小支持率minsupport和最小置信度minconfidence，则称关联规则X-&gt;Y为强关联规则，否则称关联规则X-&gt;Y为弱关联规则。</p>
<p>####提升度（lift）：物品集A的出现对物品集B的出现概率发生了多大的变化<br>lift（A==&gt;B）=confidence（A==&gt;B）/support(B)=p(B|A)/p(B)<br>现在有** 1000 ** 个消费者，有** 500** 人购买了茶叶，其中有** 450人同时** 购买了咖啡，另** 50人** 没有。由于** confidence(茶叶=&gt;咖啡)=450/500=90%** ，由此可能会认为喜欢喝茶的人往往喜欢喝咖啡。但如果另外没有购买茶叶的** 500人** ，其中同样有** 450人** 购买了咖啡，同样是很高的** 置信度90%** ,由此，得到不爱喝茶的也爱喝咖啡。这样看来，其实是否购买咖啡，与有没有购买茶叶并没有关联，两者是相互独立的，其** 提升度90%/[(450+450)/1000]=1** 。<br>由此可见，lift正是弥补了confidence的这一缺陷，if lift=1,X与Y独立，X对Y出现的可能性没有提升作用，其值越大(lift&gt;1),则表明X对Y的提升程度越大，也表明关联性越强。<br>####Leverage 与 Conviction的作用和lift类似，都是值越大代表越关联<br>Leverage : P(A,B)-P(A)P(B)<br>Conviction:P(A)P(!B)/P(A,!B）<br>####所有指标的计算公式：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/6460608-7a4b805215c66bda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                     
                ></p>
<p>接下来获取电影数据集中个电影类型之间的关联关系：<br>anaconda安装mlxtend包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge mlxtend</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from mlxtend.frequent_patterns import apriori</span><br><span class="line">from mlxtend.frequent_patterns import association_rules</span><br><span class="line">movie_genres = pd.DataFrame(data,columns=[&#x27;original_title&#x27;,&#x27;genres&#x27;])</span><br><span class="line">movies_ohe = movie_genres.drop(&#x27;genres&#x27;,1).join(movie_genres.genres.str.get_dummies())</span><br><span class="line">movies_ohe.shape#(10866, 21)</span><br><span class="line">movies_ohe.set_index([&#x27;original_title&#x27;],inplace=True)</span><br><span class="line">frequent_itemsets_movies = apriori(movies_ohe,use_colnames=True, min_support=0.025)</span><br><span class="line">result = [i for i in frequent_itemsets_movies.itemsets if len(i)&gt;1]</span><br><span class="line">len(result)#37</span><br><span class="line">rules_movies =  association_rules(frequent_itemsets_movies, metric=&#x27;lift&#x27;, min_threshold=1.25)</span><br><span class="line">rules_movies[(rules_movies.lift&gt;4)].sort_values(by=[&#x27;lift&#x27;], ascending=False)</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/6460608-670393b30a7888a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                     
                ></p>
<p>也挺符合常理哈。</p>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python办公自动化：操作excel</title>
    <url>/2021/12/08/python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96%EF%BC%9A%E6%93%8D%E4%BD%9Cexcel/</url>
    <content><![CDATA[<p>#python 使用 openpyxl 操作 excel</p>
<ul>
<li><p>openpyxl 最好用的 python 操作 excel 表格库，不接受反驳（想反驳自己去学其他的） </p>
</li>
<li><p>openpyxl 官网链接：<a class="link"   href="https://openpyxl.readthedocs.io/en/stable/" >https://openpyxl.readthedocs.io/en/stable/<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>openpyxl 只支持【.xlsx / .xlsm / .xltx / .xltm】格式的文件</p>
</li>
<li><p>建议在jupyter-notebook里面操作</p>
<h3 id="打开-Excel-表格并获取表格名称；通过-sheet-名称获取表格"><a href="#打开-Excel-表格并获取表格名称；通过-sheet-名称获取表格" class="headerlink" title="打开 Excel 表格并获取表格名称；通过 sheet 名称获取表格"></a>打开 Excel 表格并获取表格名称；通过 sheet 名称获取表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">workbook.sheetnames #打开 Excel 表格并获取表格名称</span><br><span class="line">sheet = workbook[&quot;Sheet1&quot;] #通过 sheet 名称获取表格</span><br><span class="line">sheet.dimensions # 获取表格的尺寸大小(几行几列数据)</span><br></pre></td></tr></table></figure>
<h3 id="获取表格内某个格子的数据"><a href="#获取表格内某个格子的数据" class="headerlink" title="获取表格内某个格子的数据"></a>获取表格内某个格子的数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active #打开激活的表格</span><br><span class="line">print(sheet) </span><br><span class="line">cell1 = sheet[&quot;A1&quot;] #获取 A1 格子的数据</span><br><span class="line">cell2 = sheet[&quot;C11&quot;] </span><br><span class="line">cell3 = sheet.cell(row = 1,column = 1) #通过指定行列号获取格子数据</span><br><span class="line">cell4 = sheet.cell(row = 11,column = 3)</span><br><span class="line">print(cell1.value, cell1.row, cell1.column, cell1.coordinate) </span><br><span class="line">#获取格子中的值、行数、列数、坐标；</span><br><span class="line">sheet[&quot;A&quot;] --- 获取 A 列的数据</span><br><span class="line">sheet[&quot;A:C&quot;] --- 获取 A,B,C 三列的数据</span><br><span class="line">sheet[5] --- 只获取第 5 行的数据</span><br><span class="line"># 获取 A1:C2 区域的值</span><br><span class="line">cell = sheet[&quot;A1:C2&quot;] </span><br><span class="line">print(cell) </span><br><span class="line">for i in cell: </span><br><span class="line">  for j in i: </span><br><span class="line">    print(j.value)</span><br></pre></td></tr></table></figure></li>
<li><p>.iter_rows()方式（类似pandas里面的iterrows）有.iter_rows()方式，肯定也会有.iter_cols()方式，只不过一个是按行读取，一个是按<br>列读取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line"># 按行获取值</span><br><span class="line">for i in sheet.iter_rows(min_row=2, max_row=5, min_col=1, max_col=2): #按行读取</span><br><span class="line">  for j in i: </span><br><span class="line">    print(j.value)</span><br><span class="line"># 按列获取值</span><br><span class="line">for i in sheet.iter_cols(min_row=2, max_row=5, min_col=1, max_col=2): #按列读取</span><br><span class="line">  for j in i: </span><br><span class="line">    print(j.value)</span><br><span class="line">for i in sheet.rows: #获取所有行</span><br><span class="line">  print(i)</span><br></pre></td></tr></table></figure>
<h3 id="修改表格中的内容-向某个格子中写入内容并保存"><a href="#修改表格中的内容-向某个格子中写入内容并保存" class="headerlink" title="修改表格中的内容: 向某个格子中写入内容并保存"></a>修改表格中的内容: 向某个格子中写入内容并保存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet)</span><br><span class="line">sheet[&quot;A1&quot;] = &quot;哈喽&quot; </span><br><span class="line"># 这句代码也可以改为 cell = sheet[&quot;A1&quot;] cell.value = &quot;哈喽&quot; </span><br><span class="line">workbook.save(filename = &quot;哈喽.xlsx&quot;) </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">注意：我们将“A1”单元格的数据改为了“哈喽”，并另存为了“哈喽.xlsx”文</span><br><span class="line">件。 如果我们保存的时候，不修改表名，相当于直接修改源文件；</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>.append()方式：会在表格已有的数据后面，按行插入数据(很有用)；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active</span><br><span class="line">print(sheet) </span><br><span class="line">data = [ </span><br><span class="line">[&quot;唐僧&quot;,&quot;男&quot;,&quot;180cm&quot;], </span><br><span class="line">[&quot;孙悟空&quot;,&quot;男&quot;,&quot;188cm&quot;], </span><br><span class="line">[&quot;猪八戒&quot;,&quot;男&quot;,&quot;175cm&quot;], </span><br><span class="line">[&quot;沙僧&quot;,&quot;男&quot;,&quot;176cm&quot;], </span><br><span class="line">] </span><br><span class="line">for row in data: </span><br><span class="line">  sheet.append(row) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="使用-excel-函数公式-很有用"><a href="#使用-excel-函数公式-很有用" class="headerlink" title="使用 excel 函数公式(很有用)"></a>使用 excel 函数公式(很有用)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">from openpyxl.utils import FORMULAE </span><br><span class="line">print(FORMULAE)#python 支持写哪些“excel 函数公式”</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是我们在 excel 中输入的公式</span><br><span class="line">=IF(RIGHT(C2,2)=&quot;cm&quot;,C2,SUBSTITUTE(C2,&quot;m&quot;,&quot;&quot;)*100&amp;&quot;cm&quot;) </span><br><span class="line"># 那么，在 python 中怎么插入 excel 公式呢？</span><br><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet[&quot;D1&quot;] = &quot;标准身高&quot; </span><br><span class="line">for i in range(2,16): </span><br><span class="line">  sheet[&quot;D&#123;&#125;&quot;.format(i)] = </span><br><span class="line">  &#x27;=IF(RIGHT(C&#123;&#125;,2)=&quot;cm&quot;,C&#123;&#125;,SUBSTITUTE(C&#123;&#125;,&quot;m&quot;,&quot;&quot;)*100&amp;&quot;cm&quot;)&#x27;.format(i,i,i) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="insert-cols-和-insert-rows-：插入空行和空列"><a href="#insert-cols-和-insert-rows-：插入空行和空列" class="headerlink" title=".insert_cols()和.insert_rows()：插入空行和空列"></a>.insert_cols()和.insert_rows()：插入空行和空列</h3></li>
<li><p>.insert_cols(idx=数字编号, amount=要插入的列数)，插入的位置是在 idx 列数的左侧插入；</p>
</li>
<li><p>.insert_rows(idx=数字编号, amount=要插入的行数)，插入的行数是在 idx 行数的下方插入；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet.insert_cols(idx=4,amount=2) #从第4列开始插入2列</span><br><span class="line">sheet.insert_rows(idx=5,amount=4) #第5行开始插入2行</span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="delete-rows-和-delete-cols-：删除行和列"><a href="#delete-rows-和-delete-cols-：删除行和列" class="headerlink" title=".delete_rows()和.delete_cols()：删除行和列"></a>.delete_rows()和.delete_cols()：删除行和列</h3><ul>
<li>.delete_rows(idx=数字编号, amount=要删除的行数)</li>
<li>.delete_cols(idx=数字编号, amount=要删除的列数)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active print(sheet) </span><br><span class="line"># 删除第一列，第一行</span><br><span class="line">sheet.delete_cols(idx=1) </span><br><span class="line">sheet.delete_rows(idx=1) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="move-range-：移动格子"><a href="#move-range-：移动格子" class="headerlink" title=".move_range()：移动格子"></a>.move_range()：移动格子</h3></li>
<li>.move_range(“数据区域”,rows=,cols=)：row正整数表示向下、负整数表示向上移动；cols正整数表示向右、负整数表示向左移动。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sheet.move_range(&quot;C1:D4&quot;,rows=2,cols=-1)# 向左移动两列，向下移动两行</span><br></pre></td></tr></table></figure>
<h3 id="create-sheet-：创建新的-sheet-表格"><a href="#create-sheet-：创建新的-sheet-表格" class="headerlink" title=".create_sheet()：创建新的 sheet 表格"></a>.create_sheet()：创建新的 sheet 表格</h3><ul>
<li>.create_sheet(“新的 sheet 名”)：创建一个新的 sheet 表；<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">workbook.create_sheet(&quot;我是一个新的 sheet&quot;) </span><br><span class="line">print(workbook.sheetnames) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="remove-：删除某个-sheet-表"><a href="#remove-：删除某个-sheet-表" class="headerlink" title=".remove()：删除某个 sheet 表"></a>.remove()：删除某个 sheet 表</h3><ul>
<li>.remove(“sheet 名”)：删除某个 sheet 表；<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active print(workbook.sheetnames) </span><br><span class="line"># 这个相当于激活的这个 sheet 表，激活状态下，才可以操作；</span><br><span class="line">sheet = workbook[&#x27;我是一个新的 sheet&#x27;] </span><br><span class="line">print(sheet) </span><br><span class="line">workbook.remove(sheet) </span><br><span class="line">print(workbook.sheetnames) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="copy-worksheet-：复制一个-sheet-表到另外一张-excel-表"><a href="#copy-worksheet-：复制一个-sheet-表到另外一张-excel-表" class="headerlink" title=".copy_worksheet()：复制一个 sheet 表到另外一张 excel 表"></a>.copy_worksheet()：复制一个 sheet 表到另外一张 excel 表</h3><ul>
<li>这个操作的实质，就是复制某个 excel 表中的 sheet 表，然后将文件存储到另外一张excel 表中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;a.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(&quot;a.xlsx 中有这几个 sheet 表&quot;,workbook.sheetnames) </span><br><span class="line">sheet = workbook[&#x27;姓名&#x27;] </span><br><span class="line">workbook.copy_worksheet(sheet) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="sheet-title：修改-sheet-表的名称"><a href="#sheet-title：修改-sheet-表的名称" class="headerlink" title="sheet.title：修改 sheet 表的名称"></a>sheet.title：修改 sheet 表的名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;a.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet.title = &quot;我是修改后的 sheet 名&quot; </span><br><span class="line">print(sheet)</span><br></pre></td></tr></table></figure>

<h3 id="创建新的-excel-表格文件"><a href="#创建新的-excel-表格文件" class="headerlink" title="创建新的 excel 表格文件"></a>创建新的 excel 表格文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl import Workbook </span><br><span class="line">workbook = Workbook() </span><br><span class="line">sheet = workbook.active </span><br><span class="line">sheet.title = &quot;表格 1&quot; </span><br><span class="line">workbook.save(filename = &quot;新建的 excel 表格&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="sheet-freeze-panes：冻结窗口"><a href="#sheet-freeze-panes：冻结窗口" class="headerlink" title="sheet.freeze_panes：冻结窗口"></a>sheet.freeze_panes：冻结窗口</h3><ul>
<li>.freeze_panes = “单元格”<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active print(sheet) sheet.freeze_panes = &quot;C3&quot; </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;) </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">冻结窗口以后，你可以打开源文件，进行检验；</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="sheet-auto-filter-ref：给表格添加“筛选器”"><a href="#sheet-auto-filter-ref：给表格添加“筛选器”" class="headerlink" title="sheet.auto_filter.ref：给表格添加“筛选器”"></a>sheet.auto_filter.ref：给表格添加“筛选器”</h3><ul>
<li>.auto_filter.ref = sheet.dimension 给所有字段添加筛选器；</li>
<li>.auto_filter.ref = “A1” 给 A1 这个格子添加“筛选器”，就是给第一列添加“筛选器”；<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet.auto_filter.ref = sheet[&quot;A1&quot;] </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="批量调整字体和样式"><a href="#批量调整字体和样式" class="headerlink" title="批量调整字体和样式"></a>批量调整字体和样式</h2><h3 id="1、修改字体样式"><a href="#1、修改字体样式" class="headerlink" title="1、修改字体样式"></a>1、修改字体样式</h3><ul>
<li>Font(name=字体名称,size=字体大小,bold=是否加粗,italic=是否斜体,color=字体颜色)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import Font </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell = sheet[&quot;A1&quot;] </span><br><span class="line">font = Font(name=&quot;微软雅黑&quot;,size=20,bold=True,italic=True,color=&quot;FF0000&quot;) </span><br><span class="line">cell.font = font</span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;) </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">这个 color 是 RGB 的 16 进制表示，自己下去百度学习；</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、获取表格中格子的字体样式"><a href="#2、获取表格中格子的字体样式" class="headerlink" title="2、获取表格中格子的字体样式"></a>2、获取表格中格子的字体样式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import Font </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell = sheet[&quot;A2&quot;] </span><br><span class="line">font = cell.font </span><br><span class="line">print(font.name, font.size, font.bold, font.italic, font.color)</span><br></pre></td></tr></table></figure>

<h3 id="3、设置对齐样式"><a href="#3、设置对齐样式" class="headerlink" title="3、设置对齐样式"></a>3、设置对齐样式</h3><ul>
<li><p>Alignment(horizontal=水平对齐模式,vertical=垂直对齐模式,text_rotation=旋转角<br>度,wrap_text=是否自动换行)</p>
</li>
<li><p>水平对齐：‘distributed’，‘justify’，‘center’，‘leftfill’， ‘centerContinuous’，‘right，<br>‘general’；</p>
</li>
<li><p>垂直对齐：‘bottom’，‘distributed’，‘justify’，‘center’，‘top’；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import Alignment </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell = sheet[&quot;A1&quot;]</span><br><span class="line">alignment = </span><br><span class="line">Alignment(horizontal=&quot;center&quot;,vertical=&quot;center&quot;,text_rotation=45,wrap_text=True) </span><br><span class="line">cell.alignment = alignment </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="4、设置边框样式"><a href="#4、设置边框样式" class="headerlink" title="4、设置边框样式"></a>4、设置边框样式</h3></li>
<li><p>Side(style=边线样式，color=边线颜色)</p>
</li>
<li><p>Border(left=左边线样式，right=右边线样式，top=上边线样式，bottom=下边线样式)</p>
</li>
<li><p>style 参数的种类： ‘double, ‘mediumDashDotDot’, ‘slantDashDot’, ‘dashDotDot’,’dotted’,’hair’,<br>‘mediumDashed, ‘dashed’, ‘dashDot’, ‘thin’, ‘mediumDashDot’,’medium’, ‘thick’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import Side,Border </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell = sheet[&quot;D6&quot;]</span><br><span class="line">side1 = Side(style=&quot;thin&quot;,color=&quot;FF0000&quot;) </span><br><span class="line">side2 = Side(style=&quot;thick&quot;,color=&quot;FFFF0000&quot;) </span><br><span class="line">border = Border(left=side1,right=side1,top=side2,bottom=side2) </span><br><span class="line">cell.border = border </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5、设置填充样式"><a href="#5、设置填充样式" class="headerlink" title="5、设置填充样式"></a>5、设置填充样式</h3><ul>
<li><p>PatternFill(fill_type=填充样式，fgColor=填充颜色）</p>
</li>
<li><p>GradientFill(stop=(渐变颜色 1，渐变颜色 2……))</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import PatternFill,GradientFill </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell_b9 = sheet[&quot;B9&quot;] </span><br><span class="line">pattern_fill = PatternFill(fill_type=&quot;solid&quot;,fgColor=&quot;99ccff&quot;) </span><br><span class="line">cell_b9.fill = pattern_fill </span><br><span class="line">cell_b10 = sheet[&quot;B10&quot;]</span><br><span class="line">gradient_fill = GradientFill(stop=(&quot;FFFFFF&quot;,&quot;99ccff&quot;,&quot;000000&quot;)) </span><br><span class="line">cell_b10.fill = gradient_fill </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="6、设置行高和列宽"><a href="#6、设置行高和列宽" class="headerlink" title="6、设置行高和列宽"></a>6、设置行高和列宽</h3></li>
<li><p>.row_dimensions[行编号].height = 行高</p>
</li>
<li><p>.column_dimensions[列编号].width = 列宽</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line"># 设置第 1 行的高度</span><br><span class="line">sheet.row_dimensions[1].height = 50 #将整个表的行高设置为 50</span><br><span class="line"># 设置 B 列的宽度</span><br><span class="line">sheet.column_dimensions[&quot;B&quot;].width = 20 #列宽设置为 30；</span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7、合并单元格"><a href="#7、合并单元格" class="headerlink" title="7、合并单元格"></a>7、合并单元格</h3><ul>
<li>.merge_cells(待合并的格子编号)</li>
<li>.merge_cells(start_row=起始行号，start_column=起始列号，end_row=结束行号，<br>end_column=结束列号)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;)</span><br><span class="line">sheet = workbook.active sheet.merge_cells(&quot;C1:D2&quot;) </span><br><span class="line">sheet.merge_cells(start_row=7,start_column=1,end_row=8,end_column=3) </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure>
当然，也有“取消合并单元格”，用法一致。</li>
<li>.unmerge_cells(待合并的格子编号)</li>
<li>.unmerge_cells(start_row=起始行号，start_column=起始列号，end_row=结束行号，<br>end_column=结束列号)</li>
</ul>
]]></content>
      <tags>
        <tag>python办公自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析 :pandas数据读取、预处理、筛选、计算，时间序列、透视、拼接、导出</title>
    <url>/2021/10/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%9Apandas%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E3%80%81%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%AD%9B%E9%80%89%E3%80%81%E8%AE%A1%E7%AE%97%EF%BC%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E3%80%81%E9%80%8F%E8%A7%86%E3%80%81%E6%8B%BC%E6%8E%A5%E3%80%81%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h3 id="一、Pandas数据结构"><a href="#一、Pandas数据结构" class="headerlink" title="一、Pandas数据结构"></a>一、Pandas数据结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S1=pd.Series([‘a’,’b’,’c’]) series是一组数据与一组索引（行索引）组成的数据结构</span><br><span class="line">S1=pd.Series([‘a’,’b’,’c’],index=(1,3,4)) 指定索引</span><br><span class="line">S1=pd.Series(&#123;1:‘a’,2:’b’,3:’c’&#125;) 用字典形式指定索引</span><br><span class="line">S1.index() 返回索引</span><br><span class="line">S1.values() 返回值</span><br><span class="line">Df=pd.DataFrame([‘a’,’b’,’c’]) dataframe是一组数据与两组索引（行列索引）组成的数据结构</span><br><span class="line">Df=pd.DataFrame([[a,A],[b,B],[c,C]],columns=[‘小写’,’大写’]，index=[‘一’,’二’,’三’])</span><br><span class="line">Columms 为列索引，index为行索引</span><br><span class="line">pip install -i [https://pypi.tuna.tsinghua.edu.cn/simple](https://link.zhihu.com/?target=https%3A//pypi.tuna.tsinghua.edu.cn/simple) pyspider 清华镜像</span><br></pre></td></tr></table></figure>
<ul>
<li>查找某个包 anaconda search -t conda tensorflow<br>下载某个包 anaconda show package<br>data={‘小写’:[‘a’,’b’,’c’],’大写’:[‘A’,’B’,’C’]} 传入字典<br>Df=Pd.DataFrame(data)<br>Df.index() df.columns()</li>
<li>建立分层索引的dataframe：pd.MultiIndex.from_arrays([[,,]],name=[,,]）</li>
</ul>
<h3 id="二、读取数据"><a href="#二、读取数据" class="headerlink" title="二、读取数据"></a>二、读取数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df=pd.read_excel(r’C:\user\...xlsx’,sheet_name=’sheet1’) 或</span><br><span class="line">pd.read_excel(r’C:\user\...xlsx’,sheet_name=0) 读取excel表</span><br><span class="line">pd.read_excel(r’C:\user\...xlsx’,index_col=0,header=0)</span><br><span class="line">index_col指定行索引，header指定列索引</span><br><span class="line">pd.read_excel(r’C:\user\...xlsx’,usecols=[0,1]) 导入指定列,不能有index_col和header</span><br><span class="line">pd.read_tablel(r’C:\user\...txt’，sep=’ ’) 导入txt文件,sep指定分隔符是什么</span><br><span class="line">df.head(2) 展示前两行，默认展示前5行</span><br><span class="line">df.shape 显示数据几行几列，不包含行和列索引</span><br><span class="line">df.info()可查看表中数据的类型</span><br><span class="line">df.describe() 可获得表中数值类型指端的分布值（和、平均值、方差等）</span><br></pre></td></tr></table></figure>
<h3 id="三、数据预处理"><a href="#三、数据预处理" class="headerlink" title="三、数据预处理"></a>三、数据预处理</h3><ul>
<li><p>多个Series合并成DataFrame：pd.DataFrame(list(zip(series_1, series_2)))</p>
</li>
<li><p>python在字符串前面加0：str(1).zfill(2)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.info() 可显示表中哪个数据为空</span><br><span class="line">df.isnull() 方法可以判断哪个值是缺失值，如果缺失返回True，否则为False</span><br><span class="line">df.dropna() 默认删除含缺失值的行</span><br><span class="line">df.dropna(how=’all’) 删除全为空值的行，不全为空值的行不会删除</span><br><span class="line">df.fillna(0) 用0填充所有空值</span><br><span class="line">df.fillna(&#123;‘性别’:’男’,’年龄’:’30’&#125;) 对性别列中空值填充男，年龄填充30</span><br></pre></td></tr></table></figure></li>
<li><p>通过随机选择非缺失值来填充缺失值<br>foo[‘A’].apply(lambda x: np.random.choice(<br>[x for x in range(min(foo[‘A’]),max(foo[‘A’])]) if (np.isnan(x)) else x)</p>
</li>
<li><p>按一列数据填充另一列数据中的缺失值<br>df_real[‘净含量’] = df_real[‘净含量’].fillna(df_real[‘净含量_y’])</p>
</li>
<li><p>df1.combine_first(df2)：将df2的非缺失值填充df1中的缺失（dataframe根据列名和索引）值；<br>ser1.combine_first(ser2)：用ser2的非缺失值填充ser1中的缺失值（series根据索引）</p>
</li>
<li><p>按指定的字符合并多列：df[‘A’].str.cat([df[‘B’], df[‘C’]], sep=’-‘)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.drop_duplicates(inplace=True) 默认对所有值进行重复值检查，保留第一行的值，inplace=True表示直接在原来的DataFrame上删除重复项，而默认值False表示生成一个副本。</span><br><span class="line">df.drop_duplicates(subset=’性别’) 对性别列中重复值查询保留第一行</span><br><span class="line">df.drop_duplicates(subset=[’性别’,’公司’]，keep=’last’) 对性别和公司两列查重</span><br><span class="line">keep设置默认为first（保留第一个），可设置为last（保留最后一个） 或False(都不保留)</span><br><span class="line">df[‘ID’].dtype 查看ID列的数据类型</span><br><span class="line">df[‘ID’].astype(‘float’) 将ID列的数据类型转换为float类型</span><br><span class="line">数据类型：int、float、object、string、unicode、datetime</span><br><span class="line">df[‘ID’][1] ID列的第二个数据</span><br><span class="line">df.columns=[‘大写’,’小写’,’中文’] 为无索引表添加列索引</span><br><span class="line">df.index=[1,2,3] 添加行索引</span><br><span class="line">df.set_index(‘编号’) 指明要用的列作为行索列</span><br><span class="line">df.rename(index=&#123;‘订单编号’:’新订单编号’,’客户姓名’:’新客户姓名’&#125;) 对行索引进行重新命名</span><br><span class="line">df.rename(columns=&#123;1:’一’,2:’二’&#125;) 对列索引进行一次性重新命名所有列名</span><br><span class="line">如果你需要做的仅仅是将空格换成下划线，那么更好的办法是使用str.replace()方法，这是因为你都不需要输入所有的列名：</span><br><span class="line">df.columns = df.columns.str.replace(   ,  _ )</span><br><span class="line">df.reset_index() 默认将全部index转化为column,</span><br><span class="line">df.reset_index(level=0) 将0级索引转化为column</span><br><span class="line">df.reset_index(drop=True) 删除原有索引</span><br></pre></td></tr></table></figure></li>
<li><p>多列合并为一行<br>df = pd.DataFrame({‘id_part’:[‘a’,’b’,’c’,’d’], ‘pred’:[0.1,0.2,0.3,0.4], ‘pred_class’:[‘women’,’man’,’cat’,’dog’], ‘v_id’:[‘d1’,’d2’,’d3’,’d1’]})<br>df.groupby([‘v_id’]).agg({‘pred_class’: [‘, ‘.join],’pred’: lambda x: list(x),’id_part’: ‘first’}).reset_index()</p>
</li>
<li><p>字符串转换为数值<br>df = pd.DataFrame({‘列1’:[‘1.1’,’2.2’,’3.3’],’列2’:[‘4.4’,’5.5’,’6.6’],’列3’:[‘7.7’,’8.8’,’-‘]})<br>df.astype({‘列1’:’float’,’列2’:’float’}).dtypes<br>用这种方式转换第三列会出错，因为这列里包含一个代表 0 的下划线，pandas 无法自动判断这个下划线。为了解决这个问题，可以使用 to_numeric() 函数来处理第三列，让 pandas 把任意无效输入转为 NaN。<br>df = df.apply(pd.to_numeric, errors=’coerce’).fillna(0)</p>
</li>
<li><p>优化 DataFrame 对内存的占用<br>方法一：只读取切实所需的列，使用usecols参数<br>cols = [‘beer_servings’,’continent’]<br>small_drinks = pd.read_csv(‘data/drinks.csv’, usecols=cols)<br>方法二：把包含类别型数据的 object 列转换为 Category 数据类型，通过指定 dtype 参数实现。<br>dtypes ={‘continent’:’category’}<br>smaller_drinks = pd.read_csv(‘data/drinks.csv’,usecols=cols, dtype=dtypes)</p>
</li>
<li><p>把字符串分割为多列<br>df = pd.DataFrame({‘姓名’:[‘张 三’,’李 四’,’王 五’],’所在地’:[‘北京-东城区’,’上海-黄浦区’,’广州-白云区’]})<br>df.姓名.str.split(‘ ‘, expand=True)</p>
</li>
<li><p>把 Series 里的列表转换为 DataFrame<br>df = pd.DataFrame({‘列1’:[‘a’,’b’,’c’],’列2’:[[10,20], [20,30], [30,40]]})<br>df_new = df.列2.apply(pd.Series)<br>pd.concat([df,df_new], axis=’columns’)</p>
</li>
<li><p>DataFrame迭代：<br>iterrows():将DataFrame迭代为(insex, Series)对。<br>iteritems():将DataFrame迭代为(列名, Series)对。<br>itertuples(): 将DataFrame迭代为元组。<br>for row in df.itertuples():<br>  print(row)<br>  print(‘—————-‘)<br>  print(getattr(row,’col1’), getattr(row,’col2’))<br>getattr() 函数用于返回一个对象属性值。</p>
</li>
</ul>
<h3 id="四、数据选择"><a href="#四、数据选择" class="headerlink" title="四、数据选择"></a>四、数据选择</h3><ul>
<li><p>Query是pandas的过滤查询函数，使用布尔表达式来查询DataFrame的列，就是说按照列的规则进行过滤操作。<br>pandas.DataFrame.query(self, expr, inplace = False, **kwargs)<br>expr：要评估的查询字符串；<br>inplace=False：查询是应该修改数据还是返回修改后的副本<br>kwargs：dict关键字参数<br>比如要查列<code>value_1</code>&lt;<code>value_2</code>的行记录：df.query(‘value_1 &lt; value_2’)<br>查询列<code>year</code>&gt;=2016的行记录：df.query(‘year &gt;= 2016 ‘)</p>
</li>
<li><p>Insert用于在DataFrame的指定位置中插入新的数据列。默认情况下新列是添加到末尾的，但可以更改位置参数，将新列添加到任何位置。<br>Dataframe.insert(loc, column, value, allow_duplicates=False)<br>loc: int型，表示插入位置在第几列；若在第一列插入数据，则 loc=0<br>column: 给插入的列取名，如 column=’新的一列’<br>value：新列的值，数字、array、series等都可以<br>allow_duplicates: 是否允许列名重复，选择Ture表示允许新的列名与已存在的列名重复<br>在第三列的位置插入新列：df.insert(2, ‘new_col’, new_col)</p>
</li>
<li><p>Cumsum是pandas的累加函数，用来求列的累加值。 用法：<br>DataFrame.cumsum(axis=None, skipna=True, args, kwargs)<br>axis：index或者轴的名字<br>skipna：排除NA/null值<br>df中的group列有A、B、C三组，year列有多个年份。我们只知道当年度的值value_1、value_2，现在求group分组下的累计值，比如A、2014之前的累计值，可以用cumsum函数来实现。<br>当然仅用cumsum函数没办法对groups (A, B, C)进行区分，所以需要结合分组函数groupby分别对(A, B, C)进行值的累加。<br>df[‘cumsum_2’] = df[[‘value_2’,’group’]].groupby(‘group’).cumsum()</p>
</li>
<li><p>Sample用于从DataFrame中随机选取若干个行或列。 用法：<br>DataFrame.sample(n=None, frac=None, replace=False, weights=None, random_state=None, axis=None)<br>n：要抽取的行数<br>frac：抽取行的比例 例如frac=0.8，就是抽取其中80%<br>replace：是否为有放回抽样， True:有放回抽样 False:未放回抽样<br>weights：字符索引或概率数组<br>random_state ：随机数发生器种子<br>axis：选择抽取数据的行还是列 axis=0:抽取行 axis=1:抽取列<br>从df中随机抽取5行：df.sample(n=5)<br>从df随机抽取60%的行，并且设置随机数种子，每次能抽取到一样的样本：df.sample(frac=0.6,random_state=2)</p>
</li>
<li><p>Where用来根据条件替换行或列中的值。如果满足条件，保持原来的值，不满足条件则替换为其他值。默认替换为NaN，也可以指定特殊值。<br>DataFrame.where(cond, other=nan, inplace=False, axis=None, level=None, errors=’raise’, try_cast=False, raise_on_error=None)<br>cond：布尔条件，如果 cond 为真，保持原来的值，否则替换为other<br>other：替换的特殊值<br>inplace：inplace为真则在原数据上操作，为False则在原数据的copy上操作<br>axis：行或列<br>将df中列value_1里小于5的值替换为0：df[‘value_1’].where(df[‘value_1’] &gt; 5 , 0)</p>
</li>
<li><p>得到DataFrame中重复的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data=&#123;&#x27;one&#x27;:[1,1,2,2,1,2,2],&#x27;two&#x27;:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]&#125;</span><br><span class="line">frame=pd.DataFrame(data)</span><br><span class="line">print(&quot;原始数据&quot;)</span><br><span class="line">print(frame)</span><br><span class="line">data1 = frame.drop_duplicates(subset=[&#x27;two&#x27;],keep=&#x27;first&#x27;)</span><br><span class="line">print(&quot;去重后的数据&quot;)</span><br><span class="line">print(data1)</span><br><span class="line">a = frame.drop_duplicates(subset=[&#x27;two&#x27;],keep=&#x27;last&#x27;)</span><br><span class="line">b = frame.drop_duplicates(subset=[&#x27;two&#x27;],keep=False)</span><br><span class="line">c=a.append(b).drop_duplicates(subset=[&#x27;two&#x27;],keep=False)</span><br><span class="line">print(&quot;重复的数据&quot;)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li>
<li><p>索引切片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[[‘ID’,’姓名’]] 多个列名要装入list</span><br><span class="line">df.iloc[[1,3],[2,4]] 用行列编号选择数据</span><br><span class="line">df.iloc[1,1] 选取表中的第3行2列数据，第一行默认为列索引</span><br><span class="line">df.iloc[:,0:4] #获取第1列到第4列的值</span><br><span class="line">df.loc[‘一’] #loc用行名选取的行数据，格式是Series，但可以用列表形式访问</span><br><span class="line">df.loc[‘一’][0] 或 df.loc[‘一’][‘序号’]</span><br><span class="line">df.iloc[1]#iloc用行编号选取行数据</span><br><span class="line">df.iloc[[1,3]]#多行编号选取行数据，要用list封装，不然变成行列选取</span><br><span class="line">df.iloc[1:3]#选择第二行和第四行</span><br><span class="line">df[df[‘年龄’]&lt;45] #加判断条件返回符合条件的全部数据，不局限年龄列</span><br><span class="line">df[(df[‘年龄’]&lt;45)&amp;(df[‘ID’]&lt;4)] #判断多条件选择数据</span><br><span class="line">df.iloc[[1,3],[2,4]] 相当于df.loc[[‘一’,’二’],[‘年龄’,’ID’]] #loc是名，iloc是编号</span><br><span class="line">df[df[‘年龄’]&lt;45][[‘年龄’,’ID’]]#先通过年龄条件选择行，再通过不同索引指定列</span><br><span class="line">df.iloc[1:3,2:4]#切片索引</span><br></pre></td></tr></table></figure></li>
<li><p>行序、列序反转 ：行序反转最直接的办法是使用loc函数并传递::-1，跟Python中列表反转时使用的切片符号一致<br>df.loc[::-1].reset_index(drop=True)<br>列序反转就比较容易了，只需要如下操作：df.loc[:, ::-1]</p>
</li>
<li><p>分组里最大值所在的行方法<br>分为分组中有重复值和无重复值两种。无重复值的情况。<br>df = pd.DataFrame({‘Sp’:[‘a’,’b’,’c’,’d’,’e’,’f’], ‘Mt’:[‘s1’, ‘s1’, ‘s2’,’s2’,’s2’,’s3’], ‘Value’:[1,2,3,4,5,6], ‘Count’:[3,2,5,10,10,6]})<br>df.iloc[df.groupby([‘Mt’]).apply(lambda x: x[‘Count’].idxmax())]<br>先按Mt列进行分组，然后对分组之后的数据框使用idxmax函数取出Count最大值所在的列，再用iloc位置索引将行取出。有重复值的情况<br>df[“rank”] = df.groupby(“ID”)[“score”].rank(method=”min”, ascending=False).astype(np.int64)<br>df[df[“rank”] == 1][[“ID”, “class”]]<br>对ID进行分组之后再对分数应用rank函数，分数相同的情况会赋予相同的排名，然后取出排名为1的数据。</p>
</li>
<li><p>选择特定类型的列<br>drinks = pd.read_csv(‘data/drinks.csv’)<br>选择所有数值型的列<br>drinks.select_dtypes(include=[‘number’]).head()<br>选择所有字符型的列<br>drinks.select_dtypes(include=[‘object’]).head()<br>drinks.select_dtypes(include=[‘number’,’object’,’category’,’datetime’]).head()<br>用 exclude 关键字排除指定的数据类型<br>drinks.select_dtypes(exclude=[‘number’]).head()</p>
</li>
<li><p>根据最大的类别筛选 DataFrame<br>movies = pd.read_csv(‘data/imdb_1000.csv’)<br>counts = movies.genre.value_counts()<br>movies[movies.genre.isin(counts.nlargest(3).index)].head()</p>
</li>
<li><p>基于字符串的长度来筛选数据<br>df[df.col1.str.len() &gt; 20].head()</p>
</li>
<li><p>标注重点<br>df_new.style.highlight_max(axis = 0, color = “yellow”)</p>
</li>
</ul>
<h3 id="五、数值操作"><a href="#五、数值操作" class="headerlink" title="五、数值操作"></a>五、数值操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[‘年龄’].replace(100,33)#对年龄列中的100替换成33</span><br><span class="line">df.replace(np.NaN,0)#相当于fillna(),其中np.NaN是python中缺省值的表示方式</span><br><span class="line">df.replace([A,B],C)#多对一替换，A、B替换成C</span><br><span class="line">df.replace(&#123;‘A’:’a’,‘B’:’b’,‘C’:’c’&#125;)#多对多替换</span><br><span class="line">df.sort_values(by=[&#x27;申请单编号&#x27;],ascending=False)#申请单编号列降序排列，Ture升序排列（默认）</span><br><span class="line">df.sort_values(by=[&#x27;申请单编号&#x27;],na_position=’first’)#申请单编号列升序排列，缺失值排在第一位</span><br><span class="line">默认缺失值在最后一位last</span><br><span class="line">df = pd.DataFrame([[&#x27;A&#x27;,1],[&#x27;A&#x27;,3],[&#x27;A&#x27;,2],[&#x27;B&#x27;,5],[&#x27;B&#x27;,9]], columns = [&#x27;name&#x27;,&#x27;score&#x27;])</span><br><span class="line">df.sort_values([&#x27;name&#x27;,&#x27;score&#x27;], ascending = [True,False])#多列排序</span><br><span class="line">df.groupby(&#x27;name&#x27;).apply(lambda x: x.sort_values(&#x27;score&#x27;,ascending=False)).reset_index(drop=True)</span><br></pre></td></tr></table></figure>
<ul>
<li>Pct_change是一个统计函数，用于表示当前元素与前面元素的相差百分比，两元素的区间可以调整。<br>比如说给定三个元素[2,3,6]，计算相差百分比后得到[NaN, 0.5, 1.0]，从第一个元素到第二个元素增加50％，从第二个元素到第三个元素增加100％。<br>DataFrame.pct_change(periods=1, fill_method=‘pad’, limit=None, freq=None, **kwargs)<br>periods：间隔区间，即步长<br>fill_method：处理空值的方法<br>对df的value_1列进行增长率的计算：df.value_1.pct_change()</li>
</ul>
<ul>
<li> pandas 进行组内排序、单组排序、标号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[‘销量’].rank(method=’first’)#销量排名（不是排序），method有first\min\max\average</span><br><span class="line">组内进行排序(按user_id分组后对product_id排序)</span><br><span class="line">data1[&#x27;group_sort&#x27;]=data1[&#x27;product_id&#x27;].groupby(data1[&#x27;user_id&#x27;]).rank(ascending=1,method=&#x27;first&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.drop([‘销量’,’ID’],axis=1)#删除列,直接是列名,inpace=True是保留修改哦</span><br><span class="line">df.drop(df.columns[[4,5]],axis=1)#删除列,是编号</span><br><span class="line">df.drop(colums=[‘销量’,’ID’])#此种方式删除列，可以不写axis=1</span><br><span class="line">df.drop([‘a’,’b’],axis=0)#删除行,直接是列名</span><br><span class="line">df.drop(df.index[[4,5]],axis=0)#删除行,是编号</span><br><span class="line">df.drop(index=[‘a’,’b’])#此种方式删除行，可以不写axis=0</span><br><span class="line">df[‘ID’].value_counts()#对ID列中数据出现的次数进行统计</span><br><span class="line">df[‘ID’].value_counts(normalize=Ture,sort=False)#对ID列中数据出现的次数占比进行统计，并降序排序</span><br><span class="line">df[‘ID’].unique()#获取列的唯一值</span><br><span class="line">df[‘年龄’].isin([‘a’,11])#查看这列中是否包含a或11</span><br><span class="line">pd.cut(df[‘ID’],bins=[0,3,6,10])#用bins指明切分区间</span><br><span class="line">pd.qcut(df[‘ID’],3)#ID列切分成3个部分，每部分数据个数尽量一致</span><br><span class="line">df.insert(2,’商品’,[‘书’,’笔’,’计算器’])#插入第三列</span><br><span class="line">df[’商品’]=[‘书’,’笔’,’计算器’])#插新列，在表的最后面</span><br><span class="line">df.T行列互换</span><br><span class="line">df.tack()#把表格型数据转化成树形数据</span><br><span class="line">df.set_index([‘ID’,’姓名’]).stack().reset_index()#宽表转换成长表，先将共同列设置成行索引，再对其他列</span><br><span class="line">进行转化成树形数据，再重置行索引</span><br></pre></td></tr></table></figure>
<ul>
<li><p>堆叠：pd.DataFrame.stack(self, level=-1, dropna=True)，level默认为-1是将最内层col堆叠为索引的最内层，为0是将最外层col堆叠为索引的最内层，从最外层开始依次的level值为0，1，2…的顺序来指定对应col。当然直接指定索引名称或许是更好的选择。</p>
</li>
<li><p>反堆叠、拆堆：pd.DataFrame.unstack(self, level=-1, fill_value=None)，默认将最内层的索引拆堆到列的最内层，其他同理stack()；</p>
</li>
<li><p>df.melt(id_vars=[‘ID’,’姓名’],var_name=’year’,value_name=’sale’)<br>id_var参数指明宽表转换成长表时保持不变的列，var_name参数表示原来的列索引转化为行索引对应的列名，value_name表示新索引对应值的列名<br>df[‘C1’].apply(lambda x:x+1)#相当于map(),只是需要和lambda配合<br>df.applymap(lambda x:x+1),对表中的所有数据执行相同函数运算</p>
</li>
<li><p>apply搭配匿名函数lambda的神奇用法：<br>df[‘数据3’] = df.apply(lambda x:(x.数据1-x.数据2)/x.上月 if x.col3!=0 else 0 ,axis=1)</p>
</li>
<li><p>删除包含特定字符串所在的<br>行：df[‘b’].values.astype(‘str’) 先转为字符串格式最好；<br>df[df[‘b’].str.contains(‘exp’,na=False)]</p>
</li>
<li><p>计算变量缺失率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def missing_cal(df):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    df :数据集</span><br><span class="line">    return：每个变量的缺失率</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    missing_series = df.isnull().sum()/df.shape[0]</span><br><span class="line">    missing_df = pd.DataFrame(missing_series).reset_index()</span><br><span class="line">    missing_df = missing_df.rename(columns=&#123;&#x27;index&#x27;:&#x27;col&#x27;,</span><br><span class="line">    0:&#x27;missing_pct&#x27;&#125;)</span><br><span class="line">    missing_df = 	missing_df.sort_values(&#x27;missing_pct&#x27;,ascending=False).reset_index(drop=True)</span><br><span class="line">    return missing_df</span><br><span class="line">missing_cal(df)</span><br><span class="line">如果需要计算样本的缺失率分布，只要加上参数axis=1。</span><br></pre></td></tr></table></figure>
<h3 id="六、数据运算"><a href="#六、数据运算" class="headerlink" title="六、数据运算"></a>六、数据运算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[‘ID’]+Df[‘ID’]#可进行加减乘除</span><br><span class="line">df[‘ID’]&gt;Df[‘ID’]#可进行&gt; &lt; == !=等比较运算</span><br><span class="line">df.nunique()#统计每列不重复值的个数</span><br><span class="line">df.count()#统计每列的非空值的个数</span><br><span class="line">df.count(axis=1)#统计每行的非空值的个数</span><br><span class="line">df[‘ID’].count()#统计指定列的非空值的个数</span><br><span class="line">df.sum(axis=1)#每列/行求和结果</span><br><span class="line">df.mean(axis=1)#每列/行求均值</span><br><span class="line">df.max(axis=1)#每列/行求最大值</span><br><span class="line">df.min(axis=1)#每列/行求最小值</span><br><span class="line">df.median(axis=1)#每列/行求中间值</span><br><span class="line">df.mode(axis=1)#每列/行中出现最多的值</span><br><span class="line">df.var(axis=1)#每列/行求方差</span><br><span class="line">df.std(axis=1)#每列/行求标准差</span><br><span class="line">df.quantile(0.25)#求1/4分位数，可以0.5、0.75等分位数</span><br><span class="line">df.corr()#求整个DataFrame表中的相关性</span><br></pre></td></tr></table></figure>
<h3 id="七、时间序列"><a href="#七、时间序列" class="headerlink" title="七、时间序列"></a>七、时间序列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">datatime.now()#返回现在的时间年月日时分秒</span><br><span class="line">datatime.now().year#返回年，可以.month\.day</span><br><span class="line">datatime.now().weekday()-1#返回周几</span><br><span class="line">datatime.now().isocalendar()#返回周数</span><br><span class="line">（2018，41，7）#2018年的第41周第7天</span><br><span class="line">datatime.now().date()#只返回年月日</span><br><span class="line">datatime.now().time()#只返回时间</span><br><span class="line">datatime.now().strftime(‘%Y-%m-%d %H:%M:%S’)#返回2020-03-13 09:09:12</span><br><span class="line">pd.to_datetime([&#x27;201221&#x27;],format = &quot;%Y%m%d&quot;)#返回DatetimeIndex([&#x27;2012-02-01&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=None)</span><br><span class="line">pd.to_datetime(&#x27;201221&#x27;,format = &quot;%Y%m%d&quot;)#不加列表，返回Timestamp(&#x27;2012-02-01 00:00:00&#x27;)，需要省去时分秒可以在后面加.strftime(&quot;%Y-%m-%d&quot;)</span><br><span class="line">from dateutil.parser import parse</span><br><span class="line">parse(str_time)#将字符串的时间转化成为时间格式</span><br><span class="line">pd.Datetimeindex([‘2020-02-03’,2020-03-05’])#设置时间索引</span><br><span class="line">data[‘2018’]#获取2018年的数据</span><br><span class="line">data[‘2018-01’]#获取2018年1月的数据</span><br><span class="line">data[‘2018-01-05’:‘2018-01-15’]#获取这个时段的数据</span><br><span class="line">非时间索引的表格处理</span><br><span class="line">df[df[‘成交时间’]==datetime(2018,08,05)]</span><br><span class="line">df[df[‘成交时间’]&gt;datetime(2018,08,05)]</span><br><span class="line">df[(df[‘成交时间’]&gt;datetime(2018,08,05))&amp;(df[‘成交时间’] &lt;datetime(2018,08,15))]</span><br><span class="line">cha=datatime(2018,5,21,19,50)-datatime(2018,5,18,17,50)</span><br><span class="line">cha.days#返回天的时间差</span><br><span class="line">cha.seconds#返回秒的时间差</span><br><span class="line">cha.seconds/3600#返回小时的时间差</span><br><span class="line">datatime(2018,5,21,19,50)+timedelta(days=1)#往后移一天</span><br><span class="line">datatime(2018,5,21,19,50)+timedelta(seconds=20)#往后移20秒</span><br><span class="line">datatime(2018,5,21,19,50)-timedelta(days=1)#往前移一天</span><br></pre></td></tr></table></figure>
<p>日期时间类型接口一览表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = generate_sample_data_datetime().reset_index()</span><br><span class="line">df = df.sample(500)</span><br><span class="line">df[&quot;Year&quot;] = df[&quot;index&quot;].dt.year</span><br><span class="line">df[&quot;Month&quot;] = df[&quot;index&quot;].dt.month</span><br><span class="line">df[&quot;Day&quot;] = df[&quot;index&quot;].dt.day</span><br><span class="line">df[&quot;Hour&quot;] = df[&quot;index&quot;].dt.hour</span><br><span class="line">df[&quot;Minute&quot;] = df[&quot;index&quot;].dt.minute</span><br><span class="line">df[&quot;Second&quot;] = df[&quot;index&quot;].dt.second</span><br><span class="line">df[&quot;Nanosecond&quot;] = df[&quot;index&quot;].dt.nanosecond</span><br><span class="line">df[&quot;Date&quot;] = df[&quot;index&quot;].dt.date</span><br><span class="line">df[&quot;Time&quot;] = df[&quot;index&quot;].dt.time</span><br><span class="line">df[&quot;Time_Time_Zone&quot;] = df[&quot;index&quot;].dt.timetz</span><br><span class="line">df[&quot;Day_Of_Year&quot;] = df[&quot;index&quot;].dt.dayofyear</span><br><span class="line">df[&quot;Week_Of_Year&quot;] = df[&quot;index&quot;].dt.weekofyear</span><br><span class="line">df[&quot;Week&quot;] = df[&quot;index&quot;].dt.week</span><br><span class="line">df[&quot;Day_Of_week&quot;] = df[&quot;index&quot;].dt.dayofweek</span><br><span class="line">df[&quot;Week_Day&quot;] = df[&quot;index&quot;].dt.weekday</span><br><span class="line">df[&quot;Week_Day_Name&quot;] = df[&quot;index&quot;].dt.weekday_name</span><br><span class="line">df[&quot;Quarter&quot;] = df[&quot;index&quot;].dt.quarter</span><br><span class="line">df[&quot;Days_In_Month&quot;] = df[&quot;index&quot;].dt.days_in_month</span><br><span class="line">df[&quot;Is_Month_Start&quot;] = df[&quot;index&quot;].dt.is_month_start</span><br><span class="line">df[&quot;Is_Month_End&quot;] = df[&quot;index&quot;].dt.is_month_end</span><br><span class="line">df[&quot;Is_Quarter_Start&quot;] = df[&quot;index&quot;].dt.is_quarter_start</span><br><span class="line">df[&quot;Is_Quarter_End&quot;] = df[&quot;index&quot;].dt.is_quarter_end</span><br><span class="line">df[&quot;Is_Leap_Year&quot;] = df[&quot;index&quot;].dt.is_leap_year</span><br></pre></td></tr></table></figure>
<h3 id="八、数据透视表"><a href="#八、数据透视表" class="headerlink" title="八、数据透视表"></a>八、数据透视表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.groupby(‘客户分类’).count()#客户分类后求数运算</span><br><span class="line">df.groupby(‘客户分类’).sum()#客户分类后求和运算</span><br><span class="line">df.groupby(‘客户分类’,’区域分类’).sum()#多列分类后求和运算</span><br><span class="line">df.groupby(‘客户分类’,’区域分类’)[‘ID’].sum()#多列分类后ID求和运算</span><br><span class="line">df[‘ID’]#DataFrame取出一列就是Series类型</span><br><span class="line">df.groupby(df[‘ID’]).sum（） 相当于 df.groupby(‘ID’).sum（）</span><br><span class="line">df.groupby(‘客户分类’).aggregate([‘sum’,’count’]# aggregate可实现多种汇总方式</span><br><span class="line">df.groupby(‘客户分类’).aggregate(&#123;‘ID’：‘count’,’销量’： ‘sum’&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>用多个函数聚合<br>df.groupby(‘order_id’).item_price.agg([‘sum’,’count’]).head()</p>
</li>
<li><p>aggregate可针对不同列做不同的汇总运算<br>df.groupby(‘客户分类’).sum().reset_index()#分组汇总后再重置索引，变为标准DataFrame<br>pd.pivot_table(data,values,index,columms,aggfunc,fill_value,margins,dropna,margins_name)<br>数据透视表，data:数据表df,values:值，index:行索引，columns:列索引，aggfunc:values的计算类型，fill_value:对空值的填充方式；margins:是否有合计列；margins_name:合计列的列名<br>pd.pivot_table(df,values=[’ID’,‘销量’],index=’客户分类’,columms=‘区域’,aggfunc={‘ID’：‘count’,’销量’：‘sum’}),fill_value=0,margins=Ture,dropna=None,margins_name=’总计’)</p>
</li>
<li><p>分组聚合 dict(list(df.groupby(‘key1’)))<br>通过字典或Series进行分组<br>people = pd.DataFrame(np.random.randn(5, 5),columns=[‘a’, ‘b’, ‘c’, ‘d’, ‘e’],index=[‘Joe’, ‘Steve’, ‘Wes’, ‘Jim’, ‘Travis’])<br>mapping = {‘a’:’red’, ‘b’:’red’, ‘c’:’blue’, ‘d’:’blue’, ‘e’:’red’, ‘f’:’orange’}<br>by_column = people.groupby(mapping, axis=1)<br>by_column.sum()</p>
</li>
</ul>
<h3 id="九、多表格拼接"><a href="#九、多表格拼接" class="headerlink" title="九、多表格拼接"></a>九、多表格拼接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pd.merge(df1,df2)#默认自动寻找两个表中的公共列进行拼接</span><br><span class="line">pd.merge(df1,df2,on=“学号“)#on来指定连接列，连接列要是公共列</span><br><span class="line">pd.merge(df1,df2,on=[‘学号’,’姓名’]#on来指定连接列，连接列要是公共列</span><br><span class="line">pd.merge(df1,df2,left_on=‘学号’right_on=’编号’) #由公共列，但类名不同时用左右键指定 </span><br><span class="line">pd.merge(df1,df2,left_index=‘学号’right_index=’编号’)#两表公共列都是索引列时</span><br><span class="line">pd.merge(df1,df2,left_index=‘学号’right_on=’编号’)#公共列一个时索引列一个时普通列 </span><br><span class="line">pd.merge(df1,df2,on=’学号’,how=’inner’)#返回公共列中对应的公共值拼接（内连接）</span><br><span class="line">pd.merge(df1,df2,on=’学号’,how=’left’)#返回公共列中对应的左表值（左连接）</span><br><span class="line">pd.merge(df1,df2,on=’学号’,how=’right’)#返回公共列中对应的右表值（右连接）</span><br><span class="line">pd.merge(df1,df2,on=’学号’,how=’outer’)#返回公共列中对应的所有值（外连接）</span><br><span class="line">pd.concat([df1,df2])#两个结构相同的表纵向连接，保留原索引值</span><br><span class="line">pd.concat([df1,df2]，ignore_index=True)#两个结构相同的表纵向连接，重新设置索引值</span><br><span class="line">pd.concat([df1,df2]，ignore_index=True).drop_duplicates()#拼接后去掉重复值</span><br></pre></td></tr></table></figure>

<h3 id="十、导出文件"><a href="#十、导出文件" class="headerlink" title="十、导出文件"></a>十、导出文件</h3><p>df.to_excel(excel_writer=r’C:\users\zhoulifu\Desktop\测试.xlsx’,sheet_name=’文档’，index=False,columns=[‘ID’,’销量’,‘姓名’],encoding=’utf-8’,na_rep=0)</p>
<ul>
<li>excel_writer参数指定文件路径，导出时去掉索引，设置导出的列，指定文件编码，na_rep缺失值填充<br>writer=pd.ExcelWriter(excelpath,engine=’xlsxwirter’)<h3 id="导出多个文件至一个文件的多个sheet；"><a href="#导出多个文件至一个文件的多个sheet；" class="headerlink" title="导出多个文件至一个文件的多个sheet；"></a>导出多个文件至一个文件的多个sheet；</h3></li>
<li>方法1：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">writer=pd.ExcelWriter(excelpath,engine=&#x27;openpyxl&#x27;,mode=&#x27;a&#x27;)</span><br><span class="line">用openpyxl不会删除excel表中原有sheet，更保险！</span><br><span class="line">df1.to_excel(writer,sheet_name=‘表一’，index= False)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li>
<li>方法2：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(path,sheet_name=&#x27;test3&#x27;)</span><br><span class="line">#写入到原Excel表中避免清空其他数据</span><br><span class="line">book = openpyxl.load_workbook(path)   #读取你要写入的workbook</span><br><span class="line">#和pd.read_excel() 用于将Dataframe写入excel。xls用xlwt。xlsx用openpyxl</span><br><span class="line">writer = pd.ExcelWriter(path,engine=&#x27;openpyxl&#x27;)   </span><br><span class="line">##此时的writer里还只是读写器. 然后将上面读取的book复制给writer  </span><br><span class="line">writer.book = book</span><br><span class="line">#转化为字典的形式</span><br><span class="line">writer.sheets = dict((ws.title, ws) for ws in book.worksheets)#返回一个字典，sheet名和sheet对象组成的键值对</span><br><span class="line">#将data写入writer</span><br><span class="line">df.to_excel(writer,sheet_name=&quot;测试&quot;,index=False)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li>
<li>to_json<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data = df([[&#x27;a&#x27;, &#x27;b&#x27;], [&#x27;c&#x27;, &#x27;d&#x27;]], index=[&#x27;row 1&#x27;, &#x27;row 2&#x27;], columns=[&#x27;col 1&#x27;, &#x27;col 2&#x27;])</span><br><span class="line">json_columns = data.to_json(orient = &quot;columns&quot;) # 返回结果：</span><br><span class="line"> &#x27;&#123;&quot;col 1&quot;:&#123;&quot;row 1&quot;:&quot;a&quot;,&quot;row 2&quot;:&quot;c&quot;&#125;,&quot;col 2&quot;:&#123;&quot;row 1&quot;:&quot;b&quot;,&quot;row 2&quot;:&quot;d&quot;&#125;&#125;&#x27;</span><br><span class="line">json_split = data.to_json(orient = &quot;split&quot;)  # 返回结果：</span><br><span class="line"> &#x27;&#123;&quot;columns&quot;:[&quot;col 1&quot;,&quot;col 2&quot;],&quot;index&quot;:[&quot;row 1&quot;,&quot;row 2&quot;],&quot;data&quot;:[[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]]&#125;&#x27;</span><br><span class="line">json_records = data.to_json(orient = &quot;records&quot;)  # 返回结果：</span><br><span class="line"> &#x27;[&#123;&quot;col 1&quot;:&quot;a&quot;,&quot;col 2&quot;:&quot;b&quot;&#125;,&#123;&quot;col 1&quot;:&quot;c&quot;,&quot;col 2&quot;:&quot;d&quot;&#125;]&#x27;</span><br><span class="line">json_index = data.to_json(orient = &quot;index&quot;)  # 返回结果：</span><br><span class="line">&#x27;&#123;&quot;row 1&quot;:&#123;&quot;col 1&quot;:&quot;a&quot;,&quot;col 2&quot;:&quot;b&quot;&#125;,&quot;row 2&quot;:&#123;&quot;col 1&quot;:&quot;c&quot;,&quot;col 2&quot;:&quot;d&quot;&#125;&#125;&#x27;</span><br><span class="line">json_values = data.to_json(orient = &quot;values&quot;)  # 返回结果： </span><br><span class="line">&#x27;[[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]]&#x27;</span><br></pre></td></tr></table></figure>
• format()函数，与lambda函数配合，可以设置：四舍五入保留小数位、转化为百分数、添加千位分隔符等<br>保留1位小数：df[“A”].map(lambda x: format(x, ‘.1f’))<br>设置百分数，并保留2位小数：df[“A”].map(lambda x: format(x, ‘.2%’))<br>设置千位分隔，并保留3位小数：df[“A”].map(lambda x: format(x, ‘,.3f’))</li>
</ul>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据可视化：pyecharts v1版本</title>
    <url>/2021/06/05/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%9Apyecharts-v1%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p><a class="link"   href="https://github.com/ecomfe/echarts" >Echarts<i class="fas fa-external-link-alt"></i></a>是一个由百度开源的数据可视化，结合巧妙的交互性，精巧的图表设计；而 Python 是一门富有表达力的语言，很适合用于数据处理。分析遇上数据可视化时，<a class="link"   href="https://github.com/pyecharts/pyecharts" >pyecharts<i class="fas fa-external-link-alt"></i></a>诞生了。<br>个人觉得可视化最好用的，不接受反驳，毕竟用echarts的都那么多；<br>官方文档<a class="link"   href="https://pyecharts.org/#/zh-cn/intro" >https://pyecharts.org/#/zh-cn/intro<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>自己挑了一些碰到的坑记了一下，分享一些自己学习过程中发现的资源，其他看文档就够了</li>
</ul>
<h1 id="基础柱状图"><a href="#基础柱状图" class="headerlink" title="基础柱状图"></a>基础柱状图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pyecharts import options as opts</span><br><span class="line">from pyecharts.charts import Bar</span><br><span class="line">from pyecharts.faker import Faker</span><br><span class="line">c = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis(Faker.choose())</span><br><span class="line">    .add_yaxis(&quot;商家A&quot;, Faker.values())#gap=&quot;0%&quot;；category_gap=&quot;80%&quot;；stack=&quot;stack1&quot;</span><br><span class="line">    .add_yaxis(&quot;商家B&quot;, Faker.values())#gap=&quot;0%&quot;；is_selected=False；stack=&quot;stack1&quot;；label_opts=opts.LabelOpts(is_show=False)</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Bar-基本示例&quot;, subtitle=&quot;我是副标题&quot;))</span><br><span class="line">                     # datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_=&quot;inside&quot;)],#时间轴显示并可同通过鼠标滑动</span><br><span class="line">    .set_series_opts(</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=False),</span><br><span class="line">        markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">            data=[</span><br><span class="line">                opts.MarkPointItem(type_=&quot;max&quot;, name=&quot;最大值&quot;),</span><br><span class="line">                opts.MarkPointItem(type_=&quot;min&quot;, name=&quot;最小值&quot;),</span><br><span class="line">#                 opts.MarkPointItem(type_=&quot;average&quot;, name=&quot;平均值&quot;),</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">        markline_opts= opts.MarkLineOpts(data = [opts.MarkLineItem(type_ = &quot;average&quot;,name = &quot;平均值&quot;)])</span><br><span class="line">    )</span><br><span class="line">    .render_notebook()</span><br><span class="line">)</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/6460608-c318cf13b19d947a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                     
                ></p>
<ul>
<li><p>只能通过滑动水平轴缩放x轴：只传入datazoom_opts=[opts.DataZoomOpts()]；省略掉 opts.DataZoomOpts(), 删除水平轴，就只能通过鼠标拖动；</p>
</li>
<li><p>显示水平轴的比例（默认）：<br>opts.DataZoomOpts(range_start=20,range_end=80)</p>
</li>
<li><p>取消柱子上方数据显示：<br>label_opts=opts.LabelOpts(is_show=False)</p>
</li>
<li><p>添加y轴水平轴：<br>datazoom_opts=opts.DataZoomOpts(orient=”vertical”)，可缩放大小；</p>
</li>
<li><p>柱间距离：<br>加入参数gap=”0%”(两个add_yaxis里面都要传)；<br>加入参数category_gap=”80%”，表示单系柱间距离；</p>
</li>
<li><p>默认取消显示某 Series：<br>加入参数is_selected=False，默认取消显示某 Series</p>
</li>
<li><p>堆叠数据：传入stack=”stack1”，希望哪几个指标堆叠就传那几个add_yaxis中；</p>
</li>
<li><p>显示ToolBox：在set_global_opts()中传入        toolbox_opts=opts.ToolboxOpts(), brush_opts=opts.BrushOpts(),；</p>
</li>
<li><p>XY轴名称：在set_globel_opts()中加入 yaxis_opts=opts.AxisOpts(name=”我是 Y  轴”),xaxis_opts=opts.AxisOpts(name=”我是 X 轴”),  ；</p>
</li>
<li><p>Y轴数据单位：在set_globel_opts()中加入 yaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(formatter=”{value} /月”)),  ；</p>
</li>
<li><p>加入标记线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    .set_global_opts()</span><br><span class="line">    .set_series_opts(</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=False),</span><br><span class="line">        markline_opts=opts.MarkLineOpts(</span><br><span class="line">            data=[opts.MarkLineItem(y=50, name=&quot;yAxis=50&quot;)]</span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">#set_global_opts()后加入set_series_opts，加入标记线，这里是y=50；</span><br></pre></td></tr></table></figure></li>
<li><p>加入标记值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set_series_opts中加入，表示传入标记，最大、最小、平均值。</span><br><span class="line">        markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">            data=[</span><br><span class="line">                opts.MarkPointItem(type_=&quot;max&quot;, name=&quot;最大值&quot;),</span><br><span class="line">                opts.MarkPointItem(type_=&quot;min&quot;, name=&quot;最小值&quot;),</span><br><span class="line">                opts.MarkPointItem(type_=&quot;average&quot;, name=&quot;平均值&quot;),</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure></li>
<li><p>xy轴互换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置完add_yaxis后接着</span><br><span class="line">    .reversal_axis()#xy轴互换</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(position=&quot;right&quot;))#显示数据在柱子右边</span><br></pre></td></tr></table></figure></li>
<li><p>x轴名字标签过长，旋转角度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在set_global_opts（）中传入</span><br><span class="line">xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=-15)),</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="pyecharts画地理图-geo-map"><a href="#pyecharts画地理图-geo-map" class="headerlink" title="pyecharts画地理图-geo,map"></a>pyecharts画地理图-geo,map</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_geo(city, city_value):</span><br><span class="line">    c = (</span><br><span class="line">        Geo(init_opts=opts.InitOpts(theme=ThemeType.DARK,chart_id=1))</span><br><span class="line">            .add_schema(maptype=&quot;china&quot;)</span><br><span class="line">            .add(&quot;geo&quot;, [list(z) for z in zip(city, city_value)])</span><br><span class="line">            .set_series_opts(label_opts=opts.LabelOpts(is_show=False))</span><br><span class="line">            .set_global_opts(</span><br><span class="line">            visualmap_opts=opts.VisualMapOpts(), title_opts=opts.TitleOpts(title=&quot;用户城市分布&quot;)</span><br><span class="line">        )  # .render(&quot;geo_base.html&quot;)</span><br><span class="line">    )</span><br><span class="line">    return c</span><br></pre></td></tr></table></figure>
<p>is_piecewise参数：在 set_global_opts()中的visualmap_opts=opts.VisualMapOpts(is_piecewise=True),表示分段显示；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_map(province, num):</span><br><span class="line">    c = (</span><br><span class="line">        Map(init_opts=opts.InitOpts(theme=ThemeType.DARK,chart_id=2))</span><br><span class="line">            .add(&quot;map&quot;, [list(z) for z in zip(province, num)], &quot;china&quot;)</span><br><span class="line">            .set_series_opts(label_opts=opts.LabelOpts(is_show=False))</span><br><span class="line">            .set_global_opts(visualmap_opts=opts.VisualMapOpts(), title_opts=opts.TitleOpts(title=&quot;用户省份分布&quot;))</span><br><span class="line">    )  # .render(&quot;map_base.html&quot;)</span><br><span class="line">    return c</span><br></pre></td></tr></table></figure>
<h1 id="pyecharts画内层嵌套饼图"><a href="#pyecharts画内层嵌套饼图" class="headerlink" title="pyecharts画内层嵌套饼图"></a>pyecharts画内层嵌套饼图</h1><h1 id="pie"><a href="#pie" class="headerlink" title="pie"></a>pie</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c = (</span><br><span class="line">    Pie()</span><br><span class="line">    .add(&quot;&quot;, [list(z) for z in zip(Faker.choose(), Faker.values())])#center=[&quot;35%&quot;, &quot;50%&quot;],</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Pie-基本示例&quot;))#legend_opts=opts.LegendOpts(pos_left=&quot;15%&quot;),</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(formatter=&quot;&#123;b&#125;: &#123;c&#125;&quot;))</span><br><span class="line">#     .render(&quot;pie_base.html&quot;)</span><br><span class="line">)</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/6460608-109a65be286830ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                     
                ></p>
<h1 id="nested-pies"><a href="#nested-pies" class="headerlink" title="nested_pies"></a>nested_pies</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inner_x_data = [&quot;直达&quot;, &quot;营销广告&quot;, &quot;搜索引擎&quot;]</span><br><span class="line">inner_y_data = [335, 679, 1548]</span><br><span class="line">inner_data_pair = [list(z) for z in zip(inner_x_data, inner_y_data)]</span><br><span class="line"></span><br><span class="line">outer_x_data = [&quot;直达&quot;, &quot;营销广告&quot;, &quot;搜索引擎&quot;, &quot;邮件营销&quot;, &quot;联盟广告&quot;, &quot;视频广告&quot;, &quot;百度&quot;, &quot;谷歌&quot;]</span><br><span class="line">outer_y_data = [335, 310, 234, 135, 1048, 251, 147, 102]</span><br><span class="line">outer_data_pair = [list(z) for z in zip(outer_x_data, outer_y_data)]</span><br><span class="line">(</span><br><span class="line">    Pie(init_opts=opts.InitOpts())#theme=ThemeType.DARK 指定主题为黑色</span><br><span class="line">    .add(</span><br><span class="line">        series_name=&quot;访问来源&quot;,</span><br><span class="line">        data_pair=inner_data_pair,#指定数据源</span><br><span class="line">        radius=[0, &quot;30%&quot;],#半径 </span><br><span class="line">        label_opts=opts.LabelOpts(position=&quot;inner&quot;),#图形位置</span><br><span class="line">    )</span><br><span class="line">    .add(</span><br><span class="line">        series_name=&quot;访问来源&quot;,</span><br><span class="line">        radius=[&quot;40%&quot;, &quot;55%&quot;],</span><br><span class="line">        data_pair=outer_data_pair,</span><br><span class="line">        label_opts=opts.LabelOpts(</span><br><span class="line">            position=&quot;outside&quot;,</span><br><span class="line">            formatter=&quot;&#123;a|&#123;a&#125;&#125;&#123;abg|&#125;\n&#123;hr|&#125;\n &#123;b|&#123;b&#125;: &#125;&#123;c&#125; &#123;per|&#123;d&#125;%&#125;  &quot;,#&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot; 文本样式</span><br><span class="line">            background_color=&quot;#eee&quot;,  #背景颜色</span><br><span class="line">            border_color=&quot;#aaa&quot;,  #边框颜色</span><br><span class="line">            border_width=1,   #边框宽度</span><br><span class="line">            border_radius=4,  #边界半径</span><br><span class="line">            rich=&#123;</span><br><span class="line">                &quot;a&quot;: &#123;&quot;color&quot;: &quot;#999&quot;, &quot;lineHeight&quot;: 22, &quot;align&quot;: &quot;center&quot;&#125;,</span><br><span class="line">                &quot;abg&quot;: &#123;</span><br><span class="line">                    &quot;backgroundColor&quot;: &quot;#e3e3e3&quot;,</span><br><span class="line">                    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">                    &quot;align&quot;: &quot;right&quot;,</span><br><span class="line">                    &quot;height&quot;: 22,</span><br><span class="line">                    &quot;borderRadius&quot;: [4, 4, 0, 0],</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;hr&quot;: &#123;</span><br><span class="line">                    &quot;borderColor&quot;: &quot;#aaa&quot;,</span><br><span class="line">                    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">                    &quot;borderWidth&quot;: 0.5,</span><br><span class="line">                    &quot;height&quot;: 0,</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;b&quot;: &#123;&quot;fontSize&quot;: 16, &quot;lineHeight&quot;: 33&#125;,#,&quot;color&quot;:&quot;#999&quot;</span><br><span class="line">#                 &quot;c&quot;:&#123;&quot;color&quot;:&quot;#999&quot;&#125;,</span><br><span class="line">                &quot;per&quot;: &#123;</span><br><span class="line">                    &quot;color&quot;: &quot;#eee&quot;,</span><br><span class="line">                    &quot;backgroundColor&quot;: &quot;#334455&quot;,</span><br><span class="line">                    &quot;padding&quot;: [2, 4],</span><br><span class="line">                    &quot;borderRadius&quot;: 2,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(legend_opts=opts.LegendOpts(pos_left=&quot;left&quot;, orient=&quot;vertical&quot;,textstyle_opts=&#123;&quot;color&quot;:&quot;#999&quot;&#125;))#设置图例字体为白色</span><br><span class="line">    .set_series_opts(</span><br><span class="line">        tooltip_opts=opts.TooltipOpts(</span><br><span class="line">            trigger=&quot;item&quot;, formatter=&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot;    # &#x27;item&#x27;: 数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">#     .render(&quot;nested_pies.html&quot;)</span><br><span class="line">).render_notebook()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://upload-images.jianshu.io/upload_images/6460608-85a5b5d8ee7790a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
                     
                ></p>
<p>那个formatter配置项可以在这里了解：<br>{a}（系列名称），{b}（数据项名称），{c}（数值）, {d}（百分比）<br><a class="link"   href="https://echarts.apache.org/zh/option.html#grid.tooltip.formatter" >https://echarts.apache.org/zh/option.html#grid.tooltip.formatter<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="pyecharts中page的使用类似BI大屏展示"><a href="#pyecharts中page的使用类似BI大屏展示" class="headerlink" title="pyecharts中page的使用类似BI大屏展示"></a>pyecharts中page的使用类似BI大屏展示</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page = Page(layout= Page.DraggablePageLayout, page_title= &quot;大屏展示&quot;)</span><br><span class="line"># page = Page()</span><br><span class="line">page.add(</span><br><span class="line">    bar_datazoom_slider(),</span><br><span class="line">    line_markpoint(),</span><br><span class="line">    pie_rosetype(),</span><br><span class="line">    grid_mutil_yaxis(),</span><br><span class="line">    liquid_data_precision(),</span><br><span class="line">    table_base(),</span><br><span class="line">)</span><br><span class="line">page.render(&quot;temp.html&quot;)</span><br></pre></td></tr></table></figure>
<p>然后自己点那开个temp.html文件进行拖拽，缩放，布局称自己想要的样子，最后点击save_config按钮，下载那个chart_config.json文件。</p>
<ul>
<li><p>修改json配置文件，改成百分比主要是为了页面自适应屏幕大小。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = pd.read_json(&quot;chart_config.json&quot;)</span><br><span class="line">df[&quot;width&quot;] = df.width.apply(lambda x: x[:-2])</span><br><span class="line">df[&quot;height&quot;] = df.height.apply(lambda x: x[:-2])</span><br><span class="line">df[&quot;top&quot;] = df.top.apply(lambda x: x[:-2])</span><br><span class="line">df[&quot;left&quot;] = df.left.apply(lambda x: x[:-2])</span><br><span class="line"># df.astype(&#123;&#x27;width&#x27;:&#x27;float&#x27;,&#x27;height&#x27;:&#x27;float&#x27;,&#x27;top&#x27;:&#x27;float&#x27;,&#x27;height&#x27;:&#x27;float&#x27;&#125;).dtypes</span><br><span class="line">df[&quot;width&quot;]= df.width.apply(lambda x: str(round(float(x)/1256*100,4))+&quot;%&quot;)#这里1256、640是你自己电脑屏幕的px值</span><br><span class="line">df[&quot;height&quot;] = df.height.apply(lambda x: str(round(float(x)/640*100*11/12,4))+&quot;%&quot;)#如果出现右侧滑块，可适当进行缩放，这里按11/12的比例缩放</span><br><span class="line">df[&quot;top&quot;] = df.top.apply(lambda x: str(round(float(x)/640*100*11/12,4))+&quot;%&quot;)</span><br><span class="line">df[&quot;left&quot;] = df.left.apply(lambda x: str(round(float(x)/1256*100,4))+&quot;%&quot;)</span><br><span class="line">df.to_json(&quot;chart_config2.json&quot;,orient = &quot;records&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>修改好json数据之后，再运行这行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#第一个字段是前面拖拽的html文件名，cfg_file就是你刚save的json文件名，dest是你要生成的文件名</span><br><span class="line">page.save_resize_html( &#x27;temp.html&#x27;, cfg_file= &#x27;chart_config2.json&#x27;,dest= &#x27;设置好位置后的BI看板.html&#x27;)</span><br></pre></td></tr></table></figure>
<p>这样弄完有点问题就是背景页面可能和图片背景有违和感，你可以使用BeautifulSoup再修改下页面背景颜色啥的,相关网课链接<a class="link"   href="https://www.bilibili.com/video/BV1KT4y1c7pb?p=22" >https://www.bilibili.com/video/BV1KT4y1c7pb?p=22<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import os</span><br><span class="line">with open(os.path.join(os.path.abspath(&quot;.&quot;), &quot;设置好位置后的BI看板.html&quot;), &#x27;r+&#x27;, encoding=&quot;utf8&quot;) as html:</span><br><span class="line">    html_bf = BeautifulSoup(html, &quot;lxml&quot;)</span><br><span class="line">    divs = html_bf.find_all(&quot;div&quot;)</span><br><span class="line">    </span><br><span class="line">    body = html_bf.find(&quot;body&quot;)</span><br><span class="line">    body[&quot;style&quot;]=&quot;background-color:#333333;&quot;</span><br><span class="line">#     div_title = &quot;&lt;div align=\&quot;center\&quot; style=\&quot;width:1900px;\&quot;&gt;\n&lt;span style=\&quot;font-size:30px;font face=\&#x27;黑体\&#x27;;color :#FFFFFF\&quot;&gt;&lt;b&gt;CD_NOW数据看板&lt;/b&gt;&lt;/div&gt;&quot;  # 修改页面背景色、追加标题</span><br><span class="line">#     body.insert(0, BeautifulSoup(div_title, &quot;lxml&quot;).div)</span><br><span class="line">    html_new = str(html_bf)</span><br><span class="line">    html.seek(0, 0)</span><br><span class="line">    html.truncate()</span><br><span class="line">    html.write(html_new)</span><br><span class="line">    html.close()</span><br></pre></td></tr></table></figure>
<p>当然也可以把那个json文件里面的值传到对应的样式代码中在HTML页面中进行布局，需要注意的是画图时指定好每个图表的chart_id,便于通过字符串格式进行指定对应图表位置。</p>
</li>
</ul>
<p>注意点：（来自<a class="link"   href="https://www.jianshu.com/p/47e8f056e5cf%EF%BC%89" >https://www.jianshu.com/p/47e8f056e5cf）<i class="fas fa-external-link-alt"></i></a><br>1.由于图片的布局是根据chart_config.json中图片id的对应关系进行布局，因此每张图片均需要指定其id；<br>如：<br>Bar(init_opts=opts.InitOpts(chart_id=1))<br>2.在本次操作工程中，发现Table类中不包含init_opts参数，可以通过修改源码，在D:\Anaconda3\Lib\site-packages\pyecharts\component\table指定char_id,具体修改的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Table(ChartMixin):</span><br><span class="line">    def __init__(self, page_title: str = CurrentConfig.PAGE_TITLE, js_host: str = &quot;&quot;,chart_id=None):</span><br><span class="line">        self.page_title = page_title</span><br><span class="line">        self.js_host = js_host or CurrentConfig.ONLINE_HOST</span><br><span class="line">        self.js_dependencies: OrderedSet = OrderedSet()</span><br><span class="line">        self.js_functions: OrderedSet = OrderedSet()</span><br><span class="line">        self.title_opts: ComponentTitleOpts = ComponentTitleOpts()</span><br><span class="line">        self.html_content: str = &quot;&quot;</span><br><span class="line">        self._component_type: str = &quot;table&quot;</span><br><span class="line">        if chart_id:</span><br><span class="line">            self.chart_id: str = chart_id</span><br><span class="line">        else:</span><br><span class="line">            self.chart_id: str = uuid.uuid4().hex</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://www.bilibili.com/video/BV1KT4y1c7pb" >https://www.bilibili.com/video/BV1KT4y1c7pb<i class="fas fa-external-link-alt"></i></a> 网课里有资源自己去取</p>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python连接mysql:读取、写入、更新、删除</title>
    <url>/2021/07/04/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%9A%E8%BF%9E%E6%8E%A5mysql%EF%BC%8C%E8%AF%BB%E5%8F%96%E3%80%81%E5%86%99%E5%85%A5%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<h2 id="1、连接读取数据"><a href="#1、连接读取数据" class="headerlink" title="1、连接读取数据"></a>1、连接读取数据</h2><h3 id="第一种：用pymysql连接"><a href="#第一种：用pymysql连接" class="headerlink" title="第一种：用pymysql连接"></a>第一种：用pymysql连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装pymysql</span><br><span class="line">conda install pymysql</span><br><span class="line">#或者</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">#创建数据库连接，依次是主机名，用户名，密码，要打开的数据库，端口号和编码类型</span><br><span class="line">def get_conn():</span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=&quot;****&quot;,</span><br><span class="line">        user=&quot;****&quot;,</span><br><span class="line">        password=&quot;****&quot;,</span><br><span class="line">        db=&quot;****&quot;,</span><br><span class="line">        charset=&quot;utf8&quot;,</span><br><span class="line">        port=3306,</span><br><span class="line">    )</span><br><span class="line">    # 创建游标：</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    return conn, cursor</span><br><span class="line">def close_conn(conn, cursor):</span><br><span class="line">    if cursor:</span><br><span class="line">        cursor.close()</span><br><span class="line">    if conn:</span><br><span class="line">        conn.close()</span><br><span class="line">def query(sql, *args):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    :param sql:</span><br><span class="line">    :param args:</span><br><span class="line">    :return:返回结果，提取数据，返回的data是一个二维元组，((),())形式；</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    conn, cursor= get_conn()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    res = cursor.fetchall() # 获取结果</span><br><span class="line">    close_conn(conn, cursor)</span><br><span class="line">    return res</span><br><span class="line">#返回的是所有行在对应列的值</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># connect.commit()</span><br><span class="line">#如果对数据进行了增删改查的话，执行该语句，相当于把对数据库的操作提交上去，否则修改不会生效</span><br><span class="line">close_conn(conn, cursor)#当然要有关闭游标和数据库连接的习惯</span><br></pre></td></tr></table></figure>

<ul>
<li>fetchone与fetchall的理解；举个例子:cursor是我们连接数据库的实例<br>fetchone()的使用:返回值是单个的元组,也就是一行记录,如果没有结果,那就会返回null</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor.execute(f&quot;select username,password,nickname from user where id=&#123;input&#125;&quot;)</span><br><span class="line">result=cursor.fetchone();  </span><br><span class="line">此时我们可以通过result[0],result[1],result[2]得到username,password,nickname</span><br></pre></td></tr></table></figure>
<p>fetchall()的使用:返回值是多个元组,即返回多个行记录,如果没有结果,返回的是()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor.execute(select * from user)</span><br><span class="line">result=cursor.fetchall();此时select得到的可能是多行记录,那么我们通过fetchall得到的就是多行记录,是一个二维元组</span><br><span class="line">((username1,password1,nickname1),(username2,password2,nickname2),(username3,password3,nickname))</span><br></pre></td></tr></table></figure>
<h3 id="第二种：pandas内置的read-sql"><a href="#第二种：pandas内置的read-sql" class="headerlink" title="第二种：pandas内置的read_sql"></a>第二种：pandas内置的read_sql</h3><p>  需要安装sqlalchemy,但是可以DataFrame的形式读出来，方便多了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install sqlalchemy</span><br><span class="line">#或者</span><br><span class="line">pip install sqlalchemy</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">def reader_sql(query,db=&#x27;myemployees&#x27;):</span><br><span class="line">    sql = query</span><br><span class="line">    engine = create_engine(f&#x27;mysql+pymysql://root:&#123;pwd&#125;@localhost:3306/&#123;db&#125;?charset=utf8&#x27;)</span><br><span class="line">    #格式一点不能错，依次是用户名，密码（###），主机名，端口号，要连接的数据库，指定编码</span><br><span class="line">    df = pd.read_sql(sql,engine)</span><br><span class="line">    return df</span><br><span class="line">df_departments = reader_sql(&#x27;select  * from departments&#x27;)#这里输出的是一个dataframe</span><br></pre></td></tr></table></figure>
<h2 id="2、写入数据"><a href="#2、写入数据" class="headerlink" title="2、写入数据"></a>2、写入数据</h2><h3 id="第一种：to-sql写入"><a href="#第一种：to-sql写入" class="headerlink" title="第一种：to_sql写入"></a>第一种：to_sql写入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result.to_sql(name=&#x27;newtable&#x27;,con=engine,if_exists=&#x27;append&#x27;,index=False)</span><br><span class="line">#这里的index如果为True的话也会报错，数据库中没有索引列（建表的时候没有预留索引列的位置）</span><br><span class="line">#默认参数是fail，如果这张表本来存在的话，操作就会fail失败掉</span><br><span class="line">#不建议这种直接建表操作，这样的表中字段类型会有变化，不符合原先数据要求</span><br><span class="line">#建议在workbench中先create table并把所有字段的类型定义好，在使用to_sql进行写入</span><br></pre></td></tr></table></figure>
<ul>
<li>新建表设置好字段类型或者用cursor.execute执行建表语句后，就可以用to_sql写入了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result.to_sql(name=&#x27;new_table2&#x27;,con=engine,if_exists=&#x27;append&#x27;,index=False)</span><br><span class="line">#这里注意新建表的时候一定要把各个字段的类型搞准确，编码搞清楚不然没意识到出个错，很难受</span><br><span class="line">#如果重复执行这行代码的话，会导致插入的数据成倍数增加，因为你传入的append参数，会在原数据上接着添加</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">del result[&#x27;department_name&#x27;]#删掉一列后再进行写入</span><br><span class="line">result.to_sql(name=&#x27;new_table2&#x27;,con=engine,if_exists=&#x27;append&#x27;,index=False)</span><br><span class="line">#如果建表时在NN列未勾选上的话，不会报错，会发现原本的值数量多了一倍，且新增的数据中的department_name列均为空值</span><br><span class="line">#但如果建表时在NN列勾选上的话，表示该字段不允许为空值，就会报错</span><br><span class="line">#还有如果写入的数据字段多了，与建表时给定的字段数量不符也会报错</span><br></pre></td></tr></table></figure>
<ul>
<li>将excel中分sheet写入数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">import pandas as pd</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">import xlrd</span><br><span class="line">file = r&#x27;C:\Users\sofia.xlsx&#x27;</span><br><span class="line">#分sheet写入数据库</span><br><span class="line"># 然后调用df.to_sql()函数将dataframe数据写入：</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 打开excel表格&quot;&quot;&quot;</span><br><span class="line">workbook = xlrd.open_workbook(file)</span><br><span class="line">sheet_names = workbook.sheet_names()</span><br><span class="line">for i in sheet_names :</span><br><span class="line">    data = pd.read_excel(file,sheet_name = i,index = False,encoding=&#x27;utf-8&#x27;)</span><br><span class="line">    data.to_sql(i,con=engine,if_exists=&#x27;replace&#x27;,index=False)</span><br></pre></td></tr></table></figure>

<ul>
<li>pd.read_sql()介绍</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pandas.read_sql(sql, con, index_col=None, coerce_float=True, params=None, parse_dates=None, columns=None, chunksize=None)</span><br><span class="line">各参数意义：</span><br><span class="line">sql:SQL命令字符串</span><br><span class="line">con：连接sql数据库的engine，一般可以用SQLalchemy或者pymysql之类的包建立</span><br><span class="line">index_col: 选择某一列作为index</span><br><span class="line">coerce_float:非常有用，将数字形式的字符串直接以float型读入</span><br><span class="line">parse_dates:将某一列日期型字符串转换为datetime型数据，与pd.to_datetime函数功能类似。可以直接提供需要转换的列名以默认的日期形式转换，也可以用字典的格式提供列名和转换的日期格式，比如&#123;column_name: format string&#125;（format string：&quot;%Y:%m:%H:%M:%S&quot;）。</span><br><span class="line">columns:要选取的列。一般没啥用，因为在sql命令里面一般就指定要选择的列了</span><br><span class="line">chunksize：如果提供了一个整数值，那么就会返回一个generator，每次输出的行数就是提供的值的大小。</span><br><span class="line">##read_sql本质上是read_sql_table、read_sql_query的统一方式。</span><br><span class="line">三者都return返回DataFrame。</span><br></pre></td></tr></table></figure>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql_table.html#pandas.read_sql_table"><code>read_sql_table</code></a></p>
<p>Read SQL database table into a DataFrame.</p>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql_query.html#pandas.read_sql_query"><code>read_sql_query</code></a></p>
<p>Read SQL query into a DataFrame.</p>
<p><a class="link"   href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_sql.html" >to_sql<i class="fas fa-external-link-alt"></i></a><br>主要有以下几个参数：</p>
<ul>
<li>  name: 输出的表名</li>
<li>  con: 与read_sql中相同</li>
<li>  if_exits： 三个模式：fail，若表存在，则不输出；replace：若表存在，覆盖原来表里的数据；append：若表存在，将数据写到原表的后面。默认为fail</li>
<li>  index：是否将df的index单独写到一列中</li>
<li>  index_label:指定列作为df的index输出，此时index为True</li>
<li>  chunksize： 同read_sql</li>
<li>dtype: 指定列的输出到数据库中的数据类型。字典形式储存：{column_name: sql_dtype}。常见的数据类型有sqlalchemy.types.INTEGER(), sqlalchemy.types.NVARCHAR(),sqlalchemy.Datetime()等，具体数据类型可以参考<a class="link"   href="http://docs.sqlalchemy.org/en/latest/core/type_basics.html#sql-standard-and-multiple-vendor-types" >这里<i class="fas fa-external-link-alt"></i></a><br>  还是以写到mysql数据库为例：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.to_sql(name=&#x27;table&#x27;, </span><br><span class="line">          con=con, </span><br><span class="line">          if_exists=&#x27;append&#x27;, </span><br><span class="line">          index=False,</span><br><span class="line">          dtype=&#123;&#x27;col1&#x27;:sqlalchemy.types.INTEGER(),</span><br><span class="line">                 &#x27;col2&#x27;:sqlalchemy.types.NVARCHAR(length=255),</span><br><span class="line">                 &#x27;col_time&#x27;:sqlalchemy.DateTime(),</span><br><span class="line">                 &#x27;col_bool&#x27;:sqlalchemy.types.Boolean</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure></li>
<li>*注：**如果不提供dtype,to_sql会自动根据df列的dtype选择默认的数据类型输出，比如字符型会以sqlalchemy.types.TEXT类型输出，相比NVARCHAR，TEXT类型的数据所占的空间更大，所以一般会指定输出为NVARCHAR；而如果df的列的类型为np.int64时，将会导致无法识别并转换成INTEGER型，需要事先转换成int类型（用map，apply函数可以方便的转换）。<br><a class="link"   href="https://www.cnblogs.com/arkenstone/p/6271923.html" >https://www.cnblogs.com/arkenstone/p/6271923.html<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="第二种：cursor-execute-直接写入"><a href="#第二种：cursor-execute-直接写入" class="headerlink" title="第二种：cursor.execute()直接写入"></a>第二种：cursor.execute()直接写入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#插入方法无需改动，传入一个动态变化的字典</span><br><span class="line">connect = pymysql.connect(host=&#x27;&#x27;,user=&#x27;&#x27;,db = &#x27;&#x27;,password=&#x27;&#x27;,port=3306,charset=&#x27;utf8&#x27;)</span><br><span class="line">cursor=connect.cursor()</span><br><span class="line">data = &#123;&quot;id&quot;:&#x27;100&#x27;,&#x27;name&#x27;:&#x27;Bob&#x27;&#125;</span><br><span class="line">table= &#x27;stuinfo&#x27;</span><br><span class="line">keys = &#x27;, &#x27;.join(data.keys())</span><br><span class="line">values = &#x27;, &#x27;.join([&#x27;%s&#x27;]*len(data))</span><br><span class="line">sql = f&quot;insert into &#123;table&#125;(&#123;keys&#125;) values(&#123;values&#125;)&quot;</span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql,tuple(data.values()))</span><br><span class="line">    connect.commit()</span><br><span class="line">    cursor.execute(&#x27;select * from &#123;table&#125;&#x27;.format(table=table))</span><br><span class="line">    print(&#x27;执行成功&#x27;,cursor.fetchall())</span><br><span class="line">except:</span><br><span class="line">    print(&quot;插入失败，数据回滚&quot;)</span><br><span class="line">    connect.rollback()</span><br></pre></td></tr></table></figure>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#更新，把Bon的age更新为28</span><br><span class="line">sql = &quot;update stuinfo set id=%s where name = %s&quot;</span><br><span class="line">cursor.execute(sql,(&quot;28&quot;,&#x27;Bob&#x27;))</span><br><span class="line">connect.commit()</span><br><span class="line">cursor.execute(&#x27;select * from stuinfo&#x27;)</span><br><span class="line">print(&quot;Successful:&quot;,cursor.fetchall())</span><br></pre></td></tr></table></figure>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除数据</span><br><span class="line">sql = &quot;delete from stuinfo where id &gt;=10&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">connect.commit()</span><br><span class="line">cursor.execute(&quot;select * from stuinfo&quot;)</span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python办公自动化：邮件发送</title>
    <url>/2021/04/05/python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96%EF%BC%9A%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<ul>
<li>邮件批量发送<br>调用smtp.exmail.qq.com批量自动发送邮件<br>注意文件路径，逗号分隔符，csv中不要有多余回车和空格<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import csv</span><br><span class="line">import smtplib</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from email.mime.base import MIMEBase</span><br><span class="line">from email.mime.image import MIMEImage</span><br><span class="line">from email.utils import formataddr</span><br><span class="line">from email import encoders</span><br><span class="line">import time,datetime</span><br><span class="line">import smtplib</span><br><span class="line">import email.mime.multipart</span><br><span class="line">import email.mime.text</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.mime.multipart import MIMEMultipart</span><br><span class="line">from email.mime.application import MIMEApplication</span><br><span class="line">from email.header import Header</span><br><span class="line"></span><br><span class="line">def get_current_date():</span><br><span class="line">    &quot;&quot;&quot;获取当前时间&quot;&quot;&quot;</span><br><span class="line">    return str(time.strftime(&#x27;%Y%m%d&#x27;))</span><br><span class="line"></span><br><span class="line">def getAddrBook(addrBook):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">        @作用：根据输入的CSV文件，形成相应的通讯录字典</span><br><span class="line">        @返回：字典类型，name为人名，value为对应的邮件地址</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    with open(addrBook,&#x27;r&#x27;,encoding=&#x27;UTF-8&#x27;) as addrFile:</span><br><span class="line">        #将文件名和邮件接收人邮箱地址分行存放在csv文件中，用逗号分隔</span><br><span class="line">        reader = csv.reader(addrFile)</span><br><span class="line">        name = []</span><br><span class="line">        value = []</span><br><span class="line">        for row in reader:</span><br><span class="line">            name.append(row[0])</span><br><span class="line">            value.append(row[1])</span><br><span class="line">    addrs = dict(zip(name, value))</span><br><span class="line">    return addrs</span><br><span class="line"></span><br><span class="line">def send_email(inputpath,smtpHost,port,sendAddr,password,recipientAddrs, subject, content,attachfilename):</span><br><span class="line">    &quot;&quot;&quot;定义并配置好发邮件的函数&quot;&quot;&quot;</span><br><span class="line">    msg = email.mime.multipart.MIMEMultipart()</span><br><span class="line">    msg[&#x27;from&#x27;] =sendAddr #发件人</span><br><span class="line">    msg[&#x27;to&#x27;] =recipientAddrs #接收人</span><br><span class="line">    # msg[&#x27;cc&#x27;] =cc_name #抄送人名称</span><br><span class="line">    msg[&#x27;subject&#x27;] =subject #主题</span><br><span class="line">    content=content</span><br><span class="line">    txt = email.mime.text.MIMEText(content, &#x27;plain&#x27;, &#x27;UTF-8&#x27;)</span><br><span class="line">    msg.attach(txt)</span><br><span class="line">    print(&quot;准备添加附件...&quot;)</span><br><span class="line">    inputfile=inputpath+attachfilename #文件路径</span><br><span class="line">    part = MIMEText(open(inputfile,&#x27;rb&#x27;).read(),&#x27;base64&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">    part[&quot;Content-Type&quot;] = &#x27;application/octet-stream&#x27;</span><br><span class="line">    part.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=Header(attachfilename,&#x27;utf-8&#x27;).encode())</span><br><span class="line">    msg.attach(part)</span><br><span class="line">    smtp = smtplib.SMTP_SSL(smtpHost, port)</span><br><span class="line">    smtp.login(sendAddr, password)</span><br><span class="line">    smtp.sendmail(sendAddr, recipientAddrs.split(&#x27;,&#x27;), str(msg))   #+cc_name.split(&#x27;,&#x27;)</span><br><span class="line">    #print(&quot;发送成功！&quot;)</span><br><span class="line">    smtp.quit()</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    #这里需要定义send_email函数中传入的所有变量</span><br><span class="line">    inputpath = &quot;r&#x27;D:/&quot; #数据存放的文件路径（这里是绝对路径）</span><br><span class="line">    smtpHost = &#x27;smtp.exmail.qq.com&#x27;  # 默认服务器地址及端口</span><br><span class="line">    port=465</span><br><span class="line">    sendAddr =&quot;&quot;    #自己也就是发件人的邮箱账号</span><br><span class="line">    password = &quot;&quot;   #自己的邮箱密码</span><br><span class="line">    subject=&quot; &quot;+current_date  #主题+当前日期</span><br><span class="line">    content=&#x27;&#x27;&#x27;附件为测试文件&#x27;&#x27;&#x27;+current_date# 正文内容+当前日期</span><br><span class="line"></span><br><span class="line">    addrBook=r&#x27;D:\邮箱联系人表单.csv&#x27;  #联系人表单文件路径</span><br><span class="line">    addrs=getAddrBook(addrBook)</span><br><span class="line">    for i in addrs:</span><br><span class="line">        attachfilename=i+&#x27;.xlsx&#x27; #将要发送的文件添加为附件</span><br><span class="line">        recipientAddrs=addrs[i] #接收人的邮箱地址</span><br><span class="line">        result = os.path.exists(inputpath+i+&#x27;.xlsx&#x27;) #判断当前目录是否存在该文件</span><br><span class="line">        if result:</span><br><span class="line">            #存在就执行邮件</span><br><span class="line">            send_email(inputpath,smtpHost,port,sendAddr,password,recipientAddrs,</span><br><span class="line">            subject,content,attachfilename)</span><br><span class="line">            print ((&#x27;发给 %s 的邮件执行成功&#x27;) %(recipientAddrs))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>这里也看到有使用126邮箱的smtp服务器：’smtp.126.com’<br><a class="link"   href="https://blog.csdn.net/weixin_42350212/article/details/118751583" >https://blog.csdn.net/weixin_42350212/article/details/118751583<i class="fas fa-external-link-alt"></i></a><br>Python smtp发送邮件怎么设置抄送人<br><a class="link"   href="https://www.cnblogs.com/shiyixirui/p/14692146.html" >https://www.cnblogs.com/shiyixirui/p/14692146.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>python办公自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据采集：selenium爬虫、自动化</title>
    <url>/2021/05/05/python%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%9Aselenium%E7%88%AC%E8%99%AB%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中文文档https://python-selenium-zh.readthedocs.io/zh_CN/latest/</span><br></pre></td></tr></table></figure>
<p>装包：pip install selenium<br>下载chrome：<a class="link"   href="https://www.google.cn/chrome/" >https://www.google.cn/chrome/<i class="fas fa-external-link-alt"></i></a><br>下驱动：<a class="link"   href="https://chromedriver.storage.googleapis.com/index.html" >https://chromedriver.storage.googleapis.com/index.html<i class="fas fa-external-link-alt"></i></a>  注意浏览器驱动 必须要和浏览器版本匹配<br>这是个zip包，下载下来之后，解压里面的程序文件 chromedriver.exe 到scripts路径下<br>跑一下看看感觉来了没有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">try:</span><br><span class="line">    browser.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class="line">    input = browser.find_element_by_id(&#x27;kw&#x27;)</span><br><span class="line">    input.send_keys(&#x27;Python&#x27;)</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    wait = WebDriverWait(browser, 10)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID, &#x27;content_left&#x27;)))</span><br><span class="line">    print(browser.current_url)</span><br><span class="line">    print(browser.get_cookies())</span><br><span class="line">    print(browser.page_source)</span><br><span class="line">finally:hexo</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>
<p>不可能一下就会的，慢慢来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_54733110/article/details/119027005  python万字博文教你玩嗨selenium库</span><br><span class="line">https://mp.weixin.qq.com/s?__biz=MzI0OTc0MzAwNA==&amp;mid=2247487680&amp;idx=1&amp;sn=e40947f382116ff59761f250ee45dce3  模拟登录淘宝</span><br><span class="line">https://www.pianshen.com/article/345981989/  判断元素16种方法expected_conditions</span><br><span class="line">https://github.com/Python3WebSpider/Python3WebSpider/blob/master/7.1-Selenium%E7%9A%84%E4%BD%BF%E7%94%A8.md</span><br><span class="line">http://www.byhy.net/tut/auto/selenium/01/这个作者写的很好</span><br><span class="line">https://www.bilibili.com/video/av64421994/?p=1简直是保姆级教学，</span><br><span class="line">希望你学会了不要乱搞</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python中requests使用中中文乱码的解决方案</title>
    <url>/2021/12/02/requests%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<ul>
<li> 中文乱码处理<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://www.baidu.com&quot;</span><br><span class="line">r = requests.get(url)</span><br><span class="line"># 自动选择合适的编码方式</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
中文乱码显示正常了！！</li>
</ul>
<p>有时候，我们还会遇到通过这个操作后无法解决的情况，比如新浪首页的表现：<br>出现这种情况，据说是使用gzip将网页压缩了，必须先对其解码，使用r.content会自动解码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://www.sina.com.cn/&quot;</span><br><span class="line">r = requests.get(url)</span><br><span class="line"># 指定编码解码方式</span><br><span class="line">html = r.content.decode(&#x27;UTF-8&#x27;)</span><br><span class="line"># r.encoding = &#x27;utf-8&#x27;</span><br></pre></td></tr></table></figure>
<p>其实吧，处理的方式有很多，大家注意一点，那就是看请求的html数据中最前面对的charset设置的是啥！！</p>
<ul>
<li> html实体编码解析<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: s = &#x27;目前玩的挺好的，就&amp;hellip;&amp;hellip;&lt;br&gt;给四星是因为为什么不是同一个服的就不能进社团😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬&#x27;</span><br><span class="line">#可以看到，有个&#x27;&amp;hellip;&#x27;，这玩意是html实体表示省略号&#x27;...&#x27;，因此需要进行处理！</span><br><span class="line">In [2]: import html</span><br><span class="line"></span><br><span class="line">In [3]: html.unescape(s)</span><br><span class="line">Out[3]: &#x27;目前玩的挺好的，就……&lt;br&gt;给四星是因为为什么不是同一个服的就不能进社团😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>sql数据分析：自动化报表，多场景更新</title>
    <url>/2021/08/06/sql%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%A5%E8%A1%A8%EF%BC%8C%E5%A4%9A%E5%9C%BA%E6%99%AF%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `cd_20210414` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `platform` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT &#x27;&#x27; COMMENT &#x27;平台&#x27;,</span><br><span class="line">  `platform_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT &#x27;0&#x27; COMMENT &#x27;平台id 即storeid&#x27;,</span><br><span class="line">  `product_id` varchar(255) CHARACTER SET utf8mb4 DEFAULT &#x27;0&#x27; COMMENT &#x27;商品id&#x27;,</span><br><span class="line">  `barcode` varchar(50) CHARACTER SET utf8mb4 DEFAULT &#x27;0&#x27; COMMENT &#x27;商品upc编码&#x27;,	</span><br><span class="line">  `sort_id` int(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;商品排序&#x27;,</span><br><span class="line">  `title` varchar(255) COLLATE utf8mb4_general_ci DEFAULT &#x27;&#x27; COMMENT &#x27;商品名称&#x27;,</span><br><span class="line">  `promotion_price` float(10,2)  DEFAULT null COMMENT &#x27;促销价&#x27;,</span><br><span class="line">  `full_price`  float(10,2)  DEFAULT null COMMENT &#x27;商品原价&#x27;,</span><br><span class="line">  `product_month_sale` varchar(10) DEFAULT null COMMENT &#x27;月销&#x27;,</span><br><span class="line">  `promotion` varchar(255)  CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT &#x27;促销活动&#x27;,</span><br><span class="line">  `image_url` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,</span><br><span class="line">  `catname1` varchar(50) CHARACTER SET utf8mb4 DEFAULT &#x27; &#x27;,</span><br><span class="line">`brand` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;品牌&#x27;,</span><br><span class="line">  `time` datetime DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `a` (`platform`,`platform_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>
<h3 id="新增标签列，加索引"><a href="#新增标签列，加索引" class="headerlink" title="新增标签列，加索引"></a>新增标签列，加索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table cd_20210414 add COLUMN crawler_id VARCHAR(30);</span><br><span class="line">alter table cd_20210414 add COLUMN detail_full_price float(12,2);</span><br><span class="line">alter table cd_20210414 add index a(sku);</span><br><span class="line">alter table cd_20210414 add index b(platform,platform_id);</span><br></pre></td></tr></table></figure>
<h3 id="查询当月日期及对应上月日期"><a href="#查询当月日期及对应上月日期" class="headerlink" title="查询当月日期及对应上月日期"></a>查询当月日期及对应上月日期</h3><p>mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#当月日期</span><br><span class="line">select DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY),interval -day(DATE_SUB(CURDATE(),INTERVAL 1 DAY))+1 day),</span><br><span class="line">DATE_SUB(CURDATE(),INTERVAL 1 DAY);</span><br><span class="line">#对应上月日期</span><br><span class="line">select DATE_SUB(DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY),interval -day(DATE_SUB(CURDATE(),INTERVAL 1 DAY))+1 day),INTERVAL 1 MONTH),</span><br><span class="line">DATE_SUB(DATE_SUB(CURDATE(),INTERVAL 1 DAY),INTERVAL 1 MONTH);</span><br></pre></td></tr></table></figure>

<p>hive</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#昨天</span><br><span class="line">select date_format(date_sub(current_date(),1), &#x27;yyyyMMdd&#x27;);</span><br><span class="line">#当月月初</span><br><span class="line">select concat(from_unixtime(unix_timestamp(), &#x27;yyyyMM&#x27;),&#x27;01&#x27;);</span><br><span class="line">#上月同期</span><br><span class="line">select date_format(add_months(from_unixtime(unix_timestamp(), &#x27;yyyy-MM-dd&#x27;),-1),&#x27;yyyyMMdd&#x27;);</span><br><span class="line">#昨天环比上月同期</span><br><span class="line">select date_format(date_sub(add_months(from_unixtime(unix_timestamp(), &#x27;yyyy-MM-dd&#x27;),-1),1),&#x27;yyyyMMdd&#x27;);</span><br><span class="line">#上月月初</span><br><span class="line">select concat(date_format(add_months(from_unixtime(unix_timestamp(), &#x27;yyyy-MM-dd&#x27;),-1),&#x27;yyyyMM&#x27;),&#x27;01&#x27;);</span><br></pre></td></tr></table></figure>


<h3 id="每个部门薪水最高的员工-包含部门名称"><a href="#每个部门薪水最高的员工-包含部门名称" class="headerlink" title="每个部门薪水最高的员工(包含部门名称)"></a>每个部门薪水最高的员工(包含部门名称)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * </span><br><span class="line">from </span><br><span class="line">(SELECT </span><br><span class="line">employee_id</span><br><span class="line">,first_name</span><br><span class="line">,e.department_id</span><br><span class="line">,department_name</span><br><span class="line">,salary </span><br><span class="line">,row_number() over(partition by department_id order by salary desc) as salary_rank </span><br><span class="line">FROM `employees` e </span><br><span class="line">inner join </span><br><span class="line">`departments` d </span><br><span class="line">on e.department_id = d.department_id</span><br><span class="line">) a </span><br><span class="line">where a.salary_rank=1;</span><br></pre></td></tr></table></figure>
<h3 id="截至当前，每个用户已经连续签到的天数"><a href="#截至当前，每个用户已经连续签到的天数" class="headerlink" title="截至当前，每个用户已经连续签到的天数"></a>截至当前，每个用户已经连续签到的天数</h3><p>查出最后一次不登录的日期，与当前日期进行比较，二者差值为几就是连续登录几天</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">user_id ,</span><br><span class="line">max(date),</span><br><span class="line">DATEDIFF(&#x27;2021-02-19&#x27;,max(date)) as max_con_days</span><br><span class="line">from user_attendence </span><br><span class="line">where is_sign = 0 </span><br><span class="line">group by user_id;</span><br></pre></td></tr></table></figure>
<h3 id="计算有史以来用户最大连续签到天数；"><a href="#计算有史以来用户最大连续签到天数；" class="headerlink" title="计算有史以来用户最大连续签到天数；"></a>计算有史以来用户最大连续签到天数；</h3><p>对用户分组，按日期进行排序，排序序号为rank;<br>如果日期与序号的差值为相等，按这个差值进行分组并计数，取最大值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">user_id</span><br><span class="line">,max(次数)from </span><br><span class="line">    (select user_id</span><br><span class="line">    ,date,rn</span><br><span class="line">    ,a.date-a.rn diff</span><br><span class="line">    ,count(*) 次数</span><br><span class="line">    from </span><br><span class="line">        (select </span><br><span class="line">        user_id</span><br><span class="line">        ,date,</span><br><span class="line">        row_number() over(partition by user_id order by date asc) rn</span><br><span class="line">        from user_attendence  </span><br><span class="line">        where is_sign = 1</span><br><span class="line">        ) a </span><br><span class="line">    group by user_id,diff</span><br><span class="line">    ) b </span><br><span class="line">group by user_id;</span><br></pre></td></tr></table></figure>
<h3 id="某一天以及近七天新增用户数"><a href="#某一天以及近七天新增用户数" class="headerlink" title="某一天以及近七天新增用户数"></a>某一天以及近七天新增用户数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set @date_day = &quot;1998-02-10&quot;;</span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">count(if(DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;)=@date_day,user_id,null)) as new_id</span><br><span class="line">,count(user_id)/7 as avg7_id</span><br><span class="line">from </span><br><span class="line">cd_now </span><br><span class="line">where </span><br><span class="line">DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;) between DATE_SUB(@date_day,INTERVAL 7 day) and @date_day、</span><br></pre></td></tr></table></figure>
<h3 id="支付金额在前-20-的用户"><a href="#支付金额在前-20-的用户" class="headerlink" title="支付金额在前 20%的用户"></a>支付金额在前 20%的用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 问题：求支付金额在前 20%的用户</span><br><span class="line">select </span><br><span class="line">a.user_name </span><br><span class="line">,a.sum_amount </span><br><span class="line">from </span><br><span class="line">(select </span><br><span class="line">user_name </span><br><span class="line">,sum(pay_amount) sum_amount </span><br><span class="line">,ntile(5) over(order by sum(pay_amount) desc) sum_amount_rank </span><br><span class="line">-- ,sum(pay_amount) over(order by user_name) cumsum</span><br><span class="line">-- ,round(sum(pay_amount) over(order by user_name)/sum(pay_amount) over(),4) cumsum_rate</span><br><span class="line">from user_sales_table </span><br><span class="line">group by user_name ) a </span><br><span class="line">where a.sum_amount_rank = 1 </span><br></pre></td></tr></table></figure>
<h3 id="每月最受欢迎的前三名"><a href="#每月最受欢迎的前三名" class="headerlink" title="每月最受欢迎的前三名"></a>每月最受欢迎的前三名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">*</span><br><span class="line">from </span><br><span class="line">	(select </span><br><span class="line">	a.品牌</span><br><span class="line">	,a.mon</span><br><span class="line">	,a.num</span><br><span class="line">	,row_number()over(PARTITION by a.mon order by a.num desc) as num_rank	</span><br><span class="line">	from  </span><br><span class="line">		(SELECT </span><br><span class="line">		*</span><br><span class="line">		,date_format(日期,&quot;%Y-%m-01&quot;) mon</span><br><span class="line">		,count(orser_id) num</span><br><span class="line">		FROM `alcohol`</span><br><span class="line">		group by </span><br><span class="line">		date_format(日期,&quot;%Y-%m-01&quot;) ,品牌) a</span><br><span class="line">	) b</span><br><span class="line">where b.num_rank&lt;4 </span><br><span class="line">order by b.mon asc </span><br></pre></td></tr></table></figure>
<h3 id="用户留存"><a href="#用户留存" class="headerlink" title="用户留存"></a>用户留存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">(case when t3.day_value=1 then &quot;次日留存&quot;</span><br><span class="line">when t3.day_value = 3 then &quot;三日留存&quot;</span><br><span class="line">when t3.day_value = 7 then &quot;七日留存&quot;</span><br><span class="line">else &quot;其他&quot;</span><br><span class="line">end</span><br><span class="line">) as type</span><br><span class="line">,count(t3.user_id) &quot;用户个数&quot;</span><br><span class="line">from </span><br><span class="line">	(select </span><br><span class="line">	t1.user_id</span><br><span class="line">	,t1.first_time</span><br><span class="line">	,t2.last_time</span><br><span class="line">	,datediff(t2.last_time,t1.first_time) day_value</span><br><span class="line">	from</span><br><span class="line">		(select </span><br><span class="line">		user_id</span><br><span class="line">		,date(min(pur_dt)) first_time</span><br><span class="line">		from cd_now </span><br><span class="line">		group by </span><br><span class="line">		user_id) t1</span><br><span class="line">		left join </span><br><span class="line">		(select </span><br><span class="line">		user_id</span><br><span class="line">		,date(max(pur_dt)) last_time</span><br><span class="line">		from cd_now</span><br><span class="line">		group by </span><br><span class="line">		user_id</span><br><span class="line">		) t2</span><br><span class="line">	on t1.user_id=t2.user_id</span><br><span class="line">	) t3</span><br><span class="line">group by </span><br><span class="line">(case when t3.day_value=1 then &quot;次日留存&quot;</span><br><span class="line">when t3.day_value = 3 then &quot;三日留存&quot;</span><br><span class="line">when t3.day_value = 7 then &quot;七日留存&quot;</span><br><span class="line">else &quot;其他&quot;</span><br><span class="line">end</span><br><span class="line">) </span><br></pre></td></tr></table></figure>
<h3 id="复购"><a href="#复购" class="headerlink" title="复购"></a>复购</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with temp1 as ( # 1、找出每个用户第一次下单的时间和年月</span><br><span class="line">select user_id,min(pur_dt),date_format(min(pur_dt),&#x27;%Y-%m&#x27;) `年月`</span><br><span class="line">from cd_now </span><br><span class="line">group by user_id </span><br><span class="line">),</span><br><span class="line"> temp2 as(# 2、找出每月的新客户数目 </span><br><span class="line">select user_id,`年月`,count(user_id) as `新客户数` </span><br><span class="line">from </span><br><span class="line"> temp1 </span><br><span class="line">group by `年月` </span><br><span class="line"> ),</span><br><span class="line"> temp3 as( # 3.1、找出当月有复购的新客户数目，第一步找出用户在第一次下单的那个月的购买次数</span><br><span class="line">select n.user_id,count(n.order_id) as `次数`,`年月` </span><br><span class="line">from cd_now n </span><br><span class="line"> inner join temp1 </span><br><span class="line">on n.user_id = temp1.user_id and temp1.`年月` = date_format(pur_dt,&quot;%Y-%m&quot;)</span><br><span class="line">group by temp1.user_id</span><br><span class="line"> ),</span><br><span class="line"> temp4 as ( # 3.2、找出当月有复购的新客户数目,第二步是将有复购的新客筛选出来（购买次数&gt;=2）</span><br><span class="line">select `年月`,temp3.user_id,count(temp3.user_id) as `有复购的新客户数目`</span><br><span class="line">from temp3 </span><br><span class="line">where `次数`&gt;=2</span><br><span class="line">group by temp3.`年月`</span><br><span class="line"> ),</span><br><span class="line"> temp5 as ( # 计算复购率</span><br><span class="line">select temp2.`年月`,temp2.`新客户数`,ifnull(temp4.`有复购的新客户数目`,0) `老客户数`,</span><br><span class="line"> ifnull(temp4.`有复购的新客户数目`/temp2.`新客户数`,0) `复购率`</span><br><span class="line"> from temp2</span><br><span class="line"> left join temp4</span><br><span class="line">on temp2.`年月` = temp4.`年月`</span><br><span class="line"> ) select * from temp5</span><br></pre></td></tr></table></figure>
<h3 id="rfm模型"><a href="#rfm模型" class="headerlink" title="rfm模型"></a>rfm模型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 用户id,下单次数,最近下单时间,顾客实付,下单间隔,实付客单,rfm类型,</span><br><span class="line">select </span><br><span class="line">a.user_id</span><br><span class="line">,a.`下单次数`</span><br><span class="line">,a.`最近下单时间`</span><br><span class="line">,a.`顾客实付`</span><br><span class="line">,a.`下单间隔`</span><br><span class="line">,a.`实付客单`</span><br><span class="line">,case </span><br><span class="line">when a.`下单间隔` &gt; 45 and a.`下单次数` &lt;= 1 and a.`实付客单` &lt;=50 then &#x27;111&#x27; </span><br><span class="line">when a.`下单间隔` &gt; 45 and a.`下单次数` &lt;= 1 and a.`实付客单` &gt;50 then &#x27;112&#x27; </span><br><span class="line">when a.`下单间隔` &gt; 45 and a.`下单次数` &gt; 1 and a.`实付客单` &lt;=50 then &#x27;121&#x27; </span><br><span class="line">when a.`下单间隔` &lt;= 45 and a.`下单次数` &lt;= 1 and a.`实付客单` &lt;=50 then &#x27;211&#x27; </span><br><span class="line">when a.`下单间隔` &lt;= 45 and a.`下单次数` &gt; 1 and a.`实付客单` &lt;=50 then &#x27;221&#x27; </span><br><span class="line">when a.`下单间隔` &lt;= 45 and a.`下单次数` &lt;= 1 and a.`实付客单` &gt; 50 then &#x27;212&#x27; </span><br><span class="line">when a.`下单间隔` &lt;= 45 and a.`下单次数` &gt; 1 and a.`实付客单` &gt; 50 then &#x27;222&#x27; </span><br><span class="line">when a.`下单间隔` &gt; 45 and a.`下单次数` &gt; 1 and a.`实付客单` &gt; 50 then &#x27;122&#x27; </span><br><span class="line">end as &#x27;rfm_type&#x27;</span><br><span class="line">from </span><br><span class="line">(select </span><br><span class="line">user_id </span><br><span class="line">,count(pur_dt) `下单次数`</span><br><span class="line">,date_format(max(pur_dt),&quot;%Y-%m-%d&quot;) `最近下单时间`</span><br><span class="line">,sum(pur_amount) `顾客实付`</span><br><span class="line">,datediff(&quot;1998-03-31&quot;,date_format(max(pur_dt),&quot;%Y-%m-%d&quot;)) `下单间隔`</span><br><span class="line">,avg(pur_amount) as `实付客单`</span><br><span class="line">from supermanzwg.cd_now </span><br><span class="line">where date_format(month,&quot;%Y-%m-%d&quot;) between &quot;1998-01-01&quot; and &quot;1998-03-01&quot;</span><br><span class="line">group by </span><br><span class="line">user_id ) a ;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>sql数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python办公自动化：文件和目录操作</title>
    <url>/2021/03/06/python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96%EF%BC%9A%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br></pre></td></tr></table></figure>
<h3 id="创建目录结构"><a href="#创建目录结构" class="headerlink" title="创建目录结构"></a>创建目录结构</h3><ul>
<li>os.makedirs 可以递归的创建目录结构，比如<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.makedirs(&#x27;tmp/python/fileop&#x27;,exist_ok=True)</span><br></pre></td></tr></table></figure>
在当前工作目录下面创建 tmp目录，在tmp目录下面再创建 python目录，在Python目录下面再创建fileop目录；exist_ok=True 指定了，如果某个要创建的目录已经存在，也不报错</li>
</ul>
<h3 id="删除文件或目录"><a href="#删除文件或目录" class="headerlink" title="删除文件或目录"></a>删除文件或目录</h3><p>os.remove 可以删除一个文件，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.remove(&#x27;sdf.py&#x27;)</span><br></pre></td></tr></table></figure>
<p>shutil.rmtree() 可以递归的删除某个目录所有的子目录和子文件 比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.rmtree(&#x27;tmp&#x27;, ignore_errors=True)</span><br></pre></td></tr></table></figure>
<p>注意：参数 ignore_errors=True 保证如果目录不为空，不会抛出异常。</p>
<h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><p>shutil 模块里面有很多 目录文件操作的函数<br>拷贝文件，可以使用shutil模块的copyfile函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from shutil import copyfile</span><br><span class="line"># 拷贝 d:/tools/first.py 到 e:/first.py</span><br><span class="line">copyfile(&#x27;d:/tools/first.py&#x27;, &#x27;e:/first.py&#x27;)</span><br></pre></td></tr></table></figure>
<p>注意，如果拷贝前，e:/first.py 已经存在，则会被拷贝覆盖，所以使用该函数一定要小心。<br>###拷贝目录<br>如果我们要拷贝一个目录里面所有的内容（包括子目录和文件、子目录里面的子目录和文件，等等）到另外一个目录中，可以使用 shutil的copytree函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from shutil import copytree</span><br><span class="line"># 拷贝 d:/tools/aaa 目录中所有的内容 到 e:/bbb 中</span><br><span class="line">copytree(&#x27;d:/tools/aaa&#x27;, &#x27;e:/new/bbb&#x27;)</span><br></pre></td></tr></table></figure>
<p>注意拷贝前， 目标目录必须 不存在 ，否则会报错。</p>
<p>上面的代码执行前面，如果 e:/new/bbb 已经存在，执行到copytree时，就会报错</p>
<p>上面的代码执行前面，如果 e:/new 这个目录都不存在，执行到copytree时，就会 创建 e:/new 目录，再创建 e:/new/bbb 目录，再拷贝 d:/tools/aaa 目录中所有的内容 到 e:/new/bbb 中。</p>
<p>上面的代码执行前面，如果 e:/new 这个目录存在，但是 e:/new/bbb 不存在，执行到copytree时，就只会 创建 e:/new/bbb ，再拷贝 d:/tools/aaa 目录中所有的内容 到 e:/new/bbb 中。<br>###修改文件名、目录名<br>要修改文件名、目录名，可以使用os模块的rename函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改目录名 d:/tools/aaa 为 d:/tools/bbb</span><br><span class="line">os.rename(&#x27;d:/tools/aaa&#x27;,&#x27;d:/tools/bbb&#x27;)</span><br><span class="line"></span><br><span class="line"># 修改文件名 d:/tools/first.py 为 d:/tools/second.py</span><br><span class="line">os.rename(&#x27;d:/tools/first.py&#x27;,&#x27;d:/tools/second.py&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="对文件路径名的操作"><a href="#对文件路径名的操作" class="headerlink" title="对文件路径名的操作"></a>对文件路径名的操作</h3><p>对于文件名的操作，比如 获取文件名称，文件所在目录，文件路径的拼接等，都可以使用 os.path 模块。</p>
<p>通常我们喜欢使用格式化字符串的方法来做文件路径的拼接，但是如果你的程序需要在Linux、Windows等多个平台运行，它们的路径的分隔符是不同的，Windows上是 <code>\</code> , 而 Linux上是 <code>/</code>。</p>
<p>这时，我们应该使用 os.path 模块。 它能够自动处理类似 Data/data.csv 和 Data\data.csv 这样的文件路径差异。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path = &#x27;/Users/beazley/Data/data.csv&#x27;</span><br><span class="line"># 获取路径中的文件名部分</span><br><span class="line">os.path.basename(path)</span><br><span class="line">&#x27;data.csv&#x27;</span><br><span class="line"># 获取路径中的目录部分</span><br><span class="line">os.path.dirname(path)</span><br><span class="line">&#x27;/Users/beazley/Data&#x27;</span><br><span class="line"># 文件路径的拼接</span><br><span class="line">os.path.join(&#x27;tmp&#x27;, &#x27;data&#x27;, os.path.basename(path))</span><br><span class="line">&#x27;tmp/data/data.csv&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="判断文件、目录是否存在"><a href="#判断文件、目录是否存在" class="headerlink" title="判断文件、目录是否存在"></a>判断文件、目录是否存在</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.path.exists(&#x27;d:/systems/cmd.exe&#x27;)</span><br><span class="line">os.path.exists(&#x27;d:/systems&#x27;)</span><br></pre></td></tr></table></figure>
<p>exists方法返回值为True表示 存在，否则表示不存在。<br>如果你要判断指定路径是否是文件，可以这样<br>os.path.isfile(‘d:/systems/cmd.exe’)# 返回值为True 表示是文件<br>如果你要判断指定路径是否是目录，可以这样<br>os.path.isdir(‘d:/systems’)#返回值为True 表示是目录</p>
<p>###文件大小和修改日期</p>
<ul>
<li><p>返回文件大小<br>os.path.getsize(‘file1’)<br>3669</p>
</li>
<li><p>返回文件的最后修改日期，是秒时间<br>参考下一章 日期和时间 里面的内容<br>os.path.getmtime(‘file1’)<br>1272478234.0</p>
</li>
<li><p>可以把秒时间 转化为日期时间<br>import time<br>time.ctime(os.path.getmtime(‘/etc/passwd’))<br>‘Wed Apr 28 13:10:34 2010’</p>
</li>
</ul>
<p>###当前工作目录<br>当前工作目录的路径：<br>wd = os.getcwd()<br>改变当前工作目录到另外的路径：<br>os.chdir(path)<br>参数就是 新的当前工作目录 路径地址。</p>
<p>###递归的遍历目录下面所有的文件<br>获取某个目录中所有的 文件， 包括子目录里面的文件。 可以使用 os库中的walk方法<br>比如我们要得到某个目录下面所有的子目录 和所有的文件，存放在两个列表中<br> os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])<br>    top ：是你所要遍历的目录的地址, 返回的是一个三元组 (dirpath, dirnames, filenames)<br>    topdown ：可选，True则优先遍历 top 文件夹，与top 文件夹中每一个子目录；否则优先遍历 top 的子目录(默认为开启)。<br>    onerror ：可选，需要一个 callable 对象，当 walk 需要异常时，会调用<br>    followlinks ：可选，如果为 True，则会遍历目录下的快捷方式(linux 下是软连接 symbolic link )实际所指的目录(默认关闭)，如果为 False，则优先遍历 top 的子目录；</p>
<ul>
<li>得到某个目录下所有文件的全路径<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"># 目标目录</span><br><span class="line">targetDir = r&#x27;d:\tmp\util\dist\check&#x27;</span><br><span class="line">for (dirpath, dirnames, filenames) in os.walk(targetDir):</span><br><span class="line">    for fn in filenames:</span><br><span class="line">        # 把 dirpath 和 每个文件名拼接起来 就是全路径</span><br><span class="line">        fpath = os.path.join(dirpath, fn)</span><br><span class="line"># dirpath 代表当前遍历到的目录名</span><br><span class="line"># dirnames 是列表对象，存放当前dirpath中的所有子目录名</span><br><span class="line"># filenames 是列表对象，存放当前dirpath中的所有文件名</span><br></pre></td></tr></table></figure>
<h3 id="得到目录中所有的文件和子目录名"><a href="#得到目录中所有的文件和子目录名" class="headerlink" title="得到目录中所有的文件和子目录名"></a>得到目录中所有的文件和子目录名</h3>listdir返回的是该目录下面所有的文件和子目录。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 目标目录</span><br><span class="line">targetDir = r&#x27;d:\tmp\util\dist\check&#x27;</span><br><span class="line">files =  os.listdir(targetDir)</span><br><span class="line">print(files)</span><br></pre></td></tr></table></figure>
如果只需要获取目录中所有的文件，或者只需要子目录<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">from os.path import isfile, join,isdir</span><br><span class="line"># 目标目录</span><br><span class="line">targetDir = r&#x27;d:\tmp\util\dist\check&#x27;</span><br><span class="line"># 所有的文件</span><br><span class="line">print([f for f in os.listdir(targetDir) if isfile(join(targetDir, f))])</span><br><span class="line"># 所有的目录</span><br><span class="line">print([f for f in os.listdir(targetDir) if isdir(join(targetDir, f))])</span><br></pre></td></tr></table></figure>
###得到目录中指定扩展名的文件和子目录<br>可以使用glob库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import glob</span><br><span class="line">exes = glob.glob(r&#x27;d:\tmp\*.txt&#x27;)</span><br><span class="line">print(exes)</span><br></pre></td></tr></table></figure>
<a class="link"   href="http://www.byhy.net/tut/py/extra/file_dir" >http://www.byhy.net/tut/py/extra/file_dir<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <tags>
        <tag>python办公自动化</tag>
      </tags>
  </entry>
</search>
