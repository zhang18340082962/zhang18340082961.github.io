<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python数据分析 :pandas数据读取、预处理、筛选、计算，时间序列、透视、拼接、导出</title>
    <url>/2021/10/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%9Apandas%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96%E3%80%81%E9%A2%84%E5%A4%84%E7%90%86%E3%80%81%E7%AD%9B%E9%80%89%E3%80%81%E8%AE%A1%E7%AE%97%EF%BC%8C%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E3%80%81%E9%80%8F%E8%A7%86%E3%80%81%E6%8B%BC%E6%8E%A5%E3%80%81%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h3 id="一、Pandas数据结构"><a href="#一、Pandas数据结构" class="headerlink" title="一、Pandas数据结构"></a>一、Pandas数据结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S1=pd.Series([‘a’,’b’,’c’]) series是一组数据与一组索引（行索引）组成的数据结构</span><br><span class="line">S1=pd.Series([‘a’,’b’,’c’],index=(1,3,4)) 指定索引</span><br><span class="line">S1=pd.Series(&#123;1:‘a’,2:’b’,3:’c’&#125;) 用字典形式指定索引</span><br><span class="line">S1.index() 返回索引</span><br><span class="line">S1.values() 返回值</span><br><span class="line">Df=pd.DataFrame([‘a’,’b’,’c’]) dataframe是一组数据与两组索引（行列索引）组成的数据结构</span><br><span class="line">Df=pd.DataFrame([[a,A],[b,B],[c,C]],columns=[‘小写’,’大写’]，index=[‘一’,’二’,’三’])</span><br><span class="line">Columms 为列索引，index为行索引</span><br><span class="line">pip install -i [https://pypi.tuna.tsinghua.edu.cn/simple](https://link.zhihu.com/?target=https%3A//pypi.tuna.tsinghua.edu.cn/simple) pyspider 清华镜像</span><br></pre></td></tr></table></figure>
<ul>
<li>查找某个包 anaconda search -t conda tensorflow<br>下载某个包 anaconda show package<br>data={‘小写’:[‘a’,’b’,’c’],’大写’:[‘A’,’B’,’C’]} 传入字典<br>Df=Pd.DataFrame(data)<br>Df.index() df.columns()</li>
<li>建立分层索引的dataframe：pd.MultiIndex.from_arrays([[,,]],name=[,,]）</li>
</ul>
<h3 id="二、读取数据"><a href="#二、读取数据" class="headerlink" title="二、读取数据"></a>二、读取数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df=pd.read_excel(r’C:\user\...xlsx’,sheet_name=’sheet1’) 或</span><br><span class="line">pd.read_excel(r’C:\user\...xlsx’,sheet_name=0) 读取excel表</span><br><span class="line">pd.read_excel(r’C:\user\...xlsx’,index_col=0,header=0)</span><br><span class="line">index_col指定行索引，header指定列索引</span><br><span class="line">pd.read_excel(r’C:\user\...xlsx’,usecols=[0,1]) 导入指定列,不能有index_col和header</span><br><span class="line">pd.read_tablel(r’C:\user\...txt’，sep=’ ’) 导入txt文件,sep指定分隔符是什么</span><br><span class="line">df.head(2) 展示前两行，默认展示前5行</span><br><span class="line">df.shape 显示数据几行几列，不包含行和列索引</span><br><span class="line">df.info()可查看表中数据的类型</span><br><span class="line">df.describe() 可获得表中数值类型指端的分布值（和、平均值、方差等）</span><br></pre></td></tr></table></figure>
<ul>
<li>获取Excel文件下所有的sheet名称<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读取所有Sheet</span><br><span class="line">df = pd.read_excel(&#x27;456.xlsx&#x27;, sheet_name=None)</span><br><span class="line"># 第一种</span><br><span class="line">for i in df.keys():</span><br><span class="line">    print(i)</span><br><span class="line"># 第二种</span><br><span class="line">df = pd.read_excel(&#x27;456.xlsx&#x27;, sheet_name=None)</span><br><span class="line">print(list(df))</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="三、数据预处理"><a href="#三、数据预处理" class="headerlink" title="三、数据预处理"></a>三、数据预处理</h3><ul>
<li><p>多个Series合并成DataFrame：pd.DataFrame(list(zip(series_1, series_2)))</p>
</li>
<li><p>python在字符串前面加0：str(1).zfill(2)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.info() 可显示表中哪个数据为空</span><br><span class="line">df.isnull() 方法可以判断哪个值是缺失值，如果缺失返回True，否则为False</span><br><span class="line">df.dropna() 默认删除含缺失值的行</span><br><span class="line">df.dropna(how=’all’) 删除全为空值的行，不全为空值的行不会删除</span><br><span class="line">df.fillna(0) 用0填充所有空值</span><br><span class="line">df.fillna(&#123;‘性别’:’男’,’年龄’:’30’&#125;) 对性别列中空值填充男，年龄填充30</span><br></pre></td></tr></table></figure></li>
<li><p>通过随机选择非缺失值来填充缺失值<br>foo[‘A’].apply(lambda x: np.random.choice(<br>[x for x in range(min(foo[‘A’]),max(foo[‘A’])]) if (np.isnan(x)) else x)</p>
</li>
<li><p>按一列数据填充另一列数据中的缺失值<br>df_real[‘净含量’] = df_real[‘净含量’].fillna(df_real[‘净含量_y’])</p>
</li>
<li><p>df1.combine_first(df2)：将df2的非缺失值填充df1中的缺失（dataframe根据列名和索引）值；<br>ser1.combine_first(ser2)：用ser2的非缺失值填充ser1中的缺失值（series根据索引）</p>
</li>
<li><p>按指定的字符合并多列：df[‘A’].str.cat([df[‘B’], df[‘C’]], sep=’-‘)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.drop_duplicates(inplace=True) 默认对所有值进行重复值检查，保留第一行的值，inplace=True表示直接在原来的DataFrame上删除重复项，而默认值False表示生成一个副本。</span><br><span class="line">df.drop_duplicates(subset=’性别’) 对性别列中重复值查询保留第一行</span><br><span class="line">df.drop_duplicates(subset=[’性别’,’公司’]，keep=’last’) 对性别和公司两列查重</span><br><span class="line">keep设置默认为first（保留第一个），可设置为last（保留最后一个） 或False(都不保留)</span><br><span class="line">df[‘ID’].dtype 查看ID列的数据类型</span><br><span class="line">df[‘ID’].astype(‘float’) 将ID列的数据类型转换为float类型</span><br><span class="line">数据类型：int、float、object、string、unicode、datetime</span><br><span class="line">df[‘ID’][1] ID列的第二个数据</span><br><span class="line">df.columns=[‘大写’,’小写’,’中文’] 为无索引表添加列索引</span><br><span class="line">df.index=[1,2,3] 添加行索引</span><br><span class="line">df.set_index(‘编号’) 指明要用的列作为行索列</span><br><span class="line">df.rename(index=&#123;‘订单编号’:’新订单编号’,’客户姓名’:’新客户姓名’&#125;) 对行索引进行重新命名</span><br><span class="line">df.rename(columns=&#123;1:’一’,2:’二’&#125;) 对列索引进行一次性重新命名所有列名</span><br><span class="line">如果你需要做的仅仅是将空格换成下划线，那么更好的办法是使用str.replace()方法，这是因为你都不需要输入所有的列名：</span><br><span class="line">df.columns = df.columns.str.replace(   ,  _ )</span><br><span class="line">df.reset_index() 默认将全部index转化为column,</span><br><span class="line">df.reset_index(level=0) 将0级索引转化为column</span><br><span class="line">df.reset_index(drop=True) 删除原有索引</span><br></pre></td></tr></table></figure></li>
<li><p>多列合并为一行<br>df = pd.DataFrame({‘id_part’:[‘a’,’b’,’c’,’d’], ‘pred’:[0.1,0.2,0.3,0.4], ‘pred_class’:[‘women’,’man’,’cat’,’dog’], ‘v_id’:[‘d1’,’d2’,’d3’,’d1’]})<br>df.groupby([‘v_id’]).agg({‘pred_class’: [‘, ‘.join],’pred’: lambda x: list(x),’id_part’: ‘first’}).reset_index()</p>
</li>
<li><p>字符串转换为数值<br>df = pd.DataFrame({‘列1’:[‘1.1’,’2.2’,’3.3’],’列2’:[‘4.4’,’5.5’,’6.6’],’列3’:[‘7.7’,’8.8’,’-‘]})<br>df.astype({‘列1’:’float’,’列2’:’float’}).dtypes<br>用这种方式转换第三列会出错，因为这列里包含一个代表 0 的下划线，pandas 无法自动判断这个下划线。为了解决这个问题，可以使用 to_numeric() 函数来处理第三列，让 pandas 把任意无效输入转为 NaN。<br>df = df.apply(pd.to_numeric, errors=’coerce’).fillna(0)</p>
</li>
<li><p>优化 DataFrame 对内存的占用<br>方法一：只读取切实所需的列，使用usecols参数<br>cols = [‘beer_servings’,’continent’]<br>small_drinks = pd.read_csv(‘data/drinks.csv’, usecols=cols)<br>方法二：把包含类别型数据的 object 列转换为 Category 数据类型，通过指定 dtype 参数实现。<br>dtypes ={‘continent’:’category’}<br>smaller_drinks = pd.read_csv(‘data/drinks.csv’,usecols=cols, dtype=dtypes)</p>
</li>
<li><p>把字符串分割为多列<br>df = pd.DataFrame({‘姓名’:[‘张 三’,’李 四’,’王 五’],’所在地’:[‘北京-东城区’,’上海-黄浦区’,’广州-白云区’]})<br>df.姓名.str.split(‘ ‘, expand=True)</p>
</li>
<li><p>把 Series 里的列表转换为 DataFrame<br>df = pd.DataFrame({‘列1’:[‘a’,’b’,’c’],’列2’:[[10,20], [20,30], [30,40]]})<br>df_new = df.列2.apply(pd.Series)<br>pd.concat([df,df_new], axis=’columns’)</p>
</li>
<li><p>DataFrame迭代：<br>iterrows():将DataFrame迭代为(insex, Series)对。<br>iteritems():将DataFrame迭代为(列名, Series)对。<br>itertuples(): 将DataFrame迭代为元组。<br>for row in df.itertuples():<br>  print(row)<br>  print(‘—————-‘)<br>  print(getattr(row,’col1’), getattr(row,’col2’))<br>getattr() 函数用于返回一个对象属性值。</p>
</li>
</ul>
<h3 id="四、数据选择"><a href="#四、数据选择" class="headerlink" title="四、数据选择"></a>四、数据选择</h3><ul>
<li><p>Query是pandas的过滤查询函数，使用布尔表达式来查询DataFrame的列，就是说按照列的规则进行过滤操作。<br>pandas.DataFrame.query(self, expr, inplace = False, **kwargs)<br>expr：要评估的查询字符串；<br>inplace=False：查询是应该修改数据还是返回修改后的副本<br>kwargs：dict关键字参数<br>比如要查列<code>value_1</code>&lt;<code>value_2</code>的行记录：df.query(‘value_1 &lt; value_2’)<br>查询列<code>year</code>&gt;=2016的行记录：df.query(‘year &gt;= 2016 ‘)</p>
</li>
<li><p>Insert用于在DataFrame的指定位置中插入新的数据列。默认情况下新列是添加到末尾的，但可以更改位置参数，将新列添加到任何位置。<br>Dataframe.insert(loc, column, value, allow_duplicates=False)<br>loc: int型，表示插入位置在第几列；若在第一列插入数据，则 loc=0<br>column: 给插入的列取名，如 column=’新的一列’<br>value：新列的值，数字、array、series等都可以<br>allow_duplicates: 是否允许列名重复，选择Ture表示允许新的列名与已存在的列名重复<br>在第三列的位置插入新列：df.insert(2, ‘new_col’, new_col)</p>
</li>
<li><p>Cumsum是pandas的累加函数，用来求列的累加值。 用法：<br>DataFrame.cumsum(axis=None, skipna=True, args, kwargs)<br>axis：index或者轴的名字<br>skipna：排除NA/null值<br>df中的group列有A、B、C三组，year列有多个年份。我们只知道当年度的值value_1、value_2，现在求group分组下的累计值，比如A、2014之前的累计值，可以用cumsum函数来实现。<br>当然仅用cumsum函数没办法对groups (A, B, C)进行区分，所以需要结合分组函数groupby分别对(A, B, C)进行值的累加。<br>df[‘cumsum_2’] = df[[‘value_2’,’group’]].groupby(‘group’).cumsum()</p>
</li>
<li><p>Sample用于从DataFrame中随机选取若干个行或列。 用法：<br>DataFrame.sample(n=None, frac=None, replace=False, weights=None, random_state=None, axis=None)<br>n：要抽取的行数<br>frac：抽取行的比例 例如frac=0.8，就是抽取其中80%<br>replace：是否为有放回抽样， True:有放回抽样 False:未放回抽样<br>weights：字符索引或概率数组<br>random_state ：随机数发生器种子<br>axis：选择抽取数据的行还是列 axis=0:抽取行 axis=1:抽取列<br>从df中随机抽取5行：df.sample(n=5)<br>从df随机抽取60%的行，并且设置随机数种子，每次能抽取到一样的样本：df.sample(frac=0.6,random_state=2)</p>
</li>
<li><p>Where用来根据条件替换行或列中的值。如果满足条件，保持原来的值，不满足条件则替换为其他值。默认替换为NaN，也可以指定特殊值。<br>DataFrame.where(cond, other=nan, inplace=False, axis=None, level=None, errors=’raise’, try_cast=False, raise_on_error=None)<br>cond：布尔条件，如果 cond 为真，保持原来的值，否则替换为other<br>other：替换的特殊值<br>inplace：inplace为真则在原数据上操作，为False则在原数据的copy上操作<br>axis：行或列<br>将df中列value_1里小于5的值替换为0：df[‘value_1’].where(df[‘value_1’] &gt; 5 , 0)</p>
</li>
<li><p>得到DataFrame中重复的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data=&#123;&#x27;one&#x27;:[1,1,2,2,1,2,2],&#x27;two&#x27;:[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]&#125;</span><br><span class="line">frame=pd.DataFrame(data)</span><br><span class="line">print(&quot;原始数据&quot;)</span><br><span class="line">print(frame)</span><br><span class="line">data1 = frame.drop_duplicates(subset=[&#x27;two&#x27;],keep=&#x27;first&#x27;)</span><br><span class="line">print(&quot;去重后的数据&quot;)</span><br><span class="line">print(data1)</span><br><span class="line">a = frame.drop_duplicates(subset=[&#x27;two&#x27;],keep=&#x27;last&#x27;)</span><br><span class="line">b = frame.drop_duplicates(subset=[&#x27;two&#x27;],keep=False)</span><br><span class="line">c=a.append(b).drop_duplicates(subset=[&#x27;two&#x27;],keep=False)</span><br><span class="line">print(&quot;重复的数据&quot;)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li>
<li><p>索引切片</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[[‘ID’,’姓名’]] 多个列名要装入list</span><br><span class="line">df.iloc[[1,3],[2,4]] 用行列编号选择数据</span><br><span class="line">df.iloc[1,1] 选取表中的第3行2列数据，第一行默认为列索引</span><br><span class="line">df.iloc[:,0:4] #获取第1列到第4列的值</span><br><span class="line">df.loc[‘一’] #loc用行名选取的行数据，格式是Series，但可以用列表形式访问</span><br><span class="line">df.loc[‘一’][0] 或 df.loc[‘一’][‘序号’]</span><br><span class="line">df.iloc[1]#iloc用行编号选取行数据</span><br><span class="line">df.iloc[[1,3]]#多行编号选取行数据，要用list封装，不然变成行列选取</span><br><span class="line">df.iloc[1:3]#选择第二行和第四行</span><br><span class="line">df[df[‘年龄’]&lt;45] #加判断条件返回符合条件的全部数据，不局限年龄列</span><br><span class="line">df[(df[‘年龄’]&lt;45)&amp;(df[‘ID’]&lt;4)] #判断多条件选择数据</span><br><span class="line">df.iloc[[1,3],[2,4]] 相当于df.loc[[‘一’,’二’],[‘年龄’,’ID’]] #loc是名，iloc是编号</span><br><span class="line">df[df[‘年龄’]&lt;45][[‘年龄’,’ID’]]#先通过年龄条件选择行，再通过不同索引指定列</span><br><span class="line">df.iloc[1:3,2:4]#切片索引</span><br></pre></td></tr></table></figure></li>
<li><p>pandas 筛选时间日期数据</p>
<p>这里筛选2020年5月的数据为例：<br>首先将日期格式化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[&#x27;日期&#x27;]=data[&quot;日期&quot;].values.astype(&#x27;datetime64&#x27;)  #如果已为日期格式则此步骤可省略</span><br><span class="line">import datetime</span><br><span class="line">s_date = datetime.datetime.strptime(&#x27;2020-04-30&#x27;, &#x27;%Y-%m-%d&#x27;).date()  #起始日期</span><br><span class="line">e_date = datetime.datetime.strptime(&#x27;2020-06-01&#x27;, &#x27;%Y-%m-%d&#x27;).date()  #结束日期</span><br></pre></td></tr></table></figure>
<p>第一种方法，用逻辑运算符号’&gt;’ ‘&lt;’和’&amp;’：</p>
<p>Pandasdatetime64[ns]不能直接与datetime.date相比，需要用pd.Timestamp进行转化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[(data.日期&gt;pd.Timestamp(s_date))&amp;(data.日期&lt;pd.Timestamp(e_date))]</span><br></pre></td></tr></table></figure>
<p>第二种，用比较函数’gt’’lt’和’&amp;’:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[(data[&#x27;日期&#x27;].lt(pd.Timestamp(e_date)))&amp;(data[&#x27;日期&#x27;].gt(pd.Timestamp(s_date)))]</span><br></pre></td></tr></table></figure>
<p>第三种，用apply函数实现:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id_a=data.日期.apply(lambda x: x.year ==2020  and x.month==5)</span><br><span class="line">data[id_a]</span><br></pre></td></tr></table></figure>
<p>第四种，用between函数实现:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id_b=data.日期.between(pd.Timestamp(s_date),pd.Timestamp(e_date))</span><br><span class="line">data[id_b]</span><br></pre></td></tr></table></figure></li>
<li><p>行序、列序反转 ：行序反转最直接的办法是使用loc函数并传递::-1，跟Python中列表反转时使用的切片符号一致<br>df.loc[::-1].reset_index(drop=True)<br>列序反转就比较容易了，只需要如下操作：df.loc[:, ::-1]</p>
</li>
<li><p>分组里最大值所在的行方法<br>分为分组中有重复值和无重复值两种。无重复值的情况。<br>df = pd.DataFrame({‘Sp’:[‘a’,’b’,’c’,’d’,’e’,’f’], ‘Mt’:[‘s1’, ‘s1’, ‘s2’,’s2’,’s2’,’s3’], ‘Value’:[1,2,3,4,5,6], ‘Count’:[3,2,5,10,10,6]})<br>df.iloc[df.groupby([‘Mt’]).apply(lambda x: x[‘Count’].idxmax())]<br>先按Mt列进行分组，然后对分组之后的数据框使用idxmax函数取出Count最大值所在的列，再用iloc位置索引将行取出。有重复值的情况<br>df[“rank”] = df.groupby(“ID”)[“score”].rank(method=”min”, ascending=False).astype(np.int64)<br>df[df[“rank”] == 1][[“ID”, “class”]]<br>对ID进行分组之后再对分数应用rank函数，分数相同的情况会赋予相同的排名，然后取出排名为1的数据。</p>
</li>
<li><p>选择特定类型的列<br>drinks = pd.read_csv(‘data/drinks.csv’)<br>选择所有数值型的列<br>drinks.select_dtypes(include=[‘number’]).head()<br>选择所有字符型的列<br>drinks.select_dtypes(include=[‘object’]).head()<br>drinks.select_dtypes(include=[‘number’,’object’,’category’,’datetime’]).head()<br>用 exclude 关键字排除指定的数据类型<br>drinks.select_dtypes(exclude=[‘number’]).head()</p>
</li>
<li><p>根据最大的类别筛选 DataFrame<br>movies = pd.read_csv(‘data/imdb_1000.csv’)<br>counts = movies.genre.value_counts()<br>movies[movies.genre.isin(counts.nlargest(3).index)].head()</p>
</li>
<li><p>基于字符串的长度来筛选数据<br>df[df.col1.str.len() &gt; 20].head()</p>
</li>
<li><p>标注重点<br>df_new.style.highlight_max(axis = 0, color = “yellow”)</p>
</li>
</ul>
<h3 id="五、数值操作"><a href="#五、数值操作" class="headerlink" title="五、数值操作"></a>五、数值操作</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[‘年龄’].replace(100,33)#对年龄列中的100替换成33</span><br><span class="line">df.replace(np.NaN,0)#相当于fillna(),其中np.NaN是python中缺省值的表示方式</span><br><span class="line">df.replace([A,B],C)#多对一替换，A、B替换成C</span><br><span class="line">df.replace(&#123;‘A’:’a’,‘B’:’b’,‘C’:’c’&#125;)#多对多替换</span><br><span class="line">df.sort_values(by=[&#x27;申请单编号&#x27;],ascending=False)#申请单编号列降序排列，Ture升序排列（默认）</span><br><span class="line">df.sort_values(by=[&#x27;申请单编号&#x27;],na_position=’first’)#申请单编号列升序排列，缺失值排在第一位</span><br><span class="line">默认缺失值在最后一位last</span><br><span class="line">df = pd.DataFrame([[&#x27;A&#x27;,1],[&#x27;A&#x27;,3],[&#x27;A&#x27;,2],[&#x27;B&#x27;,5],[&#x27;B&#x27;,9]], columns = [&#x27;name&#x27;,&#x27;score&#x27;])</span><br><span class="line">df.sort_values([&#x27;name&#x27;,&#x27;score&#x27;], ascending = [True,False])#多列排序</span><br><span class="line">df.groupby(&#x27;name&#x27;).apply(lambda x: x.sort_values(&#x27;score&#x27;,ascending=False)).reset_index(drop=True)</span><br></pre></td></tr></table></figure>
<ul>
<li>Pct_change是一个统计函数，用于表示当前元素与前面元素的相差百分比，两元素的区间可以调整。<br>比如说给定三个元素[2,3,6]，计算相差百分比后得到[NaN, 0.5, 1.0]，从第一个元素到第二个元素增加50％，从第二个元素到第三个元素增加100％。<br>DataFrame.pct_change(periods=1, fill_method=‘pad’, limit=None, freq=None, **kwargs)<br>periods：间隔区间，即步长<br>fill_method：处理空值的方法<br>对df的value_1列进行增长率的计算：df.value_1.pct_change()</li>
</ul>
<ul>
<li> pandas 进行组内排序、单组排序、标号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[‘销量’].rank(method=’first’)#销量排名（不是排序），method有first\min\max\average</span><br><span class="line">组内进行排序(按user_id分组后对product_id排序)</span><br><span class="line">data1[&#x27;group_sort&#x27;]=data1[&#x27;product_id&#x27;].groupby(data1[&#x27;user_id&#x27;]).rank(ascending=1,method=&#x27;first&#x27;)</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.drop([‘销量’,’ID’],axis=1)#删除列,直接是列名,inpace=True是保留修改哦</span><br><span class="line">df.drop(df.columns[[4,5]],axis=1)#删除列,是编号</span><br><span class="line">df.drop(colums=[‘销量’,’ID’])#此种方式删除列，可以不写axis=1</span><br><span class="line">df.drop([‘a’,’b’],axis=0)#删除行,直接是列名</span><br><span class="line">df.drop(df.index[[4,5]],axis=0)#删除行,是编号</span><br><span class="line">df.drop(index=[‘a’,’b’])#此种方式删除行，可以不写axis=0</span><br><span class="line">df[‘ID’].value_counts()#对ID列中数据出现的次数进行统计</span><br><span class="line">df[‘ID’].value_counts(normalize=Ture,sort=False)#对ID列中数据出现的次数占比进行统计，并降序排序</span><br><span class="line">df[‘ID’].unique()#获取列的唯一值</span><br><span class="line">df[‘年龄’].isin([‘a’,11])#查看这列中是否包含a或11</span><br><span class="line">pd.cut(df[‘ID’],bins=[0,3,6,10])#用bins指明切分区间</span><br><span class="line">pd.qcut(df[‘ID’],3)#ID列切分成3个部分，每部分数据个数尽量一致</span><br><span class="line">df.insert(2,’商品’,[‘书’,’笔’,’计算器’])#插入第三列</span><br><span class="line">df[’商品’]=[‘书’,’笔’,’计算器’])#插新列，在表的最后面</span><br><span class="line">df.T行列互换</span><br><span class="line">df.tack()#把表格型数据转化成树形数据</span><br><span class="line">df.set_index([‘ID’,’姓名’]).stack().reset_index()#宽表转换成长表，先将共同列设置成行索引，再对其他列</span><br><span class="line">进行转化成树形数据，再重置行索引</span><br></pre></td></tr></table></figure>
<ul>
<li><p>堆叠：pd.DataFrame.stack(self, level=-1, dropna=True)，level默认为-1是将最内层col堆叠为索引的最内层，为0是将最外层col堆叠为索引的最内层，从最外层开始依次的level值为0，1，2…的顺序来指定对应col。当然直接指定索引名称或许是更好的选择。</p>
</li>
<li><p>反堆叠、拆堆：pd.DataFrame.unstack(self, level=-1, fill_value=None)，默认将最内层的索引拆堆到列的最内层，其他同理stack()；</p>
</li>
<li><p>df.melt(id_vars=[‘ID’,’姓名’],var_name=’year’,value_name=’sale’)<br>id_var参数指明宽表转换成长表时保持不变的列，var_name参数表示原来的列索引转化为行索引对应的列名，value_name表示新索引对应值的列名<br>df[‘C1’].apply(lambda x:x+1)#相当于map(),只是需要和lambda配合<br>df.applymap(lambda x:x+1),对表中的所有数据执行相同函数运算</p>
</li>
<li><p>apply搭配匿名函数lambda的神奇用法：<br>df[‘数据3’] = df.apply(lambda x:(x.数据1-x.数据2)/x.上月 if x.col3!=0 else 0 ,axis=1)</p>
</li>
<li><p>删除包含特定字符串所在的<br>行：df[‘b’].values.astype(‘str’) 先转为字符串格式最好；<br>df[df[‘b’].str.contains(‘exp’,na=False)]</p>
</li>
<li><p>计算变量缺失率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def missing_cal(df):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    df :数据集</span><br><span class="line">    return：每个变量的缺失率</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    missing_series = df.isnull().sum()/df.shape[0]</span><br><span class="line">    missing_df = pd.DataFrame(missing_series).reset_index()</span><br><span class="line">    missing_df = missing_df.rename(columns=&#123;&#x27;index&#x27;:&#x27;col&#x27;,</span><br><span class="line">    0:&#x27;missing_pct&#x27;&#125;)</span><br><span class="line">    missing_df = 	missing_df.sort_values(&#x27;missing_pct&#x27;,ascending=False).reset_index(drop=True)</span><br><span class="line">    return missing_df</span><br><span class="line">missing_cal(df)</span><br><span class="line">如果需要计算样本的缺失率分布，只要加上参数axis=1。</span><br></pre></td></tr></table></figure>
<h3 id="六、数据运算"><a href="#六、数据运算" class="headerlink" title="六、数据运算"></a>六、数据运算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df[‘ID’]+Df[‘ID’]#可进行加减乘除</span><br><span class="line">df[‘ID’]&gt;Df[‘ID’]#可进行&gt; &lt; == !=等比较运算</span><br><span class="line">df.nunique()#统计每列不重复值的个数</span><br><span class="line">df.count()#统计每列的非空值的个数</span><br><span class="line">df.count(axis=1)#统计每行的非空值的个数</span><br><span class="line">df[‘ID’].count()#统计指定列的非空值的个数</span><br><span class="line">df.sum(axis=1)#每列/行求和结果</span><br><span class="line">df.mean(axis=1)#每列/行求均值</span><br><span class="line">df.max(axis=1)#每列/行求最大值</span><br><span class="line">df.min(axis=1)#每列/行求最小值</span><br><span class="line">df.median(axis=1)#每列/行求中间值</span><br><span class="line">df.mode(axis=1)#每列/行中出现最多的值</span><br><span class="line">df.var(axis=1)#每列/行求方差</span><br><span class="line">df.std(axis=1)#每列/行求标准差</span><br><span class="line">df.quantile(0.25)#求1/4分位数，可以0.5、0.75等分位数</span><br><span class="line">df.corr()#求整个DataFrame表中的相关性</span><br></pre></td></tr></table></figure>
<h3 id="七、时间序列"><a href="#七、时间序列" class="headerlink" title="七、时间序列"></a>七、时间序列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from datetime import datetime</span><br><span class="line">datatime.now()#返回现在的时间年月日时分秒</span><br><span class="line">datatime.now().year#返回年，可以.month\.day</span><br><span class="line">datatime.now().weekday()-1#返回周几</span><br><span class="line">datatime.now().isocalendar()#返回周数</span><br><span class="line">（2018，41，7）#2018年的第41周第7天</span><br><span class="line">datatime.now().date()#只返回年月日</span><br><span class="line">datatime.now().time()#只返回时间</span><br><span class="line">datatime.now().strftime(‘%Y-%m-%d %H:%M:%S’)#返回2020-03-13 09:09:12</span><br><span class="line">pd.to_datetime([&#x27;201221&#x27;],format = &quot;%Y%m%d&quot;)#返回DatetimeIndex([&#x27;2012-02-01&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=None)</span><br><span class="line">pd.to_datetime(&#x27;201221&#x27;,format = &quot;%Y%m%d&quot;)#不加列表，返回Timestamp(&#x27;2012-02-01 00:00:00&#x27;)，需要省去时分秒可以在后面加.strftime(&quot;%Y-%m-%d&quot;)</span><br><span class="line">from dateutil.parser import parse</span><br><span class="line">parse(str_time)#将字符串的时间转化成为时间格式</span><br><span class="line">pd.Datetimeindex([‘2020-02-03’,2020-03-05’])#设置时间索引</span><br><span class="line">data[‘2018’]#获取2018年的数据</span><br><span class="line">data[‘2018-01’]#获取2018年1月的数据</span><br><span class="line">data[‘2018-01-05’:‘2018-01-15’]#获取这个时段的数据</span><br><span class="line">非时间索引的表格处理</span><br><span class="line">df[df[‘成交时间’]==datetime(2018,08,05)]</span><br><span class="line">df[df[‘成交时间’]&gt;datetime(2018,08,05)]</span><br><span class="line">df[(df[‘成交时间’]&gt;datetime(2018,08,05))&amp;(df[‘成交时间’] &lt;datetime(2018,08,15))]</span><br><span class="line">cha=datatime(2018,5,21,19,50)-datatime(2018,5,18,17,50)</span><br><span class="line">cha.days#返回天的时间差</span><br><span class="line">cha.seconds#返回秒的时间差</span><br><span class="line">cha.seconds/3600#返回小时的时间差</span><br><span class="line">datatime(2018,5,21,19,50)+timedelta(days=1)#往后移一天</span><br><span class="line">datatime(2018,5,21,19,50)+timedelta(seconds=20)#往后移20秒</span><br><span class="line">datatime(2018,5,21,19,50)-timedelta(days=1)#往前移一天</span><br></pre></td></tr></table></figure>
<p>日期时间类型接口一览表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = generate_sample_data_datetime().reset_index()</span><br><span class="line">df = df.sample(500)</span><br><span class="line">df[&quot;Year&quot;] = df[&quot;index&quot;].dt.year</span><br><span class="line">df[&quot;Month&quot;] = df[&quot;index&quot;].dt.month</span><br><span class="line">df[&quot;Day&quot;] = df[&quot;index&quot;].dt.day</span><br><span class="line">df[&quot;Hour&quot;] = df[&quot;index&quot;].dt.hour</span><br><span class="line">df[&quot;Minute&quot;] = df[&quot;index&quot;].dt.minute</span><br><span class="line">df[&quot;Second&quot;] = df[&quot;index&quot;].dt.second</span><br><span class="line">df[&quot;Nanosecond&quot;] = df[&quot;index&quot;].dt.nanosecond</span><br><span class="line">df[&quot;Date&quot;] = df[&quot;index&quot;].dt.date</span><br><span class="line">df[&quot;Time&quot;] = df[&quot;index&quot;].dt.time</span><br><span class="line">df[&quot;Time_Time_Zone&quot;] = df[&quot;index&quot;].dt.timetz</span><br><span class="line">df[&quot;Day_Of_Year&quot;] = df[&quot;index&quot;].dt.dayofyear</span><br><span class="line">df[&quot;Week_Of_Year&quot;] = df[&quot;index&quot;].dt.weekofyear</span><br><span class="line">df[&quot;Week&quot;] = df[&quot;index&quot;].dt.week</span><br><span class="line">df[&quot;Day_Of_week&quot;] = df[&quot;index&quot;].dt.dayofweek</span><br><span class="line">df[&quot;Week_Day&quot;] = df[&quot;index&quot;].dt.weekday</span><br><span class="line">df[&quot;Week_Day_Name&quot;] = df[&quot;index&quot;].dt.weekday_name</span><br><span class="line">df[&quot;Quarter&quot;] = df[&quot;index&quot;].dt.quarter</span><br><span class="line">df[&quot;Days_In_Month&quot;] = df[&quot;index&quot;].dt.days_in_month</span><br><span class="line">df[&quot;Is_Month_Start&quot;] = df[&quot;index&quot;].dt.is_month_start</span><br><span class="line">df[&quot;Is_Month_End&quot;] = df[&quot;index&quot;].dt.is_month_end</span><br><span class="line">df[&quot;Is_Quarter_Start&quot;] = df[&quot;index&quot;].dt.is_quarter_start</span><br><span class="line">df[&quot;Is_Quarter_End&quot;] = df[&quot;index&quot;].dt.is_quarter_end</span><br><span class="line">df[&quot;Is_Leap_Year&quot;] = df[&quot;index&quot;].dt.is_leap_year</span><br></pre></td></tr></table></figure>
<h3 id="八、数据透视表"><a href="#八、数据透视表" class="headerlink" title="八、数据透视表"></a>八、数据透视表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.groupby(‘客户分类’).count()#客户分类后求数运算</span><br><span class="line">df.groupby(‘客户分类’).sum()#客户分类后求和运算</span><br><span class="line">df.groupby(‘客户分类’,’区域分类’).sum()#多列分类后求和运算</span><br><span class="line">df.groupby(‘客户分类’,’区域分类’)[‘ID’].sum()#多列分类后ID求和运算</span><br><span class="line">df[‘ID’]#DataFrame取出一列就是Series类型</span><br><span class="line">df.groupby(df[‘ID’]).sum() 相当于 df.groupby(‘ID’).sum（）</span><br><span class="line">df.groupby(‘客户分类’).aggregate([‘sum’,’count’]# aggregate可实现多种汇总方式</span><br><span class="line">df.groupby(‘客户分类’).aggregate(&#123;‘ID’：‘count’,’销量’： ‘sum’&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>用多个函数聚合<br>df.groupby(‘order_id’).item_price.agg([‘sum’,’count’]).head()</p>
</li>
<li><p>aggregate可针对不同列做不同的汇总运算<br>df.groupby(‘客户分类’).sum().reset_index()#分组汇总后再重置索引，变为标准DataFrame<br>pd.pivot_table(data,values,index,columms,aggfunc,fill_value,margins,dropna,margins_name)<br>数据透视表，data:数据表df,values:值，index:行索引，columns:列索引，aggfunc:values的计算类型，fill_value:对空值的填充方式；margins:是否有合计列；margins_name:合计列的列名<br>pd.pivot_table(df,values=[’ID’,‘销量’],index=’客户分类’,columms=‘区域’,aggfunc={‘ID’：‘count’,’销量’：‘sum’}),fill_value=0,margins=Ture,dropna=None,margins_name=’总计’)</p>
</li>
<li><p>分组聚合 dict(list(df.groupby(‘key1’)))<br>通过字典或Series进行分组<br>people = pd.DataFrame(np.random.randn(5, 5),columns=[‘a’, ‘b’, ‘c’, ‘d’, ‘e’],index=[‘Joe’, ‘Steve’, ‘Wes’, ‘Jim’, ‘Travis’])<br>mapping = {‘a’:’red’, ‘b’:’red’, ‘c’:’blue’, ‘d’:’blue’, ‘e’:’red’, ‘f’:’orange’}<br>by_column = people.groupby(mapping, axis=1)<br>by_column.sum()</p>
</li>
</ul>
<h3 id="九、多表格拼接"><a href="#九、多表格拼接" class="headerlink" title="九、多表格拼接"></a>九、多表格拼接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pd.merge(df1,df2)#默认自动寻找两个表中的公共列进行拼接</span><br><span class="line">pd.merge(df1,df2,on=“学号“)#on来指定连接列，连接列要是公共列</span><br><span class="line">pd.merge(df1,df2,on=[‘学号’,’姓名’]#on来指定连接列，连接列要是公共列</span><br><span class="line">pd.merge(df1,df2,left_on=‘学号’right_on=’编号’) #由公共列，但类名不同时用左右键指定 </span><br><span class="line">pd.merge(df1,df2,left_index=‘学号’right_index=’编号’)#两表公共列都是索引列时</span><br><span class="line">pd.merge(df1,df2,left_index=‘学号’right_on=’编号’)#公共列一个时索引列一个时普通列 </span><br><span class="line">pd.merge(df1,df2,on=’学号’,how=’inner’)#返回公共列中对应的公共值拼接（内连接）</span><br><span class="line">pd.merge(df1,df2,on=’学号’,how=’left’)#返回公共列中对应的左表值（左连接）</span><br><span class="line">pd.merge(df1,df2,on=’学号’,how=’right’)#返回公共列中对应的右表值（右连接）</span><br><span class="line">pd.merge(df1,df2,on=’学号’,how=’outer’)#返回公共列中对应的所有值（外连接）</span><br><span class="line">pd.concat([df1,df2])#两个结构相同的表纵向连接，保留原索引值</span><br><span class="line">pd.concat([df1,df2]，ignore_index=True)#两个结构相同的表纵向连接，重新设置索引值</span><br><span class="line">pd.concat([df1,df2]，ignore_index=True).drop_duplicates()#拼接后去掉重复值</span><br></pre></td></tr></table></figure>

<h3 id="十、导出文件"><a href="#十、导出文件" class="headerlink" title="十、导出文件"></a>十、导出文件</h3><p>df.to_excel(excel_writer=r’C:\users\zhoulifu\Desktop\测试.xlsx’,sheet_name=’文档’，index=False,columns=[‘ID’,’销量’,‘姓名’],encoding=’utf-8’,na_rep=0)</p>
<ul>
<li>excel_writer参数指定文件路径，导出时去掉索引，设置导出的列，指定文件编码，na_rep缺失值填充<br>writer=pd.ExcelWriter(excelpath,engine=’xlsxwirter’)<h3 id="导出多个文件至一个文件的多个sheet；"><a href="#导出多个文件至一个文件的多个sheet；" class="headerlink" title="导出多个文件至一个文件的多个sheet；"></a>导出多个文件至一个文件的多个sheet；</h3></li>
<li>方法1：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">writer=pd.ExcelWriter(excelpath,engine=&#x27;openpyxl&#x27;,mode=&#x27;a&#x27;)</span><br><span class="line">用openpyxl不会删除excel表中原有sheet，更保险！</span><br><span class="line">df1.to_excel(writer,sheet_name=‘表一’，index= False)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li>
<li>方法2：这种方式不会报数据错误<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(path,sheet_name=&#x27;test3&#x27;)</span><br><span class="line">#写入到原Excel表中避免清空其他数据</span><br><span class="line">book = openpyxl.load_workbook(path)   #读取你要写入的workbook</span><br><span class="line">#和pd.read_excel() 用于将Dataframe写入excel。xls用xlwt。xlsx用openpyxl</span><br><span class="line">writer = pd.ExcelWriter(path,engine=&#x27;openpyxl&#x27;)   </span><br><span class="line">##此时的writer里还只是读写器. 然后将上面读取的book复制给writer  </span><br><span class="line">writer.book = book</span><br><span class="line">#转化为字典的形式</span><br><span class="line">writer.sheets = dict((ws.title, ws) for ws in book.worksheets)#返回一个字典，sheet名和sheet对象组成的键值对</span><br><span class="line">#将data写入writer，这里有时候需要对多个变量实现循环写入,可以使用for循环+eval()</span><br><span class="line">df.to_excel(writer,sheet_name=&quot;测试&quot;,index=False)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li>
<li>to_json<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data = df([[&#x27;a&#x27;, &#x27;b&#x27;], [&#x27;c&#x27;, &#x27;d&#x27;]], index=[&#x27;row 1&#x27;, &#x27;row 2&#x27;], columns=[&#x27;col 1&#x27;, &#x27;col 2&#x27;])</span><br><span class="line">json_columns = data.to_json(orient = &quot;columns&quot;) # 返回结果：</span><br><span class="line"> &#x27;&#123;&quot;col 1&quot;:&#123;&quot;row 1&quot;:&quot;a&quot;,&quot;row 2&quot;:&quot;c&quot;&#125;,&quot;col 2&quot;:&#123;&quot;row 1&quot;:&quot;b&quot;,&quot;row 2&quot;:&quot;d&quot;&#125;&#125;&#x27;</span><br><span class="line">json_split = data.to_json(orient = &quot;split&quot;)  # 返回结果：</span><br><span class="line"> &#x27;&#123;&quot;columns&quot;:[&quot;col 1&quot;,&quot;col 2&quot;],&quot;index&quot;:[&quot;row 1&quot;,&quot;row 2&quot;],&quot;data&quot;:[[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]]&#125;&#x27;</span><br><span class="line">json_records = data.to_json(orient = &quot;records&quot;)  # 返回结果：</span><br><span class="line"> &#x27;[&#123;&quot;col 1&quot;:&quot;a&quot;,&quot;col 2&quot;:&quot;b&quot;&#125;,&#123;&quot;col 1&quot;:&quot;c&quot;,&quot;col 2&quot;:&quot;d&quot;&#125;]&#x27;</span><br><span class="line">json_index = data.to_json(orient = &quot;index&quot;)  # 返回结果：</span><br><span class="line">&#x27;&#123;&quot;row 1&quot;:&#123;&quot;col 1&quot;:&quot;a&quot;,&quot;col 2&quot;:&quot;b&quot;&#125;,&quot;row 2&quot;:&#123;&quot;col 1&quot;:&quot;c&quot;,&quot;col 2&quot;:&quot;d&quot;&#125;&#125;&#x27;</span><br><span class="line">json_values = data.to_json(orient = &quot;values&quot;)  # 返回结果： </span><br><span class="line">&#x27;[[&quot;a&quot;,&quot;b&quot;],[&quot;c&quot;,&quot;d&quot;]]&#x27;</span><br></pre></td></tr></table></figure>
• format()函数，与lambda函数配合，可以设置：四舍五入保留小数位、转化为百分数、添加千位分隔符等<br>保留1位小数：df[“A”].map(lambda x: format(x, ‘.1f’))<br>设置百分数，并保留2位小数：df[“A”].map(lambda x: format(x, ‘.2%’))<br>设置千位分隔，并保留3位小数：df[“A”].map(lambda x: format(x, ‘,.3f’))</li>
</ul>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql_tips</title>
    <url>/2021/12/13/mysql-tips/</url>
    <content><![CDATA[<ul>
<li><p>mysql基础<br><a class="link"   href="https://blog.csdn.net/weixin_45108087/article/details/102766281" >https://blog.csdn.net/weixin_45108087/article/details/102766281<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>MYSQL中的COLLATE是什么？<br><a class="link"   href="https://blog.csdn.net/weixin_34194317/article/details/92720517" >https://blog.csdn.net/weixin_34194317/article/details/92720517<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>mysql中key 、primary key 、unique key 与index区别<br><a class="link"   href="https://blog.csdn.net/nanaMasuda/article/details/52543177" >https://blog.csdn.net/nanaMasuda/article/details/52543177<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>MySQL中REGEXP正则表达式<br><a class="link"   href="https://blog.csdn.net/u011271894/article/details/79705869" >https://blog.csdn.net/u011271894/article/details/79705869<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>mysql中distinct后面两个字段:同时作用了两个字段，也就是必须得这两个字段都相同的才会被排除</p>
</li>
<li><p>MySql中把一个表的数据插入到另一个表中<br><a class="link"   href="https://www.cnblogs.com/jiangxiaobo/p/7722691.html" >https://www.cnblogs.com/jiangxiaobo/p/7722691.html<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>Mysql 根据一个表数据更新另外一个表<br><a class="link"   href="https://www.cnblogs.com/wu628/p/4948833.html" >https://www.cnblogs.com/wu628/p/4948833.html<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into table_2 (promotion_price,promotion) SELECT 字段1，字段2，...  FROM table_1 where table_1.id is not in (</span><br><span class="line">select id from  table_2 );</span><br></pre></td></tr></table></figure></li>
<li><p>concat以及group_concat的用法<br><a class="link"   href="https://baijiahao.baidu.com/s?id=1595349117525189591&amp;wfr=spider&amp;for=pc" >https://baijiahao.baidu.com/s?id=1595349117525189591&amp;wfr=spider&amp;for=pc<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>字符串截取总结：left()、right()、substring()、substring_index()<br><a class="link"   href="https://blog.csdn.net/wolinxuebin/article/details/7845917" >https://blog.csdn.net/wolinxuebin/article/details/7845917<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>replace的用法<br><a class="link"   href="https://www.cnblogs.com/to-creat/p/6516375.html" >https://www.cnblogs.com/to-creat/p/6516375.html<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>mysql中join的用法<br><a class="link"   href="https://www.cnblogs.com/beili/p/9140019.html" >https://www.cnblogs.com/beili/p/9140019.html<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>MySQL计算日期的函数DATE_SUB(d,INTERVAL expr type)<br><a class="link"   href="https://blog.csdn.net/sinat_34979528/article/details/54571316" >https://blog.csdn.net/sinat_34979528/article/details/54571316<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>MySQL DATE_ADD() 函数<br><a class="link"   href="https://www.w3school.com.cn/sql/func_date_add.asp" >https://www.w3school.com.cn/sql/func_date_add.asp<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>sql中interval用法总结<br><a class="link"   href="https://blog.csdn.net/weixin_42586373/article/details/107467914" >https://blog.csdn.net/weixin_42586373/article/details/107467914<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>SQL中的cast()函数<br><a class="link"   href="https://www.jianshu.com/p/e8ed290426b6" >https://www.jianshu.com/p/e8ed290426b6<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>MySQL UNION 操作符<br><a class="link"   href="https://www.runoob.com/mysql/mysql-union-operation.html" >https://www.runoob.com/mysql/mysql-union-operation.html<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>ROW_NUMBER() OVER()函数用法详解 （分组排序 例子多）<br><a class="link"   href="https://blog.csdn.net/qq_25221835/article/details/82762416" >https://blog.csdn.net/qq_25221835/article/details/82762416<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>hive中regexp_extract的用法总结<br><a class="link"   href="https://blog.csdn.net/jv_rookie/article/details/55211955" >https://blog.csdn.net/jv_rookie/article/details/55211955<i class="fas fa-external-link-alt"></i></a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>sql数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python-flask疫情数据可视化</title>
    <url>/2021/07/21/python-flask%E7%96%AB%E6%83%85%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<p>Flask是一个轻量级的web框架，看了<a class="link"   href="https://www.bilibili.com/video/BV177411j7qJ" >https://www.bilibili.com/video/BV177411j7qJ<i class="fas fa-external-link-alt"></i></a> 大佬的视频，做的一个疫情可视化项目,（电脑屏幕小看着有点拥挤。大屏展示还是挺好看的），热搜词云的数据找不到网站了，就弄了个表格；自己修改了一些部分，感兴趣的可以去康康视频，后续有时间再写点总结。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3zeoic47abi8.png"
                     
                ></p>
<p>关于flask：<br><a class="link"   href="https://www.cnblogs.com/songboriceboy/category/1867414.html" >https://www.cnblogs.com/songboriceboy/category/1867414.html<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.csdn.net/u014793102/category_9285123.html?spm=1001.2014.3001.5482" >https://blog.csdn.net/u014793102/category_9285123.html?spm=1001.2014.3001.5482<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python-学生信息管理系统（学的是思维）</title>
    <url>/2020/09/16/python-%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%AD%A6%E7%9A%84%E6%98%AF%E6%80%9D%E7%BB%B4%EF%BC%89/</url>
    <content><![CDATA[<h3 id="学生管理系统应具备的功能"><a href="#学生管理系统应具备的功能" class="headerlink" title="学生管理系统应具备的功能"></a>学生管理系统应具备的功能</h3><ul>
<li>添加学生及成绩信息</li>
<li>将学生信息保存到文件中</li>
<li>修改和删除学生信息</li>
<li>查询学生信息</li>
<li>根据学生成绩进行排序</li>
<li>统计学生的总分</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/image-20211219123240293.1zbrdjhj57ts.png"
                     
                ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">filename = &#x27;student.txt&#x27;</span><br><span class="line">def main():</span><br><span class="line">    while True:</span><br><span class="line">        menum()</span><br><span class="line">        choice = int(input(&quot;请选择:&quot;))</span><br><span class="line">        if choice in [0,1,2,3,4,5,6,7]:</span><br><span class="line">            if choice==0:</span><br><span class="line">                answer = input(&quot;您确定要退出系统吗?y/n&quot;)</span><br><span class="line">                if answer == &#x27;y&#x27; or answer == &#x27;Y&#x27;:</span><br><span class="line">                    print(&quot;谢谢您的使用！&quot;)</span><br><span class="line">                    break #退出系统</span><br><span class="line">                else:</span><br><span class="line">                    continue</span><br><span class="line">            elif choice==1:</span><br><span class="line">                insert()</span><br><span class="line">            elif choice==2:</span><br><span class="line">                search()</span><br><span class="line">            elif choice==3:</span><br><span class="line">                delete()</span><br><span class="line">            elif choice==4:</span><br><span class="line">                modify()</span><br><span class="line">            elif choice ==5:</span><br><span class="line">                sort()</span><br><span class="line">            elif choice ==6:</span><br><span class="line">                total()</span><br><span class="line">            elif choice==7:</span><br><span class="line">                show()</span><br><span class="line">def menum():</span><br><span class="line">    print(&quot;===============================学生信息管理系统===============================&quot;)</span><br><span class="line">    print(&quot;----------------------------------功能菜单-----------------------------------&quot;)</span><br><span class="line">    print(&quot;\t\t\t\t\t\t1.录入学生信息&quot;)</span><br><span class="line">    print(&quot;\t\t\t\t\t\t2.查找学生信息&quot;)</span><br><span class="line">    print(&quot;\t\t\t\t\t\t3.删除学生信息&quot;)</span><br><span class="line">    print(&quot;\t\t\t\t\t\t4.修改学生信息&quot;)</span><br><span class="line">    print(&quot;\t\t\t\t\t\t5.排序&quot;)</span><br><span class="line">    print(&quot;\t\t\t\t\t\t6.统计学生总人数&quot;)</span><br><span class="line">    print(&quot;\t\t\t\t\t\t7.显示所有学生信息&quot;)</span><br><span class="line">    print(&quot;\t\t\t\t\t\t0.退出&quot;)</span><br><span class="line">    print(&quot;----------------------------------------------------------------------------&quot;)</span><br><span class="line"></span><br><span class="line">def save(lst):</span><br><span class="line">    try:</span><br><span class="line">        stu_txt = open(filename,&#x27;a&#x27;,encoding=&#x27;utf-8&#x27;)#以追加的模式进行打开</span><br><span class="line">    except:</span><br><span class="line">        stu_txt = open(filename,&#x27;w&#x27;,encoding = &#x27;utf-8&#x27;)</span><br><span class="line">    for item in lst:</span><br><span class="line">        stu_txt.write(str(item)+&#x27;\n&#x27;)</span><br><span class="line">    stu_txt.close()</span><br><span class="line"></span><br><span class="line">def insert():</span><br><span class="line">    student_list = []</span><br><span class="line">    while True:</span><br><span class="line">        id = input(&#x27;请输入ID(如1001):&#x27;)</span><br><span class="line">        if not id:</span><br><span class="line">            break</span><br><span class="line">        name = input(&quot;请输入姓名:&quot;)</span><br><span class="line">        if not name:</span><br><span class="line">            break</span><br><span class="line">        try:</span><br><span class="line">            english_score = int(input(&quot;请输入英语成绩:&quot;))</span><br><span class="line">            python_score= int(input(&quot;请输入Python成绩:&quot;))</span><br><span class="line">            java_score = int(input(&quot;请输入Java成绩:&quot;))</span><br><span class="line">        except:</span><br><span class="line">            print(&quot;输入无效，不是整数类型，请重新输入...&quot;)</span><br><span class="line">            continue</span><br><span class="line">        #将录入的学生信息保存到字典中</span><br><span class="line">        student = &#123;&#x27;id&#x27;:id,&#x27;name&#x27;:name,&#x27;english&#x27;:english_score,&#x27;python&#x27;:python_score,&#x27;java&#x27;:java_score&#125;</span><br><span class="line">        #将学生信息添加到列表中</span><br><span class="line">        student_list.append(student)</span><br><span class="line">        answer = input(&quot;是否将继续添加？y/n\n&quot;)</span><br><span class="line">        if answer==&#x27;y&#x27;:</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            break</span><br><span class="line">    #调用save()函数</span><br><span class="line">    save(student_list)</span><br><span class="line">    print(&quot;学生信息录入完毕！！！&quot;)</span><br><span class="line"></span><br><span class="line">def search():</span><br><span class="line">    student_query = []</span><br><span class="line">    while True:</span><br><span class="line">        id = &#x27;&#x27;</span><br><span class="line">        name = &#x27;&#x27;</span><br><span class="line">        if os.path.exists(filename):</span><br><span class="line">            mode = input(&quot;按ID查找请输入1，按姓名查找请输入2&quot;)</span><br><span class="line">            if mode ==&#x27;1&#x27;:</span><br><span class="line">                id = input(&quot;请输入学生ID&quot;)</span><br><span class="line">            elif mode ==&#x27;2&#x27;:</span><br><span class="line">                name = input(&quot;请输入学生姓名&quot;)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;您的输入有误，请重新输入&quot;)</span><br><span class="line">                search()</span><br><span class="line">            with open(filename,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as rfile:</span><br><span class="line">                student = rfile.readlines()</span><br><span class="line">                for item in student:</span><br><span class="line">                    d = dict(eval(item))</span><br><span class="line">                    if id!=&#x27;&#x27;:</span><br><span class="line">                        if d[&#x27;id&#x27;] == id:</span><br><span class="line">                            student_query.append(d)</span><br><span class="line">                    if name!=&#x27;&#x27;:</span><br><span class="line">                        if d[&#x27;name&#x27;] ==name:</span><br><span class="line">                            student_query.append(d)</span><br><span class="line">            #显示查询结果</span><br><span class="line">            show_student(student_query)</span><br><span class="line">            #清空列表</span><br><span class="line">            student_query.clear()</span><br><span class="line">            answer = input(&quot;是否继续查询y/n\n&quot;)</span><br><span class="line">            if answer==&#x27;y&#x27; or answer==&#x27;Y&#x27;:</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;暂未保存学生信息&quot;)</span><br><span class="line">            return</span><br><span class="line"></span><br><span class="line">def show_student(lst):</span><br><span class="line">    if len(lst) ==0:</span><br><span class="line">        print(&quot;没有查询到学生信息，无数据显示！！！&quot;)</span><br><span class="line">        return</span><br><span class="line">    #定义标题显示格式</span><br><span class="line">    format_title = &#x27;&#123;:^6&#125;\t&#123;:^12&#125;\t&#123;:^8&#125;\t&#123;:^10&#125;\t&#123;:^10&#125;\t&#123;:^8&#125;&#x27;</span><br><span class="line">    print(format_title.format(&#x27;ID&#x27;,&#x27;姓名&#x27;,&#x27;英语成绩&#x27;,&#x27;Python成绩&#x27;,&#x27;Java成绩&#x27;,&#x27;总成绩&#x27;))</span><br><span class="line">    #定义内容显示格式</span><br><span class="line">    format_data = &#x27;&#123;:^6&#125;\t&#123;:^12&#125;\t&#123;:^8&#125;\t&#123;:^10&#125;\t&#123;:^10&#125;\t&#123;:^8&#125;&#x27;</span><br><span class="line">    for item in lst:</span><br><span class="line">        print(format_data.format(item.get(&#x27;id&#x27;),</span><br><span class="line">                                item.get(&#x27;name&#x27;),</span><br><span class="line">                                  item.get(&#x27;english&#x27;),</span><br><span class="line">                                  item.get(&#x27;python&#x27;),</span><br><span class="line">                                  item.get(&#x27;java&#x27;),</span><br><span class="line">                                 int(item.get(&#x27;english&#x27;))+int(item.get(&#x27;python&#x27;))+int(item.get(&#x27;java&#x27;))</span><br><span class="line">                                 ))</span><br><span class="line"></span><br><span class="line">def delete():</span><br><span class="line">    while True:</span><br><span class="line">        student_id = input(&quot;请输入要删除的学生的ID：&quot;)</span><br><span class="line">        if student_id !=&#x27;&#x27;:</span><br><span class="line">            if os.path.exists(filename):</span><br><span class="line">                with open(filename,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">                    student_old = file.readlines()#逐行读取，按行生成一个列表</span><br><span class="line">            else:</span><br><span class="line">                student_old =[]</span><br><span class="line">            flag = False#标记是否删除</span><br><span class="line">            if student_old:#判断原有文件内容是否为空，如果有内容就打开并写入东西</span><br><span class="line">                with open(filename,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as wfile:</span><br><span class="line">                    d=&#123;&#125;</span><br><span class="line">                    for item in student_old:</span><br><span class="line">                        d = dict(eval(item))#将字符串转换为字典</span><br><span class="line">                        if d[&#x27;id&#x27;]!=student_id:</span><br><span class="line">                            wfile.write(str(d)+&quot;\n&quot;)</span><br><span class="line">                        else:</span><br><span class="line">                            flag=True#定义这个标志，同时也没有将变量进行写入，即为删除</span><br><span class="line">                    if flag:</span><br><span class="line">                        print(f&quot;id为&#123;student_id&#125;的学生信息已经被删除。&quot;)</span><br><span class="line">                    else:</span><br><span class="line">                        print(f&quot;没有找到ID为&#123;student_id&#125;的学生信息。&quot;)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;无学生信息。&quot;)</span><br><span class="line">                break</span><br><span class="line">            show()#删完之后要重新显示学生信息</span><br><span class="line">            answer = input(&quot;是否继续删除？y/n\n&quot;)</span><br><span class="line">            if answer==&#x27;y&#x27; or answer == &quot;Y&quot;:</span><br><span class="line">                continue</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">def modify():</span><br><span class="line">    show()</span><br><span class="line">    if os.path.exists(filename):</span><br><span class="line">        with open(filename,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as rfile:</span><br><span class="line">            student_old = rfile.readlines()</span><br><span class="line">    else:</span><br><span class="line">        return</span><br><span class="line">    student_id = input(&quot;请输入要修改的学员的ID：&quot;)</span><br><span class="line">    with open(filename,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as wfile:</span><br><span class="line">        for item in student_old:</span><br><span class="line">            d = dict(eval(item))</span><br><span class="line">            if d[&#x27;id&#x27;]==student_id:#找到要修改的相关id</span><br><span class="line">                print(&quot;找到学生信息，可以修改他的相关信息了！&quot;)</span><br><span class="line">                while True:</span><br><span class="line">                    try:</span><br><span class="line">                        d[&#x27;name&#x27;]=input(&quot;请输入姓名：&quot;)</span><br><span class="line">                        d[&#x27;english&#x27;] =input(&quot;请输入英语成绩：&quot;)</span><br><span class="line">                        d[&#x27;python&#x27;] = input(&quot;请输入Python成绩：&quot;)</span><br><span class="line">                        d[&#x27;Java&#x27;] = input(&quot;请输入Java成绩：&quot;)</span><br><span class="line">                    except:</span><br><span class="line">                        print(&quot;您的输入有误，请重新输入！！！&quot;)</span><br><span class="line">                    wfile.write(str(d)+&quot;\n&quot;)</span><br><span class="line">                    print(&quot;修改成功&quot;)</span><br><span class="line"></span><br><span class="line">            else:</span><br><span class="line">                wfile.write(str(d)+&quot;\n&quot;)</span><br><span class="line">        answer = input(&quot;是否继续修改其他学校信息？y/n\n&quot;)</span><br><span class="line">        if answer==&#x27;y&#x27; or answer ==&#x27;Y&#x27;:</span><br><span class="line">            modify()</span><br><span class="line"></span><br><span class="line">def sort():</span><br><span class="line">    if os.path.exists(filename):</span><br><span class="line">        with open(filename, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as rfile:</span><br><span class="line">            student = rfile.readlines()</span><br><span class="line">        student_new = []</span><br><span class="line">        for item in student:</span><br><span class="line">            d = dict(eval(item))</span><br><span class="line">            student_new.append(d)</span><br><span class="line">    else:</span><br><span class="line">        return</span><br><span class="line">    asc_or_desc = input(&quot;请选择(0.升序 1.降序)&quot;)</span><br><span class="line">    if asc_or_desc==&#x27;0&#x27;:</span><br><span class="line">        asc_or_desc_bool = False</span><br><span class="line">        pass</span><br><span class="line">    elif asc_or_desc==&#x27;1&#x27;:</span><br><span class="line">        asc_or_desc_bool = True</span><br><span class="line">        pass</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;您的输入有误，请重新输入！&quot;)</span><br><span class="line">        sort()</span><br><span class="line">    mode = input(&quot;请选择排序方式(1.按英语成绩排序 2.按Python成绩排序 3.按Java程序排序 0.按总成绩排序)&quot;)</span><br><span class="line">    if mode==&#x27;1&#x27;:</span><br><span class="line">        student_new.sort(key=lambda x:x[&#x27;english&#x27;],reverse=asc_or_desc_bool)</span><br><span class="line">    elif mode==&#x27;2&#x27;:</span><br><span class="line">        student_new.sort(key=lambda x:x[&#x27;python&#x27;],reverse=asc_or_desc_bool)</span><br><span class="line">    elif mode==3:</span><br><span class="line">        student_new.sort(key=lambda x:x[&#x27;java&#x27;],reverse=asc_or_desc_bool)</span><br><span class="line">    elif mode==&#x27;0&#x27;:</span><br><span class="line">        student_new.sort(key=lambda x:x[&#x27;english&#x27;]+x[&#x27;python&#x27;]+x[&#x27;java&#x27;],reverse=asc_or_desc_bool)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;你的输入有误，请重新输入&quot;)</span><br><span class="line">        sort()</span><br><span class="line">    show_student(student_new)</span><br><span class="line"></span><br><span class="line">def total():</span><br><span class="line">    if os.path.exists(filename):</span><br><span class="line">        with open(filename,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as rfile:</span><br><span class="line">            students = rfile.readlines()</span><br><span class="line">            if students:</span><br><span class="line">                print(f&quot;一共有&#123;len(students)&#125;名学生&quot;)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;还没有录入学生信息&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;暂未存学生相关信息&quot;)</span><br><span class="line">def show():</span><br><span class="line">    student_ls = []</span><br><span class="line">    if os.path.exists(filename):</span><br><span class="line">        with open(filename,&#x27;r&#x27;,encoding=&#x27;utf-8&#x27;) as rfile:</span><br><span class="line">            students = rfile.readlines()</span><br><span class="line">            for item in students:</span><br><span class="line">                student_ls.append(eval(item))</span><br><span class="line">            if student_ls:</span><br><span class="line">                show_student(student_ls)</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;还没有保存学生信息&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;没有发现相应数据文件&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ ==&#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<ul>
<li>打包成exe需要在终端激活环境后运行 pip install PyIntaller<br>下载好之后再执行 pyinstaller -F D:\Studentsys\stusystem.py  </li>
</ul>
<p>-F后面是完整路径以及文件名<br><a class="link"   href="https://www.bilibili.com/video/BV1wD4y1o7AS?p=135&amp;spm_id_from=pageDriver" >https://www.bilibili.com/video/BV1wD4y1o7AS?p=135&amp;spm_id_from=pageDriver<i class="fas fa-external-link-alt"></i></a><br>娟姐yyds! </p>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python关联分析（apriori算法）</title>
    <url>/2021/02/28/python%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90%EF%BC%88apriori%E7%AE%97%E6%B3%95%EF%BC%89/</url>
    <content><![CDATA[<p>若两个或多个变量的取值之间存在某种规律性，就称为关联。关联规则是寻找在同一个事件中出现的不同项的相关性，比如在一次购买活动中所买不同商品的相关性。例如：“在购买计算机的顾客中，有30％的人也同时购买了打印机”。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.60btv7guvhxc.png"
                     
                ></p>
<p>一个样本称为一个“事务”<br>每个事务由多个属性来确定，这里的属性称为“项”<br>多个项组成的集合称为“项集”<br>####由k个项构成的集合<br>{牛奶}、{啤酒}都是1-项集；<br>{牛奶，果冻}是2-项集；<br>{啤酒，面包，牛奶}是3-项集<br>####X==&gt;Y含义：<br>X和Y是项集<br>X称为规则前项（antecedent）<br>Y称为规则后项（consequent）<br>####支持度（support）：一个项集或者规则在所有事务中出现的频率，σ(X):表示项集X的支持度计数<br>项集X的支持度：s(X)=σ(X)/N<br>规则X==&gt;Y表示物品集X对物品集Y的支持度，也就是物品集X和物品集Y同时出现的概率<br>某天共有100个顾客到商场购买物品，其中有30个顾客同时购买了啤酒和尿布，那么上述的关联规则的支持度就是30％<br>####置信度（confidence）：确定Y在包含X的事务中出现的频繁程度。c(X → Y) = σ(X∪Y)/σ(X)<br>p（Y│X）＝p（XY）/p(X)。<br>置信度反应了关联规则的可信度—购买了项目集X中的商品的顾客同时也购买了Y中商品的可能性有多大<br>购买薯片的顾客中有50％的人购买了可乐,则置信度为50％</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4qn34mu3vvr4.png"
                     
                ></p>
<p>####(X , Y)==&gt;Z :<br>支持度:交易中包含{X 、 Y 、 Z}的可能性<br>置信度:包含{X 、 Y}的交易中也包含Z的条件概率<br>####设最小支持度为50%, 最小可信度为 50%, 则可得到 :<br>A==&gt;C (50%, 66.6%)<br>C==&gt;A (50%, 100%)</p>
<p>若关联规则X-&gt;Y的支持度和置信度分别大于或等于用户指定的最小支持率minsupport和最小置信度minconfidence，则称关联规则X-&gt;Y为强关联规则，否则称关联规则X-&gt;Y为弱关联规则。</p>
<p>####提升度（lift）：物品集A的出现对物品集B的出现概率发生了多大的变化<br>lift（A==&gt;B）=confidence（A==&gt;B）/support(B)=p(B|A)/p(B)<br>现在有** 1000 ** 个消费者，有** 500** 人购买了茶叶，其中有** 450人同时** 购买了咖啡，另** 50人** 没有。由于** confidence(茶叶=&gt;咖啡)=450/500=90%** ，由此可能会认为喜欢喝茶的人往往喜欢喝咖啡。但如果另外没有购买茶叶的** 500人** ，其中同样有** 450人** 购买了咖啡，同样是很高的** 置信度90%** ,由此，得到不爱喝茶的也爱喝咖啡。这样看来，其实是否购买咖啡，与有没有购买茶叶并没有关联，两者是相互独立的，其** 提升度90%/[(450+450)/1000]=1** 。<br>由此可见，lift正是弥补了confidence的这一缺陷，if lift=1,X与Y独立，X对Y出现的可能性没有提升作用，其值越大(lift&gt;1),则表明X对Y的提升程度越大，也表明关联性越强。<br>####Leverage 与 Conviction的作用和lift类似，都是值越大代表越关联<br>Leverage : P(A,B)-P(A)P(B)<br>Conviction:P(A)P(!B)/P(A,!B）<br>####所有指标的计算公式：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.1iip63ea95vk.png"
                     
                ></p>
<p>接下来获取电影数据集中个电影类型之间的关联关系：<br>anaconda安装mlxtend包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge mlxtend</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from mlxtend.frequent_patterns import apriori</span><br><span class="line">from mlxtend.frequent_patterns import association_rules</span><br><span class="line">movie_genres = pd.DataFrame(data,columns=[&#x27;original_title&#x27;,&#x27;genres&#x27;])</span><br><span class="line">movies_ohe = movie_genres.drop(&#x27;genres&#x27;,1).join(movie_genres.genres.str.get_dummies())</span><br><span class="line">movies_ohe.shape#(10866, 21)</span><br><span class="line">movies_ohe.set_index([&#x27;original_title&#x27;],inplace=True)</span><br><span class="line">frequent_itemsets_movies = apriori(movies_ohe,use_colnames=True, min_support=0.025)</span><br><span class="line">result = [i for i in frequent_itemsets_movies.itemsets if len(i)&gt;1]</span><br><span class="line">len(result)#37</span><br><span class="line">rules_movies =  association_rules(frequent_itemsets_movies, metric=&#x27;lift&#x27;, min_threshold=1.25)</span><br><span class="line">rules_movies[(rules_movies.lift&gt;4)].sort_values(by=[&#x27;lift&#x27;], ascending=False)</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.70uir8omojk0.png"
                     
                ></p>
<p>也挺符合常理哈。</p>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python办公自动化：邮件发送</title>
    <url>/2021/04/05/python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96%EF%BC%9A%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<ul>
<li>邮件批量发送<br>调用smtp.exmail.qq.com批量自动发送邮件<br>注意文件路径，逗号分隔符，csv中不要有多余回车和空格<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import csv</span><br><span class="line">import smtplib</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from email.mime.base import MIMEBase</span><br><span class="line">from email.mime.image import MIMEImage</span><br><span class="line">from email.utils import formataddr</span><br><span class="line">from email import encoders</span><br><span class="line">import time,datetime</span><br><span class="line">import smtplib</span><br><span class="line">import email.mime.multipart</span><br><span class="line">import email.mime.text</span><br><span class="line">from email.mime.text import MIMEText</span><br><span class="line">from email.mime.multipart import MIMEMultipart</span><br><span class="line">from email.mime.application import MIMEApplication</span><br><span class="line">from email.header import Header</span><br><span class="line"></span><br><span class="line">def get_current_date():</span><br><span class="line">    &quot;&quot;&quot;获取当前时间&quot;&quot;&quot;</span><br><span class="line">    return str(time.strftime(&#x27;%Y%m%d&#x27;))</span><br><span class="line"></span><br><span class="line">def getAddrBook(addrBook):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">        @作用：根据输入的CSV文件，形成相应的通讯录字典</span><br><span class="line">        @返回：字典类型，name为人名，value为对应的邮件地址</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    with open(addrBook,&#x27;r&#x27;,encoding=&#x27;UTF-8&#x27;) as addrFile:</span><br><span class="line">        #将文件名和邮件接收人邮箱地址分行存放在csv文件中，用逗号分隔</span><br><span class="line">        reader = csv.reader(addrFile)</span><br><span class="line">        name = []</span><br><span class="line">        value = []</span><br><span class="line">        for row in reader:</span><br><span class="line">            name.append(row[0])</span><br><span class="line">            value.append(row[1])</span><br><span class="line">    addrs = dict(zip(name, value))</span><br><span class="line">    return addrs</span><br><span class="line"></span><br><span class="line">def send_email(inputpath,smtpHost,port,sendAddr,password,recipientAddrs, subject, content,attachfilename):</span><br><span class="line">    &quot;&quot;&quot;定义并配置好发邮件的函数&quot;&quot;&quot;</span><br><span class="line">    msg = email.mime.multipart.MIMEMultipart()</span><br><span class="line">    msg[&#x27;from&#x27;] =sendAddr #发件人</span><br><span class="line">    msg[&#x27;to&#x27;] =recipientAddrs #接收人</span><br><span class="line">    # msg[&#x27;cc&#x27;] =cc_name #抄送人名称</span><br><span class="line">    msg[&#x27;subject&#x27;] =subject #主题</span><br><span class="line">    content=content</span><br><span class="line">    txt = email.mime.text.MIMEText(content, &#x27;plain&#x27;, &#x27;UTF-8&#x27;)</span><br><span class="line">    msg.attach(txt)</span><br><span class="line">    print(&quot;准备添加附件...&quot;)</span><br><span class="line">    inputfile=inputpath+attachfilename #文件路径</span><br><span class="line">    part = MIMEText(open(inputfile,&#x27;rb&#x27;).read(),&#x27;base64&#x27;, &#x27;utf-8&#x27;)</span><br><span class="line">    part[&quot;Content-Type&quot;] = &#x27;application/octet-stream&#x27;</span><br><span class="line">    part.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=Header(attachfilename,&#x27;utf-8&#x27;).encode())</span><br><span class="line">    msg.attach(part)</span><br><span class="line">    smtp = smtplib.SMTP_SSL(smtpHost, port)</span><br><span class="line">    smtp.login(sendAddr, password)</span><br><span class="line">    smtp.sendmail(sendAddr, recipientAddrs.split(&#x27;,&#x27;), str(msg))   #+cc_name.split(&#x27;,&#x27;)</span><br><span class="line">    #print(&quot;发送成功！&quot;)</span><br><span class="line">    smtp.quit()</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    #这里需要定义send_email函数中传入的所有变量</span><br><span class="line">    inputpath = &quot;r&#x27;D:/&quot; #数据存放的文件路径（这里是绝对路径）</span><br><span class="line">    smtpHost = &#x27;smtp.exmail.qq.com&#x27;  # 默认服务器地址及端口</span><br><span class="line">    port=465</span><br><span class="line">    sendAddr =&quot;&quot;    #自己也就是发件人的邮箱账号</span><br><span class="line">    password = &quot;&quot;   #自己的邮箱密码</span><br><span class="line">    subject=&quot; &quot;+current_date  #主题+当前日期</span><br><span class="line">    content=&#x27;&#x27;&#x27;附件为测试文件&#x27;&#x27;&#x27;+current_date# 正文内容+当前日期</span><br><span class="line"></span><br><span class="line">    addrBook=r&#x27;D:\邮箱联系人表单.csv&#x27;  #联系人表单文件路径</span><br><span class="line">    addrs=getAddrBook(addrBook)</span><br><span class="line">    for i in addrs:</span><br><span class="line">        attachfilename=i+&#x27;.xlsx&#x27; #将要发送的文件添加为附件</span><br><span class="line">        recipientAddrs=addrs[i] #接收人的邮箱地址</span><br><span class="line">        result = os.path.exists(inputpath+i+&#x27;.xlsx&#x27;) #判断当前目录是否存在该文件</span><br><span class="line">        if result:</span><br><span class="line">            #存在就执行邮件</span><br><span class="line">            send_email(inputpath,smtpHost,port,sendAddr,password,recipientAddrs,</span><br><span class="line">            subject,content,attachfilename)</span><br><span class="line">            print ((&#x27;发给 %s 的邮件执行成功&#x27;) %(recipientAddrs))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p>这里也看到有使用126邮箱的smtp服务器：’smtp.126.com’<br><a class="link"   href="https://blog.csdn.net/weixin_42350212/article/details/118751583" >https://blog.csdn.net/weixin_42350212/article/details/118751583<i class="fas fa-external-link-alt"></i></a><br>Python smtp发送邮件怎么设置抄送人<br><a class="link"   href="https://www.cnblogs.com/shiyixirui/p/14692146.html" >https://www.cnblogs.com/shiyixirui/p/14692146.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>python办公自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>python办公自动化：pdf和word</title>
    <url>/2021/08/26/python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96%EF%BC%9Apdf%E5%92%8Cword/</url>
    <content><![CDATA[<h2 id="python-使用-PyPDF2-和-pdfplumber-操作pdf"><a href="#python-使用-PyPDF2-和-pdfplumber-操作pdf" class="headerlink" title="python 使用 PyPDF2 和 pdfplumber 操作pdf"></a>python 使用 PyPDF2 和 pdfplumber 操作pdf</h2><ul>
<li>PyPDF2 官网：<a class="link"   href="https://pythonhosted.org/PyPDF2/" >https://pythonhosted.org/PyPDF2/<i class="fas fa-external-link-alt"></i></a></li>
<li>PyPDF2 可以更好的读取、写入、分割、合并 PDF 文件；</li>
<li>pdfplumber 官网：<a class="link"   href="https://github.com/jsvine/pdfplumber" >https://github.com/jsvine/pdfplumber<i class="fas fa-external-link-alt"></i></a></li>
<li>pdfplumber 可以更好地读取 PDF 文件内容和提取 PDF 中的表格；</li>
<li>查找某个包 anaconda search -t conda pdfplumber<br>下载某个包 anaconda show package</li>
</ul>
<h2 id="python-提取-PDF-文字内容"><a href="#python-提取-PDF-文字内容" class="headerlink" title="python 提取 PDF 文字内容"></a>python 提取 PDF 文字内容</h2><h3 id="1）利用-pdfplumber-提取文字"><a href="#1）利用-pdfplumber-提取文字" class="headerlink" title="1）利用 pdfplumber 提取文字"></a>1）利用 pdfplumber 提取文字</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import PyPDF2 </span><br><span class="line">import pdfplumber </span><br><span class="line">with pdfplumber.open(&quot;test.pdf&quot;) as p: </span><br><span class="line">page = p.pages[2] </span><br><span class="line">print(page.extract_text())#打印第3页所有文字</span><br></pre></td></tr></table></figure>
<h3 id="2）利用-pdfplumber-提取表格并写入-excel"><a href="#2）利用-pdfplumber-提取表格并写入-excel" class="headerlink" title="2）利用 pdfplumber 提取表格并写入 excel"></a>2）利用 pdfplumber 提取表格并写入 excel</h3><ul>
<li>extract_table()：如果一页有一个表格；</li>
<li>extract_tables()：如果一页有多个表格；<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import PyPDF2 </span><br><span class="line">import pdfplumber </span><br><span class="line">from openpyxl import Workbook </span><br><span class="line">with pdfplumber.open(&quot;test.pdf&quot;) as p: </span><br><span class="line">page = p.pages[4] </span><br><span class="line">table = page.extract_table() </span><br><span class="line">print(table) </span><br><span class="line">workbook = Workbook()</span><br><span class="line">sheet = workbook.active </span><br><span class="line">for row in table: </span><br><span class="line">  if not &quot;&quot;.join([str(i) for i in row]) == &quot;&quot;:</span><br><span class="line">  #将列表中每个元素都连接成一个字符串，如果还是一个空字符串那么肯定就是空行。</span><br><span class="line">    sheet.append(row)</span><br><span class="line">  #sheet.append(row) #直接append这里提取出来的表格有很多空行</span><br><span class="line">workbook.save(filename = &quot;新pdf.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="3、PDF-合并及页面的排序和旋转"><a href="#3、PDF-合并及页面的排序和旋转" class="headerlink" title="3、PDF 合并及页面的排序和旋转"></a>3、PDF 合并及页面的排序和旋转</h3><h4 id="1）分割及合并-pdf"><a href="#1）分割及合并-pdf" class="headerlink" title="1）分割及合并 pdf"></a>1）分割及合并 pdf</h4>① 合并 pdf<br>首先，我们有如下几个文件，可以发现这里共有三个 PDF 文件需要我们合并。同时可以发现他们的文件名都是有规律的(如果文件名，没有先后顺序，我们合并起来就没有意义了。)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PyPDF2 import PdfFileReader, PdfFileWriter </span><br><span class="line">pdf_writer = PdfFileWriter() </span><br><span class="line">for i in range(1,len(os.listdir(r&quot;G:\concat_pdf&quot;))+1):</span><br><span class="line">  print(i*50+1,(i+1)*50) </span><br><span class="line">  pdf_reader = PdfFileReader(&quot;G:\concat_pdf\&#123;&#125;-&#123;&#125;.pdf&quot;.format(i*50+1,(i+1)*50))  </span><br><span class="line">  #这里是指文件名的格式为51-100，101-150、151-200</span><br><span class="line">  for page in range(pdf_reader.getNumPages()):</span><br><span class="line">    pdf_writer.addPage(pdf_reader.getPage(page)) </span><br><span class="line">with open(&quot;G:\concat_pdf\merge.pdf&quot;, &quot;wb&quot;) as out: </span><br><span class="line">  pdf_writer.write(out)</span><br></pre></td></tr></table></figure>
<p>② 拆分 pdf<br>这里有一个“时间序列.pdf”的文件，共 3 页，我们将其每一页存为一个 PDF 文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PyPDF2 import PdfFileReader, PdfFileWriter </span><br><span class="line">pdf_reader = PdfFileReader(r&quot;G:\concat_pdf\时间序列.pdf&quot;) </span><br><span class="line">for page in range(pdf_reader.getNumPages()): </span><br><span class="line">  pdf_writer = PdfFileWriter() </span><br><span class="line">  pdf_writer.addPage(pdf_reader.getPage(page)) </span><br><span class="line">  with open(f&quot;G:\concat_pdf\\&#123;page&#125;.pdf&quot;, &quot;wb&quot;) as out: </span><br><span class="line">    pdf_writer.write(out)</span><br></pre></td></tr></table></figure>
<h4 id="2）旋转及排序-pdf"><a href="#2）旋转及排序-pdf" class="headerlink" title="2）旋转及排序 pdf"></a>2）旋转及排序 pdf</h4><p>① 旋转 pdf</p>
<ul>
<li>.rotateClockwise(90 的倍数)：顺时针旋转 90 度</li>
<li>.rotateCounterClockwise(90 的倍数)：逆时针旋转 90 度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PyPDF2 import PdfFileReader, PdfFileWriter</span><br><span class="line">pdf_reader = PdfFileReader(r&quot;G:\concat_pdf\时间序列.pdf&quot;) </span><br><span class="line">pdf_writer = PdfFileWriter() </span><br><span class="line">for page in range(pdf_reader.getNumPages()): </span><br><span class="line">  if page % 2 == 0: </span><br><span class="line">    rotation_page = pdf_reader.getPage(page).rotateCounterClockwise(90) </span><br><span class="line">  else: </span><br><span class="line">    rotation_page = pdf_reader.getPage(page).rotateClockwise(90) </span><br><span class="line">  pdf_writer.addPage(rotation_page) </span><br><span class="line">  with open(&quot;G:\concat_pdf\旋转.pdf&quot;, &quot;wb&quot;) as out: </span><br><span class="line">    pdf_writer.write(out)</span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">上述代码中，我们循环遍历了这个 pdf，对于偶数页我们逆时针旋转 90°，对于奇数页我</span><br><span class="line">们顺时针旋转 90°； 注意：旋转的角度只能是 90 的倍数；</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
② 排序 pdf<br>PDF 文件需要倒序排列，应该怎么做呢？</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PyPDF2 import PdfFileReader, PdfFileWriter </span><br><span class="line">pdf_reader = PdfFileReader(r&quot;G:\concat_pdf\时间序列.pdf&quot;) </span><br><span class="line">pdf_writer = PdfFileWriter() </span><br><span class="line">for page in range(pdf_reader.getNumPages()-1, -1, -1): </span><br><span class="line">#这里用到range，很巧妙</span><br><span class="line">  pdf_writer.addPage(pdf_reader.getPage(page)) </span><br><span class="line">  with open(&quot;G:\concat_pdf\倒序.pdf&quot;, &quot;wb&quot;) as out:</span><br><span class="line">    pdf_writer.write(out)</span><br></pre></td></tr></table></figure>
<h3 id="4、pdf-批量加水印及加密、解密"><a href="#4、pdf-批量加水印及加密、解密" class="headerlink" title="4、pdf 批量加水印及加密、解密"></a>4、pdf 批量加水印及加密、解密</h3><h4 id="1）批量加水印"><a href="#1）批量加水印" class="headerlink" title="1）批量加水印"></a>1）批量加水印</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PyPDF2 import PdfFileReader, PdfFileWriter </span><br><span class="line">from copy import copy </span><br><span class="line">water = PdfFileReader(r&quot;G:\concat_pdf\水印.pdf&quot;) </span><br><span class="line">water_page = water.getPage(0) </span><br><span class="line">pdf_reader = PdfFileReader(r&quot;G:\concat_pdf\aa.pdf&quot;) </span><br><span class="line">pdf_writer = PdfFileWriter() </span><br><span class="line">for page in range(pdf_reader.getNumPages()): </span><br><span class="line">  my_page = pdf_reader.getPage(page) </span><br><span class="line">  new_page = copy(water_page) </span><br><span class="line">  new_page.mergePage(my_page) </span><br><span class="line">  pdf_writer.addPage(new_page) </span><br><span class="line">  with open(&quot;G:\concat_pdf\\添加水印后的 aa.pdf&quot;, &quot;wb&quot;) as out: </span><br><span class="line">    pdf_writer.write(out) </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">这里有一点需要注意：进行 pdf 合并的时候，我们希望“水印”在下面,</span><br><span class="line">文字在上面，因此 是“水印”.mergePage(“图片页”)</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2）批量加密、解密"><a href="#2）批量加密、解密" class="headerlink" title="2）批量加密、解密"></a>2）批量加密、解密</h3><ul>
<li><p>这里的“解密”，是在知道 pdf 的密码下，去打开 pdf，而不是暴力破解；<br>① 加密 pdf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PyPDF2 import PdfFileReader, PdfFileWriter </span><br><span class="line">pdf_reader = PdfFileReader(r&quot;G:\concat_pdf\test.pdf&quot;) </span><br><span class="line">pdf_writer = PdfFileWriter() </span><br><span class="line">for page in range(pdf_reader.getNumPages()): </span><br><span class="line">pdf_writer.addPage(pdf_reader.getPage(page)) </span><br><span class="line"># 添加密码</span><br><span class="line">pdf_writer.encrypt(&quot;a123456&quot;)</span><br><span class="line">with open(&quot;G:\concat_pdf\\test.pdf&quot;, &quot;wb&quot;) as out: </span><br><span class="line">pdf_writer.write(out)</span><br></pre></td></tr></table></figure>
<p>② 解密 pdf 并保存为未加密的 pdf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PyPDF2 import PdfFileReader, PdfFileWriter </span><br><span class="line">pdf_reader = PdfFileReader(r&quot;G:\concat_pdf\test.pdf&quot;) </span><br><span class="line"># 解密</span><br><span class="line">pdf pdf_reader.decrypt(&quot;a123456&quot;) </span><br><span class="line">pdf_writer = PdfFileWriter() </span><br><span class="line">for page in range(pdf_reader.getNumPages()): </span><br><span class="line">  pdf_writer.addPage(pdf_reader.getPage(page))</span><br><span class="line">  with open(&quot;G:\concat_pdf\未加密.pdf&quot;, &quot;wb&quot;) as out: </span><br><span class="line">    pdf_writer.write(out)</span><br></pre></td></tr></table></figure>
<h2 id="python-使用-python-docx-操作-word"><a href="#python-使用-python-docx-操作-word" class="headerlink" title="python 使用 python-docx 操作 word"></a>python 使用 python-docx 操作 word</h2><h3 id="1、python-docx-库介绍"><a href="#1、python-docx-库介绍" class="headerlink" title="1、python-docx 库介绍"></a>1、python-docx 库介绍</h3></li>
<li><p>该模块儿可以创建、修改 Word（.docx）文件；</p>
</li>
<li><p>此模块儿不属于 python 标准库，需要单独安装；</p>
</li>
<li><p>python-docx 使用官网： <a class="link"   href="https://python-docx.readthedocs.io/en/latest/%EF%BC%9B" >https://python-docx.readthedocs.io/en/latest/；<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>我们在安装此模块儿使用的是 pip install python-docx，但是在导入的时候是 import<br>docx； </p>
<h3 id="2、Python-读取-Word-文档内容"><a href="#2、Python-读取-Word-文档内容" class="headerlink" title="2、Python 读取 Word 文档内容"></a>2、Python 读取 Word 文档内容</h3></li>
<li><p>注意：每进行一个操作，必须保存一下，否则等于白做；<br>1）word 文档结构介绍</p>
</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.5t8bcxum41a8.png"
                     
                ><br>2）python-docx 提取文字和文字块儿<br>① python-docx 提取文字<br>有一个这样的 docx 文件，提取其中的文字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from docx import Document </span><br><span class="line">doc = Document(r&quot;G:\concat_word\test1.docx&quot;) </span><br><span class="line">print(doc.paragraphs) </span><br><span class="line">for paragraph in doc.paragraphs: </span><br><span class="line">  print(paragraph.text)</span><br></pre></td></tr></table></figure>
<p>② python-docx 提取文字块儿</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from docx import Document </span><br><span class="line">doc = Document(r&quot;G:\concat_word\test1.docx&quot;) </span><br><span class="line">print(doc.paragraphs) </span><br><span class="line">for i range(len((doc.paragraphs)):</span><br><span class="line">#这里按段落进行循环</span><br><span class="line">  paragraph = doc.paragraphs[i] </span><br><span class="line">  runs = paragraph.runs </span><br><span class="line">  print(runs) </span><br><span class="line">  for run in paragraph.runs: </span><br><span class="line">    print(run.text)</span><br></pre></td></tr></table></figure>
<p>3）利用 Python 向 Word 文档写入内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from docx import Document </span><br><span class="line">doc = Document(r&quot;G:\concat_word\test1.docx&quot;) </span><br><span class="line"># print(doc.add_heading(&quot;一级标题&quot;, level=1)) 添加一级标题的时候出错，还没有解决！</span><br><span class="line">paragraph1 = doc.add_paragraph(&quot;这是一个段落&quot;) </span><br><span class="line">paragraph2 = doc.add_paragraph(&quot;这是第二个段落&quot;) </span><br><span class="line">doc.save(r&quot;G:\concat_word\test1.docx&quot;) </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">添加段落的时候，赋值给一个变量，方便我们后面进行格式调整；</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>读取word文档中的表格内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import docx</span><br><span class="line"></span><br><span class="line">fn = r&#x27;D:\长恨歌.docx&#x27;</span><br><span class="line">doc = docx.Document(fn)</span><br><span class="line"></span><br><span class="line"># 按段落读取全部数据</span><br><span class="line">for paragraph in doc.paragraphs:</span><br><span class="line">    print(paragraph.text)</span><br><span class="line"></span><br><span class="line"># 按表格读取全部数据</span><br><span class="line">for table in doc.tables:</span><br><span class="line">    for row in table.rows:</span><br><span class="line">        for cell in row.cells:</span><br><span class="line">            print(cell.text)</span><br><span class="line"></span><br><span class="line">table_num = len(doc.tables)</span><br><span class="line"># 获取文档的表格个数</span><br><span class="line">print(table_num)</span><br><span class="line"></span><br><span class="line">table_0 = doc.tables[0]</span><br><span class="line"># 选取第一个表</span><br><span class="line">table_rows = len(table_0.rows)</span><br><span class="line"># 获取第一个表的行数</span><br><span class="line">print(table_rows)</span><br><span class="line"></span><br><span class="line">tab = doc.tables[0].rows[0].cells[0]</span><br><span class="line"># 获取第一张表第一行第一列数据</span><br><span class="line">print(tab.text)</span><br><span class="line"></span><br><span class="line">par = doc.paragraphs[2]</span><br><span class="line"># 读取第三段数据</span><br><span class="line">print(par.text)</span><br></pre></td></tr></table></figure></li>
<li>批量提取word中表格内容<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import docx</span><br><span class="line">import pandas as pd</span><br><span class="line">from docx import Document #导入库</span><br><span class="line">path = &quot;word2.docx&quot; #文件路径</span><br><span class="line">document = Document(path) #读入文件</span><br><span class="line">tables = document.tables #获取文件中的表格集</span><br><span class="line">table = tables[0]#获取文件中的第一个表格</span><br><span class="line"></span><br><span class="line">for table in tables:</span><br><span class="line">    columns = [table.cell(0,c).text for c in range(len(table.columns))]#获取表头 </span><br><span class="line">#     print(columns)</span><br><span class="line">    values = []</span><br><span class="line">    for i in range(1,len(table.rows)):#从表格第二行开始循环读取表格数据</span><br><span class="line">        result = [table.cell(i,c).text for c in range(len(table.columns))]# 自动获取每一行的数据</span><br><span class="line">        #cell(i,0)表示第(i+1)行第1列数据，以此类推</span><br><span class="line">#         print(result)</span><br><span class="line">        values.append(result)</span><br><span class="line">    print(values)</span><br><span class="line">    print(columns)</span><br><span class="line">    print(pd.DataFrame(data = values,columns=columns))</span><br></pre></td></tr></table></figure>
在操作word这块感觉并不怎么实用，等遇到问题了再加，也可以参考<br><a class="link"   href="https://juejin.cn/post/6868073137263607821" >https://juejin.cn/post/6868073137263607821<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <tags>
        <tag>python办公自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>python办公自动化：文件和目录操作</title>
    <url>/2021/03/06/python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96%EF%BC%9A%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br></pre></td></tr></table></figure>
<h3 id="创建目录结构"><a href="#创建目录结构" class="headerlink" title="创建目录结构"></a>创建目录结构</h3><ul>
<li>os.makedirs 可以递归的创建目录结构，比如<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.makedirs(&#x27;tmp/python/fileop&#x27;,exist_ok=True)</span><br></pre></td></tr></table></figure>
在当前工作目录下面创建 tmp目录，在tmp目录下面再创建 python目录，在Python目录下面再创建fileop目录；exist_ok=True 指定了，如果某个要创建的目录已经存在，也不报错</li>
</ul>
<h3 id="删除文件或目录"><a href="#删除文件或目录" class="headerlink" title="删除文件或目录"></a>删除文件或目录</h3><p>os.remove 可以删除一个文件，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.remove(&#x27;sdf.py&#x27;)</span><br></pre></td></tr></table></figure>
<p>shutil.rmtree() 可以递归的删除某个目录所有的子目录和子文件 比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import shutil</span><br><span class="line">shutil.rmtree(&#x27;tmp&#x27;, ignore_errors=True)</span><br></pre></td></tr></table></figure>
<p>注意：参数 ignore_errors=True 保证如果目录不为空，不会抛出异常。</p>
<h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><p>shutil 模块里面有很多 目录文件操作的函数<br>拷贝文件，可以使用shutil模块的copyfile函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from shutil import copyfile</span><br><span class="line"># 拷贝 d:/tools/first.py 到 e:/first.py</span><br><span class="line">copyfile(&#x27;d:/tools/first.py&#x27;, &#x27;e:/first.py&#x27;)</span><br></pre></td></tr></table></figure>
<p>注意，如果拷贝前，e:/first.py 已经存在，则会被拷贝覆盖，所以使用该函数一定要小心。<br>###拷贝目录<br>如果我们要拷贝一个目录里面所有的内容（包括子目录和文件、子目录里面的子目录和文件，等等）到另外一个目录中，可以使用 shutil的copytree函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from shutil import copytree</span><br><span class="line"># 拷贝 d:/tools/aaa 目录中所有的内容 到 e:/bbb 中</span><br><span class="line">copytree(&#x27;d:/tools/aaa&#x27;, &#x27;e:/new/bbb&#x27;)</span><br></pre></td></tr></table></figure>
<p>注意拷贝前， 目标目录必须 不存在 ，否则会报错。</p>
<p>上面的代码执行前面，如果 e:/new/bbb 已经存在，执行到copytree时，就会报错</p>
<p>上面的代码执行前面，如果 e:/new 这个目录都不存在，执行到copytree时，就会 创建 e:/new 目录，再创建 e:/new/bbb 目录，再拷贝 d:/tools/aaa 目录中所有的内容 到 e:/new/bbb 中。</p>
<p>上面的代码执行前面，如果 e:/new 这个目录存在，但是 e:/new/bbb 不存在，执行到copytree时，就只会 创建 e:/new/bbb ，再拷贝 d:/tools/aaa 目录中所有的内容 到 e:/new/bbb 中。<br>###修改文件名、目录名<br>要修改文件名、目录名，可以使用os模块的rename函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改目录名 d:/tools/aaa 为 d:/tools/bbb</span><br><span class="line">os.rename(&#x27;d:/tools/aaa&#x27;,&#x27;d:/tools/bbb&#x27;)</span><br><span class="line"></span><br><span class="line"># 修改文件名 d:/tools/first.py 为 d:/tools/second.py</span><br><span class="line">os.rename(&#x27;d:/tools/first.py&#x27;,&#x27;d:/tools/second.py&#x27;)</span><br></pre></td></tr></table></figure>

<h3 id="对文件路径名的操作"><a href="#对文件路径名的操作" class="headerlink" title="对文件路径名的操作"></a>对文件路径名的操作</h3><p>对于文件名的操作，比如 获取文件名称，文件所在目录，文件路径的拼接等，都可以使用 os.path 模块。</p>
<p>通常我们喜欢使用格式化字符串的方法来做文件路径的拼接，但是如果你的程序需要在Linux、Windows等多个平台运行，它们的路径的分隔符是不同的，Windows上是 <code>\</code> , 而 Linux上是 <code>/</code>。</p>
<p>这时，我们应该使用 os.path 模块。 它能够自动处理类似 Data/data.csv 和 Data\data.csv 这样的文件路径差异。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path = &#x27;/Users/beazley/Data/data.csv&#x27;</span><br><span class="line"># 获取路径中的文件名部分</span><br><span class="line">os.path.basename(path)</span><br><span class="line">&#x27;data.csv&#x27;</span><br><span class="line"># 获取路径中的目录部分</span><br><span class="line">os.path.dirname(path)</span><br><span class="line">&#x27;/Users/beazley/Data&#x27;</span><br><span class="line"># 文件路径的拼接</span><br><span class="line">os.path.join(&#x27;tmp&#x27;, &#x27;data&#x27;, os.path.basename(path))</span><br><span class="line">&#x27;tmp/data/data.csv&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="判断文件、目录是否存在"><a href="#判断文件、目录是否存在" class="headerlink" title="判断文件、目录是否存在"></a>判断文件、目录是否存在</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.path.exists(&#x27;d:/systems/cmd.exe&#x27;)</span><br><span class="line">os.path.exists(&#x27;d:/systems&#x27;)</span><br></pre></td></tr></table></figure>
<p>exists方法返回值为True表示 存在，否则表示不存在。<br>如果你要判断指定路径是否是文件，可以这样<br>os.path.isfile(‘d:/systems/cmd.exe’)# 返回值为True 表示是文件<br>如果你要判断指定路径是否是目录，可以这样<br>os.path.isdir(‘d:/systems’)#返回值为True 表示是目录</p>
<p>###文件大小和修改日期</p>
<ul>
<li><p>返回文件大小<br>os.path.getsize(‘file1’)<br>3669</p>
</li>
<li><p>返回文件的最后修改日期，是秒时间<br>参考下一章 日期和时间 里面的内容<br>os.path.getmtime(‘file1’)<br>1272478234.0</p>
</li>
<li><p>可以把秒时间 转化为日期时间<br>import time<br>time.ctime(os.path.getmtime(‘/etc/passwd’))<br>‘Wed Apr 28 13:10:34 2010’</p>
</li>
</ul>
<p>###当前工作目录<br>当前工作目录的路径：<br>wd = os.getcwd()<br>改变当前工作目录到另外的路径：<br>os.chdir(path)<br>参数就是 新的当前工作目录 路径地址。</p>
<p>###递归的遍历目录下面所有的文件<br>获取某个目录中所有的 文件， 包括子目录里面的文件。 可以使用 os库中的walk方法<br>比如我们要得到某个目录下面所有的子目录 和所有的文件，存放在两个列表中<br> os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])<br>    top ：是你所要遍历的目录的地址, 返回的是一个三元组 (dirpath, dirnames, filenames)<br>    topdown ：可选，True则优先遍历 top 文件夹，与top 文件夹中每一个子目录；否则优先遍历 top 的子目录(默认为开启)。<br>    onerror ：可选，需要一个 callable 对象，当 walk 需要异常时，会调用<br>    followlinks ：可选，如果为 True，则会遍历目录下的快捷方式(linux 下是软连接 symbolic link )实际所指的目录(默认关闭)，如果为 False，则优先遍历 top 的子目录；</p>
<ul>
<li>得到某个目录下所有文件的全路径<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line"># 目标目录</span><br><span class="line">targetDir = r&#x27;d:\tmp\util\dist\check&#x27;</span><br><span class="line">for (dirpath, dirnames, filenames) in os.walk(targetDir):</span><br><span class="line">    for fn in filenames:</span><br><span class="line">        # 把 dirpath 和 每个文件名拼接起来 就是全路径</span><br><span class="line">        fpath = os.path.join(dirpath, fn)</span><br><span class="line"># dirpath 代表当前遍历到的目录名</span><br><span class="line"># dirnames 是列表对象，存放当前dirpath中的所有子目录名</span><br><span class="line"># filenames 是列表对象，存放当前dirpath中的所有文件名</span><br></pre></td></tr></table></figure>
<h3 id="得到目录中所有的文件和子目录名"><a href="#得到目录中所有的文件和子目录名" class="headerlink" title="得到目录中所有的文件和子目录名"></a>得到目录中所有的文件和子目录名</h3>listdir返回的是该目录下面所有的文件和子目录。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 目标目录</span><br><span class="line">targetDir = r&#x27;d:\tmp\util\dist\check&#x27;</span><br><span class="line">files =  os.listdir(targetDir)</span><br><span class="line">print(files)</span><br></pre></td></tr></table></figure>
如果只需要获取目录中所有的文件，或者只需要子目录<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">from os.path import isfile, join,isdir</span><br><span class="line"># 目标目录</span><br><span class="line">targetDir = r&#x27;d:\tmp\util\dist\check&#x27;</span><br><span class="line"># 所有的文件</span><br><span class="line">print([f for f in os.listdir(targetDir) if isfile(join(targetDir, f))])</span><br><span class="line"># 所有的目录</span><br><span class="line">print([f for f in os.listdir(targetDir) if isdir(join(targetDir, f))])</span><br></pre></td></tr></table></figure>
###得到目录中指定扩展名的文件和子目录<br>可以使用glob库<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import glob</span><br><span class="line">exes = glob.glob(r&#x27;d:\tmp\*.txt&#x27;)</span><br><span class="line">print(exes)</span><br></pre></td></tr></table></figure>
<a class="link"   href="http://www.byhy.net/tut/py/extra/file_dir" >http://www.byhy.net/tut/py/extra/file_dir<i class="fas fa-external-link-alt"></i></a></li>
</ul>
]]></content>
      <tags>
        <tag>python办公自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>python连接mysql:读取、写入、更新、删除</title>
    <url>/2021/07/04/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%9A%E8%BF%9E%E6%8E%A5mysql%EF%BC%8C%E8%AF%BB%E5%8F%96%E3%80%81%E5%86%99%E5%85%A5%E3%80%81%E6%9B%B4%E6%96%B0%E3%80%81%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<h2 id="1、连接读取数据"><a href="#1、连接读取数据" class="headerlink" title="1、连接读取数据"></a>1、连接读取数据</h2><h3 id="第一种：用pymysql连接"><a href="#第一种：用pymysql连接" class="headerlink" title="第一种：用pymysql连接"></a>第一种：用pymysql连接</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装pymysql</span><br><span class="line">conda install pymysql</span><br><span class="line">#或者</span><br><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">#创建数据库连接，依次是主机名，用户名，密码，要打开的数据库，端口号和编码类型</span><br><span class="line">def get_conn():</span><br><span class="line">    conn = pymysql.connect(</span><br><span class="line">        host=&quot;****&quot;,</span><br><span class="line">        user=&quot;****&quot;,</span><br><span class="line">        password=&quot;****&quot;,</span><br><span class="line">        db=&quot;****&quot;,</span><br><span class="line">        charset=&quot;utf8&quot;,</span><br><span class="line">        port=3306,</span><br><span class="line">    )</span><br><span class="line">    # 创建游标：</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    return conn, cursor</span><br><span class="line">def close_conn(conn, cursor):</span><br><span class="line">    if cursor:</span><br><span class="line">        cursor.close()</span><br><span class="line">    if conn:</span><br><span class="line">        conn.close()</span><br><span class="line">def query(sql, *args):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    :param sql:</span><br><span class="line">    :param args:</span><br><span class="line">    :return:返回结果，提取数据，返回的data是一个二维元组，((),())形式；</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    conn, cursor= get_conn()</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    res = cursor.fetchall() # 获取结果</span><br><span class="line">    close_conn(conn, cursor)</span><br><span class="line">    return res</span><br><span class="line">#返回的是所有行在对应列的值</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># connect.commit()</span><br><span class="line">#如果对数据进行了增删改查的话，执行该语句，相当于把对数据库的操作提交上去，否则修改不会生效</span><br><span class="line">close_conn(conn, cursor)#当然要有关闭游标和数据库连接的习惯</span><br></pre></td></tr></table></figure>

<ul>
<li>fetchone与fetchall的理解；举个例子:cursor是我们连接数据库的实例<br>fetchone()的使用:返回值是单个的元组,也就是一行记录,如果没有结果,那就会返回null</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor.execute(f&quot;select username,password,nickname from user where id=&#123;input&#125;&quot;)</span><br><span class="line">result=cursor.fetchone();  </span><br><span class="line">此时我们可以通过result[0],result[1],result[2]得到username,password,nickname</span><br></pre></td></tr></table></figure>
<p>fetchall()的使用:返回值是多个元组,即返回多个行记录,如果没有结果,返回的是()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cursor.execute(select * from user)</span><br><span class="line">result=cursor.fetchall();此时select得到的可能是多行记录,那么我们通过fetchall得到的就是多行记录,是一个二维元组</span><br><span class="line">((username1,password1,nickname1),(username2,password2,nickname2),(username3,password3,nickname))</span><br></pre></td></tr></table></figure>
<h3 id="第二种：pandas内置的read-sql"><a href="#第二种：pandas内置的read-sql" class="headerlink" title="第二种：pandas内置的read_sql"></a>第二种：pandas内置的read_sql</h3><p>  需要安装sqlalchemy,但是可以DataFrame的形式读出来，方便多了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install sqlalchemy</span><br><span class="line">#或者</span><br><span class="line">pip install sqlalchemy</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">def reader_sql(query,db=&#x27;myemployees&#x27;):</span><br><span class="line">    sql = query</span><br><span class="line">    engine = create_engine(f&#x27;mysql+pymysql://root:&#123;pwd&#125;@localhost:3306/&#123;db&#125;?charset=utf8&#x27;)</span><br><span class="line">    #格式一点不能错，依次是用户名，密码（###），主机名，端口号，要连接的数据库，指定编码</span><br><span class="line">    df = pd.read_sql(sql,engine)</span><br><span class="line">    return df</span><br><span class="line">df_departments = reader_sql(&#x27;select  * from departments&#x27;)#这里输出的是一个dataframe</span><br></pre></td></tr></table></figure>
<h2 id="2、写入数据"><a href="#2、写入数据" class="headerlink" title="2、写入数据"></a>2、写入数据</h2><h3 id="第一种：to-sql写入"><a href="#第一种：to-sql写入" class="headerlink" title="第一种：to_sql写入"></a>第一种：to_sql写入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result.to_sql(name=&#x27;newtable&#x27;,con=engine,if_exists=&#x27;append&#x27;,index=False)</span><br><span class="line">#这里的index如果为True的话也会报错，数据库中没有索引列（建表的时候没有预留索引列的位置）</span><br><span class="line">#默认参数是fail，如果这张表本来存在的话，操作就会fail失败掉</span><br><span class="line">#不建议这种直接建表操作，这样的表中字段类型会有变化，不符合原先数据要求</span><br><span class="line">#建议在workbench中先create table并把所有字段的类型定义好，在使用to_sql进行写入</span><br></pre></td></tr></table></figure>
<ul>
<li>新建表设置好字段类型或者用cursor.execute执行建表语句后，就可以用to_sql写入了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">result.to_sql(name=&#x27;new_table2&#x27;,con=engine,if_exists=&#x27;append&#x27;,index=False)</span><br><span class="line">#这里注意新建表的时候一定要把各个字段的类型搞准确，编码搞清楚不然没意识到出个错，很难受</span><br><span class="line">#如果重复执行这行代码的话，会导致插入的数据成倍数增加，因为你传入的append参数，会在原数据上接着添加</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">del result[&#x27;department_name&#x27;]#删掉一列后再进行写入</span><br><span class="line">result.to_sql(name=&#x27;new_table2&#x27;,con=engine,if_exists=&#x27;append&#x27;,index=False)</span><br><span class="line">#如果建表时在NN列未勾选上的话，不会报错，会发现原本的值数量多了一倍，且新增的数据中的department_name列均为空值</span><br><span class="line">#但如果建表时在NN列勾选上的话，表示该字段不允许为空值，就会报错</span><br><span class="line">#还有如果写入的数据字段多了，与建表时给定的字段数量不符也会报错</span><br></pre></td></tr></table></figure>
<ul>
<li>将excel中分sheet写入数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">import pandas as pd</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">import xlrd</span><br><span class="line">file = r&#x27;C:\Users\sofia.xlsx&#x27;</span><br><span class="line">#分sheet写入数据库</span><br><span class="line"># 然后调用df.to_sql()函数将dataframe数据写入：</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 打开excel表格&quot;&quot;&quot;</span><br><span class="line">workbook = xlrd.open_workbook(file)</span><br><span class="line">sheet_names = workbook.sheet_names()</span><br><span class="line">for i in sheet_names :</span><br><span class="line">    data = pd.read_excel(file,sheet_name = i,index = False,encoding=&#x27;utf-8&#x27;)</span><br><span class="line">    data.to_sql(i,con=engine,if_exists=&#x27;replace&#x27;,index=False)</span><br></pre></td></tr></table></figure>

<ul>
<li>pd.read_sql()介绍</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pandas.read_sql(sql, con, index_col=None, coerce_float=True, params=None, parse_dates=None, columns=None, chunksize=None)</span><br><span class="line">各参数意义：</span><br><span class="line">sql:SQL命令字符串</span><br><span class="line">con：连接sql数据库的engine，一般可以用SQLalchemy或者pymysql之类的包建立</span><br><span class="line">index_col: 选择某一列作为index</span><br><span class="line">coerce_float:非常有用，将数字形式的字符串直接以float型读入</span><br><span class="line">parse_dates:将某一列日期型字符串转换为datetime型数据，与pd.to_datetime函数功能类似。可以直接提供需要转换的列名以默认的日期形式转换，也可以用字典的格式提供列名和转换的日期格式，比如&#123;column_name: format string&#125;（format string：&quot;%Y:%m:%H:%M:%S&quot;）。</span><br><span class="line">columns:要选取的列。一般没啥用，因为在sql命令里面一般就指定要选择的列了</span><br><span class="line">chunksize：如果提供了一个整数值，那么就会返回一个generator，每次输出的行数就是提供的值的大小。</span><br><span class="line">##read_sql本质上是read_sql_table、read_sql_query的统一方式。</span><br><span class="line">三者都return返回DataFrame。</span><br></pre></td></tr></table></figure>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql_table.html#pandas.read_sql_table"><code>read_sql_table</code></a></p>
<p>Read SQL database table into a DataFrame.</p>
<p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_sql_query.html#pandas.read_sql_query"><code>read_sql_query</code></a></p>
<p>Read SQL query into a DataFrame.</p>
<p><a class="link"   href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_sql.html" >to_sql<i class="fas fa-external-link-alt"></i></a><br>主要有以下几个参数：</p>
<ul>
<li>  name: 输出的表名</li>
<li>  con: 与read_sql中相同</li>
<li>  if_exits： 三个模式：fail，若表存在，则不输出；replace：若表存在，覆盖原来表里的数据；append：若表存在，将数据写到原表的后面。默认为fail</li>
<li>  index：是否将df的index单独写到一列中</li>
<li>  index_label:指定列作为df的index输出，此时index为True</li>
<li>  chunksize： 同read_sql</li>
<li>dtype: 指定列的输出到数据库中的数据类型。字典形式储存：{column_name: sql_dtype}。常见的数据类型有sqlalchemy.types.INTEGER(), sqlalchemy.types.NVARCHAR(),sqlalchemy.Datetime()等，具体数据类型可以参考<a class="link"   href="http://docs.sqlalchemy.org/en/latest/core/type_basics.html#sql-standard-and-multiple-vendor-types" >这里<i class="fas fa-external-link-alt"></i></a><br>  还是以写到mysql数据库为例：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.to_sql(name=&#x27;table&#x27;, </span><br><span class="line">          con=con, </span><br><span class="line">          if_exists=&#x27;append&#x27;, </span><br><span class="line">          index=False,</span><br><span class="line">          dtype=&#123;&#x27;col1&#x27;:sqlalchemy.types.INTEGER(),</span><br><span class="line">                 &#x27;col2&#x27;:sqlalchemy.types.NVARCHAR(length=255),</span><br><span class="line">                 &#x27;col_time&#x27;:sqlalchemy.DateTime(),</span><br><span class="line">                 &#x27;col_bool&#x27;:sqlalchemy.types.Boolean</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure></li>
<li>*注：**如果不提供dtype,to_sql会自动根据df列的dtype选择默认的数据类型输出，比如字符型会以sqlalchemy.types.TEXT类型输出，相比NVARCHAR，TEXT类型的数据所占的空间更大，所以一般会指定输出为NVARCHAR；而如果df的列的类型为np.int64时，将会导致无法识别并转换成INTEGER型，需要事先转换成int类型（用map，apply函数可以方便的转换）。<br><a class="link"   href="https://www.cnblogs.com/arkenstone/p/6271923.html" >https://www.cnblogs.com/arkenstone/p/6271923.html<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="第二种：cursor-execute-直接写入"><a href="#第二种：cursor-execute-直接写入" class="headerlink" title="第二种：cursor.execute()直接写入"></a>第二种：cursor.execute()直接写入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#插入方法无需改动，传入一个动态变化的字典</span><br><span class="line">connect = pymysql.connect(host=&#x27;&#x27;,user=&#x27;&#x27;,db = &#x27;&#x27;,password=&#x27;&#x27;,port=3306,charset=&#x27;utf8&#x27;)</span><br><span class="line">cursor=connect.cursor()</span><br><span class="line">data = &#123;&quot;id&quot;:&#x27;100&#x27;,&#x27;name&#x27;:&#x27;Bob&#x27;&#125;</span><br><span class="line">table= &#x27;stuinfo&#x27;</span><br><span class="line">keys = &#x27;, &#x27;.join(data.keys())</span><br><span class="line">values = &#x27;, &#x27;.join([&#x27;%s&#x27;]*len(data))</span><br><span class="line">sql = f&quot;insert into &#123;table&#125;(&#123;keys&#125;) values(&#123;values&#125;)&quot;</span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql,tuple(data.values()))</span><br><span class="line">    connect.commit()</span><br><span class="line">    cursor.execute(&#x27;select * from &#123;table&#125;&#x27;.format(table=table))</span><br><span class="line">    print(&#x27;执行成功&#x27;,cursor.fetchall())</span><br><span class="line">except:</span><br><span class="line">    print(&quot;插入失败，数据回滚&quot;)</span><br><span class="line">    connect.rollback()</span><br></pre></td></tr></table></figure>
<h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#更新，把Bon的age更新为28</span><br><span class="line">sql = &quot;update stuinfo set id=%s where name = %s&quot;</span><br><span class="line">cursor.execute(sql,(&quot;28&quot;,&#x27;Bob&#x27;))</span><br><span class="line">connect.commit()</span><br><span class="line">cursor.execute(&#x27;select * from stuinfo&#x27;)</span><br><span class="line">print(&quot;Successful:&quot;,cursor.fetchall())</span><br></pre></td></tr></table></figure>
<h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除数据</span><br><span class="line">sql = &quot;delete from stuinfo where id &gt;=10&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">connect.commit()</span><br><span class="line">cursor.execute(&quot;select * from stuinfo&quot;)</span><br><span class="line">print(cursor.fetchall())</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python办公自动化：操作excel</title>
    <url>/2021/12/08/python%E5%8A%9E%E5%85%AC%E8%87%AA%E5%8A%A8%E5%8C%96%EF%BC%9A%E6%93%8D%E4%BD%9Cexcel/</url>
    <content><![CDATA[<p>#python 使用 openpyxl 操作 excel</p>
<ul>
<li><p>openpyxl 最好用的 python 操作 excel 表格库，不接受反驳（想反驳自己去学其他的） </p>
</li>
<li><p>openpyxl 官网链接：<a class="link"   href="https://openpyxl.readthedocs.io/en/stable/" >https://openpyxl.readthedocs.io/en/stable/<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p><a class="link"   href="https://www.zhihu.com/column/c_1261255815367487488" >https://www.zhihu.com/column/c_1261255815367487488<i class="fas fa-external-link-alt"></i></a></p>
</li>
<li><p>openpyxl 只支持【.xlsx / .xlsm / .xltx / .xltm】格式的文件</p>
</li>
<li><p>建议在jupyter-notebook里面操作</p>
<h3 id="打开-Excel-表格并获取表格名称；通过-sheet-名称获取表格"><a href="#打开-Excel-表格并获取表格名称；通过-sheet-名称获取表格" class="headerlink" title="打开 Excel 表格并获取表格名称；通过 sheet 名称获取表格"></a>打开 Excel 表格并获取表格名称；通过 sheet 名称获取表格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">workbook.sheetnames #打开 Excel 表格并获取表格名称</span><br><span class="line">sheet = workbook[&quot;Sheet1&quot;] #通过 sheet 名称获取表格</span><br><span class="line">sheet.dimensions # 获取表格的尺寸大小(几行几列数据)</span><br></pre></td></tr></table></figure>
<h3 id="获取表格内某个格子的数据"><a href="#获取表格内某个格子的数据" class="headerlink" title="获取表格内某个格子的数据"></a>获取表格内某个格子的数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active #打开激活的表格</span><br><span class="line">print(sheet) </span><br><span class="line">cell1 = sheet[&quot;A1&quot;] #获取 A1 格子的数据</span><br><span class="line">cell2 = sheet[&quot;C11&quot;] </span><br><span class="line">cell3 = sheet.cell(row = 1,column = 1) #通过指定行列号获取格子数据</span><br><span class="line">cell4 = sheet.cell(row = 11,column = 3)</span><br><span class="line">print(cell1.value, cell1.row, cell1.column, cell1.coordinate) </span><br><span class="line">#获取格子中的值、行数、列数、坐标；</span><br><span class="line">sheet[&quot;A&quot;] --- 获取 A 列的数据</span><br><span class="line">sheet[&quot;A:C&quot;] --- 获取 A,B,C 三列的数据</span><br><span class="line">sheet[5] --- 只获取第 5 行的数据</span><br><span class="line"># 获取 A1:C2 区域的值</span><br><span class="line">cell = sheet[&quot;A1:C2&quot;] </span><br><span class="line">print(cell) </span><br><span class="line">for i in cell: </span><br><span class="line">  for j in i: </span><br><span class="line">    print(j.value)</span><br></pre></td></tr></table></figure></li>
<li><p>.iter_rows()方式（类似pandas里面的iterrows）有.iter_rows()方式，肯定也会有.iter_cols()方式，只不过一个是按行读取，一个是按<br>列读取。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line"># 按行获取值</span><br><span class="line">for i in sheet.iter_rows(min_row=2, max_row=5, min_col=1, max_col=2): #按行读取</span><br><span class="line">  for j in i: </span><br><span class="line">    print(j.value)</span><br><span class="line"># 按列获取值</span><br><span class="line">for i in sheet.iter_cols(min_row=2, max_row=5, min_col=1, max_col=2): #按列读取</span><br><span class="line">  for j in i: </span><br><span class="line">    print(j.value)</span><br><span class="line">for i in sheet.rows: #获取所有行</span><br><span class="line">  print(i)</span><br></pre></td></tr></table></figure>
<h3 id="修改表格中的内容-向某个格子中写入内容并保存"><a href="#修改表格中的内容-向某个格子中写入内容并保存" class="headerlink" title="修改表格中的内容: 向某个格子中写入内容并保存"></a>修改表格中的内容: 向某个格子中写入内容并保存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet)</span><br><span class="line">sheet[&quot;A1&quot;] = &quot;哈喽&quot; </span><br><span class="line"># 这句代码也可以改为 cell = sheet[&quot;A1&quot;] cell.value = &quot;哈喽&quot; </span><br><span class="line">workbook.save(filename = &quot;哈喽.xlsx&quot;) </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">注意：我们将“A1”单元格的数据改为了“哈喽”，并另存为了“哈喽.xlsx”文</span><br><span class="line">件。 如果我们保存的时候，不修改表名，相当于直接修改源文件；</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>.append()方式：会在表格已有的数据后面，按行插入数据(很有用)；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active</span><br><span class="line">print(sheet) </span><br><span class="line">data = [ </span><br><span class="line">[&quot;唐僧&quot;,&quot;男&quot;,&quot;180cm&quot;], </span><br><span class="line">[&quot;孙悟空&quot;,&quot;男&quot;,&quot;188cm&quot;], </span><br><span class="line">[&quot;猪八戒&quot;,&quot;男&quot;,&quot;175cm&quot;], </span><br><span class="line">[&quot;沙僧&quot;,&quot;男&quot;,&quot;176cm&quot;], </span><br><span class="line">] </span><br><span class="line">for row in data: </span><br><span class="line">  sheet.append(row) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="使用-excel-函数公式-很有用"><a href="#使用-excel-函数公式-很有用" class="headerlink" title="使用 excel 函数公式(很有用)"></a>使用 excel 函数公式(很有用)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import openpyxl</span><br><span class="line">from openpyxl.utils import FORMULAE </span><br><span class="line">print(FORMULAE)#python 支持写哪些“excel 函数公式”</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这是我们在 excel 中输入的公式</span><br><span class="line">=IF(RIGHT(C2,2)=&quot;cm&quot;,C2,SUBSTITUTE(C2,&quot;m&quot;,&quot;&quot;)*100&amp;&quot;cm&quot;) </span><br><span class="line"># 那么，在 python 中怎么插入 excel 公式呢？</span><br><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet[&quot;D1&quot;] = &quot;标准身高&quot; </span><br><span class="line">for i in range(2,16): </span><br><span class="line">  sheet[&quot;D&#123;&#125;&quot;.format(i)] = </span><br><span class="line">  &#x27;=IF(RIGHT(C&#123;&#125;,2)=&quot;cm&quot;,C&#123;&#125;,SUBSTITUTE(C&#123;&#125;,&quot;m&quot;,&quot;&quot;)*100&amp;&quot;cm&quot;)&#x27;.format(i,i,i) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="insert-cols-和-insert-rows-：插入空行和空列"><a href="#insert-cols-和-insert-rows-：插入空行和空列" class="headerlink" title=".insert_cols()和.insert_rows()：插入空行和空列"></a>.insert_cols()和.insert_rows()：插入空行和空列</h3></li>
<li><p>.insert_cols(idx=数字编号, amount=要插入的列数)，插入的位置是在 idx 列数的左侧插入；</p>
</li>
<li><p>.insert_rows(idx=数字编号, amount=要插入的行数)，插入的行数是在 idx 行数的下方插入；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet.insert_cols(idx=4,amount=2) #从第4列开始插入2列</span><br><span class="line">sheet.insert_rows(idx=5,amount=4) #第5行开始插入2行</span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="delete-rows-和-delete-cols-：删除行和列"><a href="#delete-rows-和-delete-cols-：删除行和列" class="headerlink" title=".delete_rows()和.delete_cols()：删除行和列"></a>.delete_rows()和.delete_cols()：删除行和列</h3><ul>
<li>.delete_rows(idx=数字编号, amount=要删除的行数)</li>
<li>.delete_cols(idx=数字编号, amount=要删除的列数)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active print(sheet) </span><br><span class="line"># 删除第一列，第一行</span><br><span class="line">sheet.delete_cols(idx=1) </span><br><span class="line">sheet.delete_rows(idx=1) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="move-range-：移动格子"><a href="#move-range-：移动格子" class="headerlink" title=".move_range()：移动格子"></a>.move_range()：移动格子</h3></li>
<li>.move_range(“数据区域”,rows=,cols=)：row正整数表示向下、负整数表示向上移动；cols正整数表示向右、负整数表示向左移动。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sheet.move_range(&quot;C1:D4&quot;,rows=2,cols=-1)# 向左移动两列，向下移动两行</span><br></pre></td></tr></table></figure>
<h3 id="create-sheet-：创建新的-sheet-表格"><a href="#create-sheet-：创建新的-sheet-表格" class="headerlink" title=".create_sheet()：创建新的 sheet 表格"></a>.create_sheet()：创建新的 sheet 表格</h3><ul>
<li>.create_sheet(“新的 sheet 名”)：创建一个新的 sheet 表；<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">workbook.create_sheet(&quot;我是一个新的 sheet&quot;) </span><br><span class="line">print(workbook.sheetnames) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="remove-：删除某个-sheet-表"><a href="#remove-：删除某个-sheet-表" class="headerlink" title=".remove()：删除某个 sheet 表"></a>.remove()：删除某个 sheet 表</h3><ul>
<li>.remove(“sheet 名”)：删除某个 sheet 表；<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;test.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(workbook.sheetnames) </span><br><span class="line"># 这个相当于激活的这个 sheet 表，激活状态下，才可以操作；</span><br><span class="line">sheet = workbook[&#x27;我是一个新的 sheet&#x27;] </span><br><span class="line">print(sheet) </span><br><span class="line">workbook.remove(sheet) </span><br><span class="line">print(workbook.sheetnames) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="copy-worksheet-：复制一个-sheet-表到另外一张-excel-表"><a href="#copy-worksheet-：复制一个-sheet-表到另外一张-excel-表" class="headerlink" title=".copy_worksheet()：复制一个 sheet 表到另外一张 excel 表"></a>.copy_worksheet()：复制一个 sheet 表到另外一张 excel 表</h3><ul>
<li>这个操作的实质，就是复制某个 excel 表中的 sheet 表，然后将文件存储到另外一张excel 表中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;a.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(&quot;a.xlsx 中有这几个 sheet 表&quot;,workbook.sheetnames) </span><br><span class="line">sheet = workbook[&#x27;姓名&#x27;] </span><br><span class="line">workbook.copy_worksheet(sheet) </span><br><span class="line">workbook.save(filename = &quot;test.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="sheet-title：修改-sheet-表的名称"><a href="#sheet-title：修改-sheet-表的名称" class="headerlink" title="sheet.title：修改 sheet 表的名称"></a>sheet.title：修改 sheet 表的名称</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;a.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet.title = &quot;我是修改后的 sheet 名&quot; </span><br><span class="line">print(sheet)</span><br></pre></td></tr></table></figure>

<h3 id="创建新的-excel-表格文件"><a href="#创建新的-excel-表格文件" class="headerlink" title="创建新的 excel 表格文件"></a>创建新的 excel 表格文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl import Workbook </span><br><span class="line">workbook = Workbook() </span><br><span class="line">sheet = workbook.active </span><br><span class="line">sheet.title = &quot;表格 1&quot; </span><br><span class="line">workbook.save(filename = &quot;新建的 excel 表格&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="sheet-freeze-panes：冻结窗口"><a href="#sheet-freeze-panes：冻结窗口" class="headerlink" title="sheet.freeze_panes：冻结窗口"></a>sheet.freeze_panes：冻结窗口</h3><ul>
<li>.freeze_panes = “单元格”<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet.freeze_panes = &quot;C3&quot; </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;) </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">冻结窗口以后，你可以打开源文件，进行检验；</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="sheet-auto-filter-ref：给表格添加“筛选器”"><a href="#sheet-auto-filter-ref：给表格添加“筛选器”" class="headerlink" title="sheet.auto_filter.ref：给表格添加“筛选器”"></a>sheet.auto_filter.ref：给表格添加“筛选器”</h3><ul>
<li>.auto_filter.ref = sheet.dimension 给所有字段添加筛选器；</li>
<li>.auto_filter.ref = “A1” 给 A1 这个格子添加“筛选器”，就是给第一列添加“筛选器”；<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename = &quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">print(sheet) </span><br><span class="line">sheet.auto_filter.ref = sheet[&quot;A1&quot;] </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="批量调整字体和样式"><a href="#批量调整字体和样式" class="headerlink" title="批量调整字体和样式"></a>批量调整字体和样式</h2><h3 id="1、修改字体样式"><a href="#1、修改字体样式" class="headerlink" title="1、修改字体样式"></a>1、修改字体样式</h3><ul>
<li>Font(name=字体名称,size=字体大小,bold=是否加粗,italic=是否斜体,color=字体颜色)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import Font </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell = sheet[&quot;A1&quot;] </span><br><span class="line">font = Font(name=&quot;微软雅黑&quot;,size=20,bold=True,italic=True,color=&quot;FF0000&quot;) </span><br><span class="line">cell.font = font</span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;) </span><br><span class="line">&quot;&quot;&quot; </span><br><span class="line">这个 color 是 RGB 的 16 进制表示，自己下去百度学习；</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、获取表格中格子的字体样式"><a href="#2、获取表格中格子的字体样式" class="headerlink" title="2、获取表格中格子的字体样式"></a>2、获取表格中格子的字体样式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import Font </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell = sheet[&quot;A2&quot;] </span><br><span class="line">font = cell.font </span><br><span class="line">print(font.name, font.size, font.bold, font.italic, font.color)</span><br></pre></td></tr></table></figure>

<h3 id="3、设置对齐样式"><a href="#3、设置对齐样式" class="headerlink" title="3、设置对齐样式"></a>3、设置对齐样式</h3><ul>
<li><p>Alignment(horizontal=水平对齐模式,vertical=垂直对齐模式,text_rotation=旋转角<br>度,wrap_text=是否自动换行)</p>
</li>
<li><p>水平对齐：‘distributed’，‘justify’，‘center’，‘leftfill’， ‘centerContinuous’，‘right，<br>‘general’；</p>
</li>
<li><p>垂直对齐：‘bottom’，‘distributed’，‘justify’，‘center’，‘top’；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import Alignment </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell = sheet[&quot;A1&quot;]</span><br><span class="line">alignment = Alignment(horizontal=&quot;center&quot;,vertical=&quot;center&quot;,text_rotation=45,wrap_text=True) </span><br><span class="line">cell.alignment = alignment </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="4、设置边框样式"><a href="#4、设置边框样式" class="headerlink" title="4、设置边框样式"></a>4、设置边框样式</h3></li>
<li><p>Side(style=边线样式，color=边线颜色)</p>
</li>
<li><p>Border(left=左边线样式，right=右边线样式，top=上边线样式，bottom=下边线样式)</p>
</li>
<li><p>style 参数的种类： ‘double, ‘mediumDashDotDot’, ‘slantDashDot’, ‘dashDotDot’,’dotted’,’hair’,<br>‘mediumDashed, ‘dashed’, ‘dashDot’, ‘thin’, ‘mediumDashDot’,’medium’, ‘thick’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import Side,Border </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell = sheet[&quot;D6&quot;]</span><br><span class="line">side1 = Side(style=&quot;thin&quot;,color=&quot;FF0000&quot;) </span><br><span class="line">side2 = Side(style=&quot;thick&quot;,color=&quot;FFFF0000&quot;) </span><br><span class="line">border = Border(left=side1,right=side1,top=side2,bottom=side2) </span><br><span class="line">cell.border = border </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5、设置填充样式"><a href="#5、设置填充样式" class="headerlink" title="5、设置填充样式"></a>5、设置填充样式</h3><ul>
<li><p>PatternFill(fill_type=填充样式，fgColor=填充颜色）</p>
</li>
<li><p>GradientFill(stop=(渐变颜色 1，渐变颜色 2……))</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from openpyxl.styles import PatternFill,GradientFill </span><br><span class="line">from openpyxl import load_workbook </span><br><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line">cell_b9 = sheet[&quot;B9&quot;] </span><br><span class="line">pattern_fill = PatternFill(fill_type=&quot;solid&quot;,fgColor=&quot;99ccff&quot;) </span><br><span class="line">cell_b9.fill = pattern_fill </span><br><span class="line">cell_b10 = sheet[&quot;B10&quot;]</span><br><span class="line">gradient_fill = GradientFill(stop=(&quot;FFFFFF&quot;,&quot;99ccff&quot;,&quot;000000&quot;)) </span><br><span class="line">cell_b10.fill = gradient_fill </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="6、设置行高和列宽"><a href="#6、设置行高和列宽" class="headerlink" title="6、设置行高和列宽"></a>6、设置行高和列宽</h3></li>
<li><p>.row_dimensions[行编号].height = 行高</p>
</li>
<li><p>.column_dimensions[列编号].width = 列宽</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;) </span><br><span class="line">sheet = workbook.active </span><br><span class="line"># 设置第 1 行的高度</span><br><span class="line">sheet.row_dimensions[1].height = 50 #将整个表的行高设置为 50</span><br><span class="line"># 设置 B 列的宽度</span><br><span class="line">sheet.column_dimensions[&quot;B&quot;].width = 20 #列宽设置为 30；</span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="7、合并单元格"><a href="#7、合并单元格" class="headerlink" title="7、合并单元格"></a>7、合并单元格</h3><ul>
<li>.merge_cells(待合并的格子编号)</li>
<li>.merge_cells(start_row=起始行号，start_column=起始列号，end_row=结束行号，<br>end_column=结束列号)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">workbook = load_workbook(filename=&quot;花园.xlsx&quot;)</span><br><span class="line">sheet = workbook.active sheet.merge_cells(&quot;C1:D2&quot;) </span><br><span class="line">sheet.merge_cells(start_row=7,start_column=1,end_row=8,end_column=3) </span><br><span class="line">workbook.save(filename = &quot;花园.xlsx&quot;)</span><br></pre></td></tr></table></figure>
当然，也有“取消合并单元格”，用法一致。</li>
<li>.unmerge_cells(待合并的格子编号)</li>
<li>.unmerge_cells(start_row=起始行号，start_column=起始列号，end_row=结束行号，<br>end_column=结束列号)</li>
</ul>
]]></content>
      <tags>
        <tag>python办公自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据采集：selenium爬虫、自动化</title>
    <url>/2021/05/05/python%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%EF%BC%9Aselenium%E7%88%AC%E8%99%AB%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">中文文档https://python-selenium-zh.readthedocs.io/zh_CN/latest/</span><br></pre></td></tr></table></figure>
<p>装包：pip install selenium<br>下载chrome：<a class="link"   href="https://www.google.cn/chrome/" >https://www.google.cn/chrome/<i class="fas fa-external-link-alt"></i></a><br>下驱动：<a class="link"   href="https://chromedriver.storage.googleapis.com/index.html" >https://chromedriver.storage.googleapis.com/index.html<i class="fas fa-external-link-alt"></i></a>  注意浏览器驱动 必须要和浏览器版本匹配<br>这是个zip包，下载下来之后，解压里面的程序文件 chromedriver.exe 到scripts路径下<br>跑一下看看感觉来了没有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">try:</span><br><span class="line">    browser.get(&#x27;https://www.baidu.com&#x27;)</span><br><span class="line">    input = browser.find_element_by_id(&#x27;kw&#x27;)</span><br><span class="line">    input.send_keys(&#x27;Python&#x27;)</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    wait = WebDriverWait(browser, 10)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID, &#x27;content_left&#x27;)))</span><br><span class="line">    print(browser.current_url)</span><br><span class="line">    print(browser.get_cookies())</span><br><span class="line">    print(browser.page_source)</span><br><span class="line">finally:hexo</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>
<p>不可能一下就会的，慢慢来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_54733110/article/details/119027005  python万字博文教你玩嗨selenium库</span><br><span class="line">https://mp.weixin.qq.com/s?__biz=MzI0OTc0MzAwNA==&amp;mid=2247487680&amp;idx=1&amp;sn=e40947f382116ff59761f250ee45dce3  模拟登录淘宝</span><br><span class="line">https://www.pianshen.com/article/345981989/  判断元素16种方法expected_conditions</span><br><span class="line">https://github.com/Python3WebSpider/Python3WebSpider/blob/master/7.1-Selenium%E7%9A%84%E4%BD%BF%E7%94%A8.md</span><br><span class="line">http://www.byhy.net/tut/auto/selenium/01/这个作者写的很好</span><br><span class="line">https://www.bilibili.com/video/av64421994/?p=1简直是保姆级教学，</span><br><span class="line">希望你学会了不要乱搞</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python酒类数据分析</title>
    <url>/2020/05/06/python%E9%85%92%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.kf1spxcftw0.png"
                     
                ></p>
<h1 id="一、数据概述"><a href="#一、数据概述" class="headerlink" title="一、数据概述"></a>一、数据概述</h1><p>‘id’,’name’,’price’,’sales’,’ad_word’,’buy_act’,’vote_count’,’url’,’date’,’brand’分别为销售数据的商品ID，商品名称，单价，销量，广告词，促销活动，链接，日期，品牌。<br>以及自构属性‘amount’：销售额，‘month’：月份，‘price_level’：价格区间。</p>
<h1 id="二、提出问题"><a href="#二、提出问题" class="headerlink" title="二、提出问题"></a>二、提出问题</h1><p>1、行业大盘近期（2018/2/27）表现？各价位段表现？<br>总体表现，各价位表现，哪个价位的产品最火，各厂家表现？<br>近期各行业的广告词、促销活动怎么样<br>2、行业大盘总体态势怎样？<br>销量与评论数、单价的关系？<br>时间序列下的行业产品走势？<br>3、如何评价泸州老窖品牌？(可从多角度，规模增长趋势、产品结构等)<br>产品规模、增长趋势、友商竞争、行业水平？</p>
<h1 id="三、行业大盘近周期（2018-2-27）表现？各价位段表现？"><a href="#三、行业大盘近周期（2018-2-27）表现？各价位段表现？" class="headerlink" title="三、行业大盘近周期（2018/2/27）表现？各价位段表现？"></a>三、行业大盘近周期（2018/2/27）表现？各价位段表现？</h1><h3 id="行业大盘2018-2-27总体表现"><a href="#行业大盘2018-2-27总体表现" class="headerlink" title="行业大盘2018/2/27总体表现"></a>行业大盘2018/2/27总体表现</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4jvl2phdo45c.png"
                     
                ></p>
<h6 id="2018-2-27行业的总销售量为5-663030e-05，总评价数为1-255655e-06，总销售额达1-842307e-08。"><a href="#2018-2-27行业的总销售量为5-663030e-05，总评价数为1-255655e-06，总销售额达1-842307e-08。" class="headerlink" title="2018/2/27行业的总销售量为5.663030e+05，总评价数为1.255655e+06，总销售额达1.842307e+08。"></a>2018/2/27行业的总销售量为5.663030e+05，总评价数为1.255655e+06，总销售额达1.842307e+08。</h6><h6 id="平均单价价格为417元，平均销售642份，平均销售额达209115-4元"><a href="#平均单价价格为417元，平均销售642份，平均销售额达209115-4元" class="headerlink" title="平均单价价格为417元，平均销售642份，平均销售额达209115.4元"></a>平均单价价格为417元，平均销售642份，平均销售额达209115.4元</h6><h6 id="单价中位数199，说明少数高价位的酒提高了总体均值"><a href="#单价中位数199，说明少数高价位的酒提高了总体均值" class="headerlink" title="单价中位数199，说明少数高价位的酒提高了总体均值"></a>单价中位数199，说明少数高价位的酒提高了总体均值</h6><h6 id="销量中位数为148，说明少数及销量高的天数提升了平均交易量"><a href="#销量中位数为148，说明少数及销量高的天数提升了平均交易量" class="headerlink" title="销量中位数为148，说明少数及销量高的天数提升了平均交易量"></a>销量中位数为148，说明少数及销量高的天数提升了平均交易量</h6><h6 id="销售额中位数低于总体均值相差巨大，可能存在爆发交易的情况。"><a href="#销售额中位数低于总体均值相差巨大，可能存在爆发交易的情况。" class="headerlink" title="销售额中位数低于总体均值相差巨大，可能存在爆发交易的情况。"></a>销售额中位数低于总体均值相差巨大，可能存在爆发交易的情况。</h6><h6 id="一天中出现的最高交易量是21685份订单，最高交易额是65011630元，最高单价的白酒为6588元，最高评论数为67514条，最低为0条。"><a href="#一天中出现的最高交易量是21685份订单，最高交易额是65011630元，最高单价的白酒为6588元，最高评论数为67514条，最低为0条。" class="headerlink" title="一天中出现的最高交易量是21685份订单，最高交易额是65011630元，最高单价的白酒为6588元，最高评论数为67514条，最低为0条。"></a>一天中出现的最高交易量是21685份订单，最高交易额是65011630元，最高单价的白酒为6588元，最高评论数为67514条，最低为0条。</h6><h3 id="各价位表现"><a href="#各价位表现" class="headerlink" title="各价位表现"></a>各价位表现</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6dcpqx9r3pts.png"
                     
                ></p>
<p>在行业大盘最近一个周期内，可以看到销量最好和评论数最高的均是是100-200价位的白酒。<br>在价位50以下白酒销量和评论数出现大反差，在销量差距悬殊的情况下，该类白酒的评论数超过200-500价位白酒的评论数，但是销量偏低说明该类白酒在市场中有较高流行度的同时可能也存在较多的槽点。<br>中等价位（100-500）是市场的主要潮流所在，由中价位向低价位过度的产品（50-100）同样能稳住市场，获得较高的销量与人气。<br>3000以上的销量与评论数极低，符合当今社会人们财富资源分配或生活消费水平的差距，高消费人群只占极少数。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3ltt1wzyecxs.png"
                     
                ></p>
<p>1000-3000价位席卷市场，高单价情况下即时在低销量时也能远超越其他价位销售额。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.2gkvdbfp9w3k.png"
                     
                ></p>
<p>基本呈现单价越高，评论数越少。人们总是低价商品的要求过于执着？</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.52y9ub6wn7gg.png"
                     
                ></p>
<p>由于其1000-3000单价基数大，导致金额最大</p>
<h3 id="各厂家表现"><a href="#各厂家表现" class="headerlink" title="各厂家表现"></a>各厂家表现</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4sep09ocakcg.png"
                     
                ></p>
<p>最近一周期五粮液销量最高达到10万瓶以上，远领先于其他厂家。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3nszvh59q70g.png"
                     
                ></p>
<p>五粮液产品市场评论数最高，应该是广告宣传或者产品质量做得好。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3ar839q1g2io.png"
                     
                ></p>
<p>茅台近期销售总额位于行业最高水平，销售额近7500万。五粮液可能由于产品单价偏低，销售总额位居第三，接近2000万。</p>
<h3 id="最近一个周期广告、促销活动怎么做的？"><a href="#最近一个周期广告、促销活动怎么做的？" class="headerlink" title="最近一个周期广告、促销活动怎么做的？"></a>最近一个周期广告、促销活动怎么做的？</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6gq0tn4yo9og.png"
                     
                ></p>
<p>广告词一以‘天猫配送’，‘正品保证’等为主要标语，‘东方习酒’，‘猫超自营’，‘地道北京味’也是主要宣传方向。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.5ancn0q8cccg.png"
                     
                ></p>
<p>促销活动主要以‘满一1或2送任意一件赠品，赠完为止’作为主要促销活动。</p>
<h1 id="四、行业大盘总体态势怎样？"><a href="#四、行业大盘总体态势怎样？" class="headerlink" title="四、行业大盘总体态势怎样？"></a>四、行业大盘总体态势怎样？</h1><h3 id="销量与单价、评论数的关系"><a href="#销量与单价、评论数的关系" class="headerlink" title="销量与单价、评论数的关系"></a>销量与单价、评论数的关系</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3mw3xybva7nk.png"
                     
                ></p>
<p>评论数量变化与销量基本呈线性变化。评论数代表市场反应，市场热度越高，销量越高。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4o6xp1btc9g.png"
                     
                ></p>
<p>单价与销量基本成反比例变化。单价越高，销量越低，单价越低，销量越高。<br>###时间序列下的行业产品走势<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3dp2nbjq0t34.png"
                     
                ></p>
<p>200-500价位段的商品销量呈上升趋势，0-50和50-100的商品在2017年11月上升后出现持续下降，100-200的商品在上升后保持平稳，基本站稳市场。500-3000区间内商品在同年12月后出现小范围增长，因其单价基数较大，可能引起销售额大幅增长。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.5ucvrzq2vfcw.png"
                     
                ></p>
<p>除0-50和3000以上产品外，其他商品都在2017年11月后出现销售额显著增长，推测可能是双十一以及其他促销活动，但是对0-50和3000以上的商品销售状态基本无影响。1000-3000区间商品在2017年12月过后出现直线式增长，100-500区间产品作为市场主力也出现增长趋势。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4ucsu4issccg.png"
                     
                ></p>
<p>3000月以上的酒类在11月出现价格大额下跌，其他区间商品单价均走势平稳。</p>
<h1 id="五、泸州老窖自身增长的趋势，产品结构，行业水平"><a href="#五、泸州老窖自身增长的趋势，产品结构，行业水平" class="headerlink" title="五、泸州老窖自身增长的趋势，产品结构，行业水平"></a>五、泸州老窖自身增长的趋势，产品结构，行业水平</h1><h3 id="泸州老窖产品规模"><a href="#泸州老窖产品规模" class="headerlink" title="泸州老窖产品规模"></a>泸州老窖产品规模</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.t3dlkrd7ojk.png"
                     
                ></p>
<p>泸州老窖品牌主打50-500价位产品覆盖市场，其中3000+超高价酒类占比与0-50低价品类占比最低，均低于500-3000档位，说明泸州老窖在市场的品牌形象与战略目标是做好中高端酒类产品。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.2jviql0m0lc0.png"
                     
                ></p>
<p>在2017年12月产品规模突然增大，应该是与行业竞争或市场需求相关。 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.nkodwqpgads.png"
                     
                ></p>
<p>销量在十一月份出现大幅增长，持续到次年一月份出现显著下降。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.hxptteb9rh.png"
                     
                ></p>
<p>总销售额与销量表现相似，也是在十一月份出现大幅增长，持续到次年一月份出现显著下降。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.5cjonwptotq8.png"
                     
                ></p>
<p>0-50区间产品在十一月后大幅增长，后持续衰弱。50-500区间商品同期均出现显著增长，后缓慢下降趋于稳定。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.2n30ocmjuzr4.png"
                     
                ></p>
<p>200-500与1000-3000区间商品由于其单价基数较大，在同年十一月销量保证的前提下，出现大幅增长。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4843aw978akg.png"
                     
                ></p>
<p>3000+产品在2017年7月-9月出现波动后趋于平稳。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3g6dp00zw7cw.png"
                     
                ></p>
<p>17年9月可能出现了一些问题，除500-1000区间外，都出现了先增后降的趋势。</p>
<h3 id="那种广告词、促销标语出现的最多"><a href="#那种广告词、促销标语出现的最多" class="headerlink" title="那种广告词、促销标语出现的最多"></a>那种广告词、促销标语出现的最多</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.79nh5qchwhds.png"
                     
                ></p>
<p>该品牌主打广告关键词： ‘’限时直降‘’，‘甄选好货’，‘厂家直供’。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6vpepnq4p2m8.png"
                     
                ></p>
<p>主打的促销标语为 ‘’送任意一件赠品，赠完即止‘’。</p>
<h3 id="选择牛栏山作为泸州老窖竞争对手"><a href="#选择牛栏山作为泸州老窖竞争对手" class="headerlink" title="选择牛栏山作为泸州老窖竞争对手"></a>选择牛栏山作为泸州老窖竞争对手</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.7k75jdss8f0g.png"
                     
                ></p>
<p>牛栏山品牌在产品布局上和泸州老窖都是主打50-500价位段商品布局，但是牛栏山在0-50上的产品数多于500-1000价位的产品数量。且没有3000元以上产品上市，可见牛栏山品牌试图留住中端价位产品客户，拉拢低价位产品客户的战略方针。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.585gbomsxjsw.png"
                     
                ></p>
<p>与泸州老窖相似均在十二月出现了较大幅度的增长。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.5tcjs54m9rwg.png"
                     
                ></p>
<p>泸州老窖只在200-300和超1000元以上的产品销量小范围领先友商，但由于单价基数较大，可能会有意想不到的效果哦</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.696y93qi0eps.png"
                     
                ></p>
<p>泸州老窖销售额仅在200-500和1000元以上三个价位段领先友商，在50-200价位，销售额较大程度低于友商。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.65kolxn2i16o.png"
                     
                ></p>
<p>除了200-500和1000以上价位的产品，泸州老窖品牌产品收到的市场评论与反馈均低于友商，可见友商的宣传力度或产品口碑在市场中占有较高热度 。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.1ebr4yfjo2n4.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6uo6tbp5jfk0.png"
                     
                ></p>
<p>可以看到两个品牌的销售额主要来源产品类别有明显差异。</p>
<h3 id="泸州老窖在行业的水平如何"><a href="#泸州老窖在行业的水平如何" class="headerlink" title="泸州老窖在行业的水平如何"></a>泸州老窖在行业的水平如何</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.23phzpw6q96o.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.535us8b7xog0.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6n2czq2ijcow.png"
                     
                ><br>泸州老窖位于行业的上游水平，产品规模完善，各价位商品数量布局体现了明确的行业目标：要做中高端酒类产品的佼佼者。且不放弃低价位的0-50系列产品，全面覆盖市场，在给定的时间数据中，各区间段产品除0-50与3000+以外，其他商品的销量与销售额均呈持续缓慢上升趋势。可以看到该企业处于一个蓬勃向上，逐步冲向高端的行业发展状态。</p>
<h1 id="六、分析结论"><a href="#六、分析结论" class="headerlink" title="六、分析结论"></a>六、分析结论</h1><p>1、近期行业呈现蓬勃向上的发展状态，0-50价位产品的销量与评论数出现较大市场反差，100-200价位段的商品销量最火，位于市场销量及销售额榜首的是茅台品牌，五粮液以市场获评数最高位居榜首。行业广告词以‘天猫配送’，‘正品保证’等作为主要标语，以‘满1或2件送任意一件赠品，赠完为止’作为主要促销活动。<br>2、行业总体发展十分成熟，各品牌产品竞争力都十分明显，销量与评论基本呈正相关线性关系，与单价成反比例关系，100-500区间产品销量作为市场主流，1000元以上产品可能在销售额上反超其他高销量产品，双十一对市场的刺激反响极为强烈。<br>3、泸州老窖主打中高端酒类产品，全价位品类布局全面，综合实力处于全行业上游水平。销量受双十一影响显著，导致200-500与1000-3000区间商品销售额大幅增长。该品牌主打广告关键词： ‘’限时直降‘’，‘甄选好货’，‘厂家直供’。主要促销活动为 ‘’送任意一件赠品，赠完即止‘’。其总体销售额主要来源于100-3000价位产品，相比牛栏山不相上下，在中高价位品类优势明显，0-100价位段还有较大进步空间。</p>
<h1 id="七、python代码"><a href="#七、python代码" class="headerlink" title="七、python代码"></a>七、python代码</h1><h3 id="导入包，设定字体和画图风格"><a href="#导入包，设定字体和画图风格" class="headerlink" title="导入包，设定字体和画图风格"></a>导入包，设定字体和画图风格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">import seaborn as sns</span><br><span class="line">from wordcloud import WordCloud</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]#显示中文</span><br><span class="line">plt.style.use(&#x27;ggplot&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="导入并清洗数据"><a href="#导入并清洗数据" class="headerlink" title="导入并清洗数据"></a>导入并清洗数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导入数据</span><br><span class="line">path = &#x27;D:/python_data_file/Alcohol.xlsx&#x27;</span><br><span class="line">def load_alcohol_data(path):</span><br><span class="line">    df = pd.read_excel(path)</span><br><span class="line">    df.columns = [&#x27;id&#x27;,&#x27;name&#x27;,&#x27;price&#x27;,&#x27;sales&#x27;,&#x27;ad_word&#x27;,&#x27;buy_act&#x27;,&#x27;vote_count&#x27;,&#x27;url&#x27;,&#x27;date&#x27;,&#x27;brand&#x27;]</span><br><span class="line">    df = df[df.price.notnull()]</span><br><span class="line">    df[&#x27;amount&#x27;] = df[&#x27;sales&#x27;]*df[&#x27;price&#x27;]</span><br><span class="line">    df[&#x27;month&#x27;] = df.date.values.astype(&#x27;datetime64[M]&#x27;)#日期时间序列转化为月份时间序列</span><br><span class="line">    return df</span><br><span class="line">df = load_alcohol_data(path)</span><br><span class="line">#对酒类单价分层</span><br><span class="line">def price_level(data):</span><br><span class="line">    a=[]</span><br><span class="line">    for i in data.price:</span><br><span class="line">        if i &lt;50:</span><br><span class="line">            a.append(&#x27;0-50&#x27;)</span><br><span class="line">        elif i &lt;100:</span><br><span class="line">            a.append(&#x27;50-100&#x27;)</span><br><span class="line">        elif i &lt;200:</span><br><span class="line">            a.append(&#x27;100-200&#x27;)</span><br><span class="line">        elif i&lt;500:</span><br><span class="line">            a.append(&#x27;200-500&#x27;)</span><br><span class="line">        elif i &lt;1000:</span><br><span class="line">            a.append(&#x27;500-1000&#x27;)</span><br><span class="line">        elif i&lt;3000:</span><br><span class="line">            a.append(&#x27;1000-3000&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            a.append(&#x27;3000+&#x27;)</span><br><span class="line">    data[&#x27;price_level&#x27;] = a</span><br><span class="line">    data = data.reset_index(drop=True)</span><br><span class="line">    return data</span><br><span class="line">df = price_level(df)</span><br><span class="line">recent_df = df[df.date==&#x27;2018-02-27&#x27;]</span><br><span class="line">recent_df[[&#x27;sales&#x27;,&#x27;vote_count&#x27;,&#x27;amount&#x27;]].sum()</span><br><span class="line">recent_df.describe()</span><br><span class="line">lzlj_df = df[df.brand==&#x27;泸州老窖&#x27;].reset_index(drop=True)</span><br><span class="line">lzlj_df = price_level(lzlj_df)</span><br><span class="line">lzlj_df.describe()</span><br></pre></td></tr></table></figure>
<h3 id="近期各厂家的表现"><a href="#近期各厂家的表现" class="headerlink" title="近期各厂家的表现"></a>近期各厂家的表现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#各厂家的表现就在这了</span><br><span class="line">all_brand = recent_df.groupby(&#x27;brand&#x27;)[[&#x27;sales&#x27;,&#x27;vote_count&#x27;,&#x27;amount&#x27;]].sum().sort_values(by=</span><br><span class="line">&#x27;amount&#x27;,ascending = True).reset_index()</span><br><span class="line">all_brand.sales.plot.bar()</span><br><span class="line">plt.title(&#x27;各厂家销量对比&#x27;)</span><br><span class="line">all_brand.vote_count.plot.bar()</span><br><span class="line">plt.title(&#x27;各厂家评论数&#x27;)</span><br><span class="line">all_brand.amount.plot.bar()</span><br><span class="line">plt.title(&#x27;各厂家销售额&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="画柱状图"><a href="#画柱状图" class="headerlink" title="画柱状图"></a>画柱状图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#x写个画图函数，不然太麻烦了</span><br><span class="line">def pic_barh(data,tit,xbel,ybel):</span><br><span class="line">    data.sort_values().plot.barh(figsize=(12,6))</span><br><span class="line">    plt.title(tit,fontsize = 20)</span><br><span class="line">    plt.xlabel(xbel,fontsize = 20)</span><br><span class="line">    plt.ylabel(ybel,fontsize = 20)</span><br><span class="line">    plt.show()</span><br><span class="line">pic_barh(level_performance_mean.price,&#x27;近期平均价格表现&#x27;,&#x27;价格&#x27;,&#x27;区间&#x27;)</span><br><span class="line">pic_barh(level_performance_sum.amount,&#x27;近期销售额表现&#x27;,&#x27;金额&#x27;,&#x27;区间&#x27;)</span><br><span class="line">pic_barh(level_performance_mean.vote_count,&#x27;近期评论表现&#x27;,&#x27;评论数&#x27;,&#x27;区间&#x27;)</span><br><span class="line">pic_barh(level_performance_mean.amount,&#x27;近期平均金额表现&#x27;,&#x27;金额&#x27;,&#x27;区间&#x27;)</span><br></pre></td></tr></table></figure>
<h3 id="近期各价位段表现"><a href="#近期各价位段表现" class="headerlink" title="近期各价位段表现"></a>近期各价位段表现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">level_performance_sum = recent_df.groupby(&#x27;price_level&#x27;)[</span><br><span class="line">&#x27;sales&#x27;,&#x27;vote_count&#x27;,&#x27;amount&#x27;].sum().sort_values(by=&#x27;sales&#x27;,ascending=False)</span><br><span class="line">level_performance_mean = recent_df.groupby(&#x27;price_level&#x27;)[</span><br><span class="line">&#x27;price&#x27;,&#x27;sales&#x27;,&#x27;vote_count&#x27;,&#x27;amount&#x27;].mean().sort_values(by=&#x27;sales&#x27;,ascending=False)</span><br><span class="line">#绘制利润与评论数柱状图</span><br><span class="line">level_performance_sum.loc[:,[&#x27;sales&#x27;,&#x27;vote_count&#x27;]].plot.bar(figsize=(12,6))</span><br></pre></td></tr></table></figure>
<h3 id="寻找竞争品牌"><a href="#寻找竞争品牌" class="headerlink" title="寻找竞争品牌"></a>寻找竞争品牌</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#想写个函数找出泸州老窖的上下各相邻两个的品牌，也就是它的竞争品牌</span><br><span class="line">def lookup_name(data):</span><br><span class="line">    for i in range(len(data)):</span><br><span class="line">        if data.loc[i,&#x27;brand&#x27;] ==&#x27;泸州老窖&#x27;:</span><br><span class="line">            return [data.loc[i-1,&#x27;brand&#x27;],data.loc[i-2,&#x27;brand&#x27;],data.loc[i+1,&#x27;brand&#x27;],data.loc[i+2,&#x27;brand&#x27;]]</span><br><span class="line">        else:</span><br><span class="line">            continue</span><br><span class="line">#按品牌分组求均值，再分别按价格、销量和金额排序，然后找出竞争品牌</span><br><span class="line">df_brand_price_mean = df.groupby(&#x27;brand&#x27;,as_index=False)[[</span><br><span class="line">    &#x27;price&#x27;,&#x27;sales&#x27;,&#x27;amount&#x27;]].mean().sort_values(by=&#x27;price&#x27;,ascending=True).reset_index(drop=True)</span><br><span class="line">lookup_name(df_brand_price_mean)#[&#x27;汾酒&#x27;, &#x27;珍酒&#x27;, &#x27;剑南春&#x27;, &#x27;白云边&#x27;]</span><br><span class="line">df_brand_sales_mean=df.groupby(&#x27;brand&#x27;,as_index=False)[[</span><br><span class="line">    &#x27;price&#x27;,&#x27;sales&#x27;,&#x27;amount&#x27;]].mean().sort_values(by=&#x27;sales&#x27;,ascending=True).reset_index(drop=True)</span><br><span class="line">df_brand_amount_mean= df.groupby(&#x27;brand&#x27;,as_index=False)[[</span><br><span class="line">    &#x27;price&#x27;,&#x27;sales&#x27;,&#x27;amount&#x27;]].mean().sort_values(by=&#x27;amount&#x27;,ascending=True).reset_index(drop=True)</span><br><span class="line">#按品牌分组求和，再分别按价格、销量和金额排序，然后找出竞争品牌</span><br><span class="line">df_brand_amount_sum=df.groupby(&#x27;brand&#x27;,as_index=False)[[</span><br><span class="line">    &#x27;sales&#x27;,&#x27;amount&#x27;]].sum().sort_values(by=&#x27;amount&#x27;,ascending = True).reset_index(drop=True)</span><br><span class="line">df_brand_sales_sum=df.groupby(&#x27;brand&#x27;,as_index=False)[[</span><br><span class="line">    &#x27;sales&#x27;,&#x27;amount&#x27;]].sum().sort_values(by=&#x27;sales&#x27;,ascending = True).reset_index(drop=True)</span><br><span class="line">a_sums = set(lookup_name(df_brand_amount_sum)+lookup_name(df_brand_sales_sum))</span><br><span class="line">a_means = set(lookup_name(df_brand_price_mean)+lookup_name(df_brand_sales_mean)+lookup_name(df_brand_amount_mean))</span><br><span class="line">s = set(list(a_means)+list(a_sums))</span><br><span class="line">#&#123;&#x27;习酒&#x27;,&#x27;五粮液&#x27;,&#x27;剑南春&#x27;,&#x27;劲酒&#x27;,&#x27;古井贡酒&#x27;, &#x27;水井坊&#x27;, &#x27;江小白&#x27;, &#x27;汾酒&#x27;, &#x27;洋河&#x27;, &#x27;牛栏山&#x27;,&#x27;珍酒&#x27;,</span><br><span class="line"># &#x27;白云边&#x27;,&#x27;红星&#x27;,&#x27;茅台&#x27;&#125; 选取剑南春 古井贡酒 牛栏山 五粮液作为泸州老窖的竞争对手</span><br></pre></td></tr></table></figure>
<h3 id="生成词云图"><a href="#生成词云图" class="headerlink" title="生成词云图"></a>生成词云图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#提取广告词字符串</span><br><span class="line">def ad_words_str(data):</span><br><span class="line">    ad_words_list = []</span><br><span class="line">    for x in data.ad_word.dropna():</span><br><span class="line">        ad_words_list.append(x)</span><br><span class="line">    ad_words_list = &#x27;&#x27;.join(ad_words_list)</span><br><span class="line">    return ad_words_list</span><br><span class="line">#提取促销活动字符串</span><br><span class="line">def buy_act_str(data):</span><br><span class="line">    buy_act_list=[]</span><br><span class="line">    for x in data.buy_act.dropna():</span><br><span class="line">        buy_act_list.append(x)</span><br><span class="line">    buy_act_list = &#x27;&#x27;.join(buy_act_list)</span><br><span class="line">    return buy_act_list</span><br><span class="line">#生成词云</span><br><span class="line">def pic_words(keywords_list):</span><br><span class="line">    keywords_list.replace(&#x27;\s&#x27;,&#x27;&#x27;)#去除字符串中空字符串（\s用于匹配空白字符，可能是空格、制表符、其他空白））</span><br><span class="line">    font = &#x27;C:\Windows\Fonts\msyh.ttc&#x27;</span><br><span class="line">    wordcloud = WordCloud(background_color=&#x27;white&#x27;,max_words=3000,scale=1.5,font_path=font).generate(keywords_list)</span><br><span class="line">    plt.figure(figsize=(14,8))</span><br><span class="line">    plt.imshow(wordcloud)</span><br><span class="line">    plt.axis(&#x27;off&#x27;)</span><br><span class="line">    plt.show()</span><br><span class="line">listb = ad_words_str(lzlj_df)+buy_act_str(lzlj_df)</span><br><span class="line">#行业大盘最近一个周期的词云</span><br><span class="line">pic_words(ad_words_str(recent_df))</span><br><span class="line">pic_words(buy_act_str(recent_df))</span><br><span class="line">pic_words(ad_words_str(lzlj_df))</span><br><span class="line">pic_words(buy_act_str(lzlj_df))</span><br></pre></td></tr></table></figure>
<h1 id="画走势图"><a href="#画走势图" class="headerlink" title="画走势图"></a>画走势图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df.plot.scatter(x=&#x27;price&#x27;,y=&#x27;sales&#x27;)</span><br><span class="line">plt.title(&#x27;销量与单价&#x27;)</span><br><span class="line">df.plot.scatter(x=&#x27;vote_count&#x27;,y=&#x27;sales&#x27;)</span><br><span class="line">plt.title(&#x27;销量与评论数&#x27;)</span><br><span class="line">#写个画图函数，它不香吗</span><br><span class="line">def pic_trend(data,val,agg,tit,ylab):</span><br><span class="line">    a_sum = data.pivot_table(</span><br><span class="line">        index=&#x27;price_level&#x27;,columns=&#x27;month&#x27;,values=val,aggfunc=agg).fillna(0).T</span><br><span class="line">    plt.figure(figsize=(12,6))</span><br><span class="line">    a_sum.plot()</span><br><span class="line">    plt.title(tit,fontsize=20)</span><br><span class="line">    plt.ylabel(ylab,fontsize=15)</span><br><span class="line">    plt.show()</span><br><span class="line">pic_trend(lzlj_df,&#x27;sales&#x27;,&#x27;sum&#x27;,&#x27;泸州老窖各区间产品销量走势&#x27;,&#x27;sales&#x27;)</span><br><span class="line">pic_trend(lzlj_df,&#x27;amount&#x27;,&#x27;sum&#x27;,&#x27;泸州老窖销售额走势&#x27;,&#x27;amount&#x27;)</span><br><span class="line">pic_trend(lzlj_df,&#x27;price&#x27;,&#x27;mean&#x27;,&#x27;泸州老窖产品单价走势&#x27;,&#x27;price&#x27;)</span><br><span class="line">pic_trend(lzlj_df,&#x27;vote_count&#x27;,&#x27;sum&#x27;,&#x27;泸州老窖产品评论走势&#x27;,&#x27;vote_count&#x27;)</span><br><span class="line">pic_trend(df,&#x27;sales&#x27;,&#x27;sum&#x27;,&#x27;总体各区间产品销量走势&#x27;,&#x27;sales&#x27;)</span><br><span class="line">pic_trend(df,&#x27;amount&#x27;,&#x27;sum&#x27;,&#x27;总体产品销售额走势&#x27;,&#x27;amount&#x27;)</span><br><span class="line">pic_trend(df,&#x27;price&#x27;,&#x27;mean&#x27;,&#x27;总体产品单价走势&#x27;,&#x27;price&#x27;)</span><br><span class="line">pic_trend(df,&#x27;vote_count&#x27;,&#x27;sum&#x27;,&#x27;总体产品评论走势&#x27;,&#x27;vote_count&#x27;)</span><br></pre></td></tr></table></figure>
<h1 id="得到各品牌数据"><a href="#得到各品牌数据" class="headerlink" title="得到各品牌数据"></a>得到各品牌数据</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#写个函数用来对各品牌数据拆分</span><br><span class="line">def df_brand(data,brand):</span><br><span class="line">    data = data[data.brand==brand].reset_index(drop=True)</span><br><span class="line">    data = price_level(data)</span><br><span class="line">    data[&#x27;amount&#x27;] = data[&#x27;sales&#x27;]*data[&#x27;price&#x27;]</span><br><span class="line">    return data</span><br><span class="line"># list_brand = [&#x27;剑南春&#x27;,&#x27;古井贡酒&#x27;,&#x27;牛栏山&#x27;,&#x27;五粮液&#x27;,&#x27;泸州老窖&#x27;]</span><br><span class="line"># for i in list_brand:</span><br><span class="line">#     df_brand(df,i)</span><br><span class="line">#对该品牌的各价位段进行分组求和</span><br><span class="line">def df_brand_groupby_sum(data):</span><br><span class="line">    data = data.groupby(&#x27;price_level&#x27;).sum().loc[:,[&#x27;sales&#x27;,&#x27;vote_count&#x27;,&#x27;amount&#x27;]]</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line"># 剑南春 古井贡酒 牛栏山 五粮液 #各个价格段的销量、评论量、销售额汇总</span><br><span class="line">lzlj_sum = df_brand_groupby_sum(df_brand(df,&#x27;泸州老窖&#x27;))</span><br><span class="line">jlc_sum = df_brand_groupby_sum(df_brand(df,&#x27;剑南春&#x27;))</span><br><span class="line">gjgj_sum = df_brand_groupby_sum(df_brand(df,&#x27;古井贡酒&#x27;))</span><br><span class="line">nls_sum = df_brand_groupby_sum(df_brand(df,&#x27;牛栏山&#x27;))</span><br><span class="line">wly_sum = df_brand_groupby_sum(df_brand(df,&#x27;五粮液&#x27;))</span><br></pre></td></tr></table></figure>
<h3 id="画饼图"><a href="#画饼图" class="headerlink" title="画饼图"></a>画饼图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def pic_pie(data,gby,tit):</span><br><span class="line">    price_count = data.groupby(gby).count().reset_index(drop=False)</span><br><span class="line">    fig = plt.figure(figsize=(16,8))</span><br><span class="line">    plt.pie(price_count.price,labels=price_count[gby],autopct=&#x27;%.1f%%&#x27;)</span><br><span class="line">    plt.title(tit,fontsize = 15)</span><br><span class="line">pic_pie(nls_df,&#x27;price_level&#x27;,&#x27;牛栏山产品价位规模&#x27;)</span><br><span class="line">pic_pie(nls_df,&#x27;month&#x27;,&#x27;牛栏山产品月份规模&#x27;)</span><br><span class="line">pic_pie(lzlj_df,&#x27;price_level&#x27;,&#x27;泸州老窖产品价位规模&#x27;)</span><br><span class="line">pic_pie(lzlj_df,&#x27;month&#x27;,&#x27;泸州老窖产品月份规模&#x27;)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(16,8))</span><br><span class="line">plt.pie(lzlj_sum.sales,labels=lzlj_sum.index,autopct=&#x27;%.1f%%&#x27;)</span><br><span class="line">plt.title(&#x27;泸州老窖各价位销量图&#x27;,fontsize = 15)</span><br><span class="line">fig = plt.figure(figsize=(16,8))</span><br><span class="line">plt.pie(nls_sum.vote_count,labels=nls_sum.index,autopct=&#x27;%.1f%%&#x27;)</span><br><span class="line">plt.title(&#x27;牛栏山各价位评论数图&#x27;,fontsize = 15)</span><br><span class="line"></span><br><span class="line">#按月份销量变化</span><br><span class="line">lzlj_df.groupby(&#x27;month&#x27;).sales.sum().plot()</span><br><span class="line">plt.title(&#x27;销量按月份变化&#x27;)</span><br><span class="line">#总销售额随时间变化</span><br><span class="line">lzlj_df.groupby(&#x27;month&#x27;).amount.sum().plot()</span><br><span class="line">plt.title(&#x27;总销售额随时间变化&#x27;)</span><br><span class="line"></span><br><span class="line">def pic_bar2(arg):</span><br><span class="line">    sales_dif = nls_sum.sales.reset_index().merge(lzlj_sum[arg].reset_index(),on=&#x27;price_level&#x27;,how=&#x27;outer&#x27;,suffixes=[&#x27;_nls&#x27;,&#x27;_lzlj&#x27;])</span><br><span class="line">    sales_dif = sales_dif.set_index(&#x27;price_level&#x27;)</span><br><span class="line">    plt.figure(figsize=(12,10))</span><br><span class="line">    sales_dif.plot.bar()</span><br><span class="line">    plt.title(&#x27;泸州老窖与牛栏山&#x27;+str(arg)+&#x27;对比&#x27;)</span><br><span class="line">pic_bar2(&#x27;sales&#x27;)</span><br><span class="line">pic_bar2(&#x27;amount&#x27;)</span><br><span class="line">pic_bar2(&#x27;vote_count&#x27;)</span><br><span class="line"></span><br><span class="line">pic_barh(df_brand_sum.sales,&#x27;各品牌销售总量对比&#x27;,&#x27;销量&#x27;,&#x27;品牌&#x27;)</span><br><span class="line">pic_barh(df_brand_sum.amount,&#x27;各品牌销售总金额对比&#x27;,&#x27;金额&#x27;,&#x27;品牌&#x27;)</span><br><span class="line">pic_barh(df_brand_sum.vote_count,&#x27;各品牌产品评论数对比&#x27;,&#x27;评论数&#x27;,&#x27;品牌&#x27;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据分析实战</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据可视化：pyecharts v1版本</title>
    <url>/2021/06/05/python%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%9Apyecharts-v1%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p><a class="link"   href="https://github.com/ecomfe/echarts" >Echarts<i class="fas fa-external-link-alt"></i></a>是一个由百度开源的数据可视化，结合巧妙的交互性，精巧的图表设计；而 Python 是一门富有表达力的语言，很适合用于数据处理。分析遇上数据可视化时，<a class="link"   href="https://github.com/pyecharts/pyecharts" >pyecharts<i class="fas fa-external-link-alt"></i></a>诞生了。<br>个人觉得可视化最好用的，不接受反驳，毕竟用echarts的都那么多；<br>官方文档<a class="link"   href="https://pyecharts.org/#/zh-cn/intro" >https://pyecharts.org/#/zh-cn/intro<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li>自己挑了一些碰到的坑记了一下，分享一些自己学习过程中发现的资源，其他看文档就够了</li>
</ul>
<h1 id="基础柱状图"><a href="#基础柱状图" class="headerlink" title="基础柱状图"></a>基础柱状图</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pyecharts import options as opts</span><br><span class="line">from pyecharts.charts import Bar</span><br><span class="line">from pyecharts.faker import Faker</span><br><span class="line">c = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis(Faker.choose())</span><br><span class="line">    .add_yaxis(&quot;商家A&quot;, Faker.values())#gap=&quot;0%&quot;；category_gap=&quot;80%&quot;；stack=&quot;stack1&quot;</span><br><span class="line">    .add_yaxis(&quot;商家B&quot;, Faker.values())#gap=&quot;0%&quot;；is_selected=False；stack=&quot;stack1&quot;；label_opts=opts.LabelOpts(is_show=False)</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Bar-基本示例&quot;, subtitle=&quot;我是副标题&quot;))</span><br><span class="line">                     # datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_=&quot;inside&quot;)],#时间轴显示并可同通过鼠标滑动</span><br><span class="line">    .set_series_opts(</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=False),</span><br><span class="line">        markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">            data=[</span><br><span class="line">                opts.MarkPointItem(type_=&quot;max&quot;, name=&quot;最大值&quot;),</span><br><span class="line">                opts.MarkPointItem(type_=&quot;min&quot;, name=&quot;最小值&quot;),</span><br><span class="line">#                 opts.MarkPointItem(type_=&quot;average&quot;, name=&quot;平均值&quot;),</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">        markline_opts= opts.MarkLineOpts(data = [opts.MarkLineItem(type_ = &quot;average&quot;,name = &quot;平均值&quot;)])</span><br><span class="line">    )</span><br><span class="line">    .render_notebook()</span><br><span class="line">)</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/6460608-c318cf13b19d947a.1zz3gy9m634w.png"
                     
                ></p>
<ul>
<li><p>只能通过滑动水平轴缩放x轴：只传入datazoom_opts=[opts.DataZoomOpts()]；省略掉 opts.DataZoomOpts(), 删除水平轴，就只能通过鼠标拖动；</p>
</li>
<li><p>显示水平轴的比例（默认）：<br>opts.DataZoomOpts(range_start=20,range_end=80)</p>
</li>
<li><p>取消柱子上方数据显示：<br>label_opts=opts.LabelOpts(is_show=False)</p>
</li>
<li><p>添加y轴水平轴：<br>datazoom_opts=opts.DataZoomOpts(orient=”vertical”)，可缩放大小；</p>
</li>
<li><p>柱间距离：<br>加入参数gap=”0%”(两个add_yaxis里面都要传)；<br>加入参数category_gap=”80%”，表示单系柱间距离；</p>
</li>
<li><p>默认取消显示某 Series：<br>加入参数is_selected=False，默认取消显示某 Series</p>
</li>
<li><p>堆叠数据：传入stack=”stack1”，希望哪几个指标堆叠就传那几个add_yaxis中；</p>
</li>
<li><p>显示ToolBox：在set_global_opts()中传入        toolbox_opts=opts.ToolboxOpts(), brush_opts=opts.BrushOpts(),；</p>
</li>
<li><p>XY轴名称：在set_globel_opts()中加入 yaxis_opts=opts.AxisOpts(name=”我是 Y  轴”),xaxis_opts=opts.AxisOpts(name=”我是 X 轴”),  ；</p>
</li>
<li><p>Y轴数据单位：在set_globel_opts()中加入 yaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(formatter=”{value} /月”)),  ；</p>
</li>
<li><p>加入标记线</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    .set_global_opts()</span><br><span class="line">    .set_series_opts(</span><br><span class="line">        label_opts=opts.LabelOpts(is_show=False),</span><br><span class="line">        markline_opts=opts.MarkLineOpts(</span><br><span class="line">            data=[opts.MarkLineItem(y=50, name=&quot;yAxis=50&quot;)]</span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">#set_global_opts()后加入set_series_opts，加入标记线，这里是y=50；</span><br></pre></td></tr></table></figure></li>
<li><p>加入标记值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#set_series_opts中加入，表示传入标记，最大、最小、平均值。</span><br><span class="line">        markpoint_opts=opts.MarkPointOpts(</span><br><span class="line">            data=[</span><br><span class="line">                opts.MarkPointItem(type_=&quot;max&quot;, name=&quot;最大值&quot;),</span><br><span class="line">                opts.MarkPointItem(type_=&quot;min&quot;, name=&quot;最小值&quot;),</span><br><span class="line">                opts.MarkPointItem(type_=&quot;average&quot;, name=&quot;平均值&quot;),</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure></li>
<li><p>xy轴互换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#设置完add_yaxis后接着</span><br><span class="line">    .reversal_axis()#xy轴互换</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(position=&quot;right&quot;))#显示数据在柱子右边</span><br></pre></td></tr></table></figure></li>
<li><p>x轴名字标签过长，旋转角度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在set_global_opts（）中传入</span><br><span class="line">xaxis_opts=opts.AxisOpts(axislabel_opts=opts.LabelOpts(rotate=-15)),</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="pyecharts画地理图-geo-map"><a href="#pyecharts画地理图-geo-map" class="headerlink" title="pyecharts画地理图-geo,map"></a>pyecharts画地理图-geo,map</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_geo(city, city_value):</span><br><span class="line">    c = (</span><br><span class="line">        Geo(init_opts=opts.InitOpts(theme=ThemeType.DARK,chart_id=1))</span><br><span class="line">            .add_schema(maptype=&quot;china&quot;)</span><br><span class="line">            .add(&quot;geo&quot;, [list(z) for z in zip(city, city_value)])</span><br><span class="line">            .set_series_opts(label_opts=opts.LabelOpts(is_show=False))</span><br><span class="line">            .set_global_opts(</span><br><span class="line">            visualmap_opts=opts.VisualMapOpts(), title_opts=opts.TitleOpts(title=&quot;用户城市分布&quot;)</span><br><span class="line">        )  # .render(&quot;geo_base.html&quot;)</span><br><span class="line">    )</span><br><span class="line">    return c</span><br></pre></td></tr></table></figure>
<p>is_piecewise参数：在 set_global_opts()中的visualmap_opts=opts.VisualMapOpts(is_piecewise=True),表示分段显示；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_map(province, num):</span><br><span class="line">    c = (</span><br><span class="line">        Map(init_opts=opts.InitOpts(theme=ThemeType.DARK,chart_id=2))</span><br><span class="line">            .add(&quot;map&quot;, [list(z) for z in zip(province, num)], &quot;china&quot;)</span><br><span class="line">            .set_series_opts(label_opts=opts.LabelOpts(is_show=False))</span><br><span class="line">            .set_global_opts(visualmap_opts=opts.VisualMapOpts(), title_opts=opts.TitleOpts(title=&quot;用户省份分布&quot;))</span><br><span class="line">    )  # .render(&quot;map_base.html&quot;)</span><br><span class="line">    return c</span><br></pre></td></tr></table></figure>
<h1 id="pyecharts画内层嵌套饼图"><a href="#pyecharts画内层嵌套饼图" class="headerlink" title="pyecharts画内层嵌套饼图"></a>pyecharts画内层嵌套饼图</h1><h1 id="pie"><a href="#pie" class="headerlink" title="pie"></a>pie</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c = (</span><br><span class="line">    Pie()</span><br><span class="line">    .add(&quot;&quot;, [list(z) for z in zip(Faker.choose(), Faker.values())])#center=[&quot;35%&quot;, &quot;50%&quot;],</span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;Pie-基本示例&quot;))#legend_opts=opts.LegendOpts(pos_left=&quot;15%&quot;),</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(formatter=&quot;&#123;b&#125;: &#123;c&#125;&quot;))</span><br><span class="line">#     .render(&quot;pie_base.html&quot;)</span><br><span class="line">)</span><br><span class="line">c.render_notebook()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/6460608-109a65be286830ab.wpn8qntfni8.png"
                     
                ></p>
<h1 id="nested-pies"><a href="#nested-pies" class="headerlink" title="nested_pies"></a>nested_pies</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inner_x_data = [&quot;直达&quot;, &quot;营销广告&quot;, &quot;搜索引擎&quot;]</span><br><span class="line">inner_y_data = [335, 679, 1548]</span><br><span class="line">inner_data_pair = [list(z) for z in zip(inner_x_data, inner_y_data)]</span><br><span class="line"></span><br><span class="line">outer_x_data = [&quot;直达&quot;, &quot;营销广告&quot;, &quot;搜索引擎&quot;, &quot;邮件营销&quot;, &quot;联盟广告&quot;, &quot;视频广告&quot;, &quot;百度&quot;, &quot;谷歌&quot;]</span><br><span class="line">outer_y_data = [335, 310, 234, 135, 1048, 251, 147, 102]</span><br><span class="line">outer_data_pair = [list(z) for z in zip(outer_x_data, outer_y_data)]</span><br><span class="line">(</span><br><span class="line">    Pie(init_opts=opts.InitOpts())#theme=ThemeType.DARK 指定主题为黑色</span><br><span class="line">    .add(</span><br><span class="line">        series_name=&quot;访问来源&quot;,</span><br><span class="line">        data_pair=inner_data_pair,#指定数据源</span><br><span class="line">        radius=[0, &quot;30%&quot;],#半径 </span><br><span class="line">        label_opts=opts.LabelOpts(position=&quot;inner&quot;),#图形位置</span><br><span class="line">    )</span><br><span class="line">    .add(</span><br><span class="line">        series_name=&quot;访问来源&quot;,</span><br><span class="line">        radius=[&quot;40%&quot;, &quot;55%&quot;],</span><br><span class="line">        data_pair=outer_data_pair,</span><br><span class="line">        label_opts=opts.LabelOpts(</span><br><span class="line">            position=&quot;outside&quot;,</span><br><span class="line">            formatter=&quot;&#123;a|&#123;a&#125;&#125;&#123;abg|&#125;\n&#123;hr|&#125;\n &#123;b|&#123;b&#125;: &#125;&#123;c&#125; &#123;per|&#123;d&#125;%&#125;  &quot;,#&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot; 文本样式</span><br><span class="line">            background_color=&quot;#eee&quot;,  #背景颜色</span><br><span class="line">            border_color=&quot;#aaa&quot;,  #边框颜色</span><br><span class="line">            border_width=1,   #边框宽度</span><br><span class="line">            border_radius=4,  #边界半径</span><br><span class="line">            rich=&#123;</span><br><span class="line">                &quot;a&quot;: &#123;&quot;color&quot;: &quot;#999&quot;, &quot;lineHeight&quot;: 22, &quot;align&quot;: &quot;center&quot;&#125;,</span><br><span class="line">                &quot;abg&quot;: &#123;</span><br><span class="line">                    &quot;backgroundColor&quot;: &quot;#e3e3e3&quot;,</span><br><span class="line">                    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">                    &quot;align&quot;: &quot;right&quot;,</span><br><span class="line">                    &quot;height&quot;: 22,</span><br><span class="line">                    &quot;borderRadius&quot;: [4, 4, 0, 0],</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;hr&quot;: &#123;</span><br><span class="line">                    &quot;borderColor&quot;: &quot;#aaa&quot;,</span><br><span class="line">                    &quot;width&quot;: &quot;100%&quot;,</span><br><span class="line">                    &quot;borderWidth&quot;: 0.5,</span><br><span class="line">                    &quot;height&quot;: 0,</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;b&quot;: &#123;&quot;fontSize&quot;: 16, &quot;lineHeight&quot;: 33&#125;,#,&quot;color&quot;:&quot;#999&quot;</span><br><span class="line">#                 &quot;c&quot;:&#123;&quot;color&quot;:&quot;#999&quot;&#125;,</span><br><span class="line">                &quot;per&quot;: &#123;</span><br><span class="line">                    &quot;color&quot;: &quot;#eee&quot;,</span><br><span class="line">                    &quot;backgroundColor&quot;: &quot;#334455&quot;,</span><br><span class="line">                    &quot;padding&quot;: [2, 4],</span><br><span class="line">                    &quot;borderRadius&quot;: 2,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(legend_opts=opts.LegendOpts(pos_left=&quot;left&quot;, orient=&quot;vertical&quot;,textstyle_opts=&#123;&quot;color&quot;:&quot;#999&quot;&#125;))#设置图例字体为白色</span><br><span class="line">    .set_series_opts(</span><br><span class="line">        tooltip_opts=opts.TooltipOpts(</span><br><span class="line">            trigger=&quot;item&quot;, formatter=&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)&quot;    # &#x27;item&#x27;: 数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用。</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">#     .render(&quot;nested_pies.html&quot;)</span><br><span class="line">).render_notebook()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/6460608-85a5b5d8ee7790a8.5qowy1o8a20.png"
                     
                ></p>
<p>那个formatter配置项可以在这里了解：<br>{a}（系列名称），{b}（数据项名称），{c}（数值）, {d}（百分比）<br><a class="link"   href="https://echarts.apache.org/zh/option.html#grid.tooltip.formatter" >https://echarts.apache.org/zh/option.html#grid.tooltip.formatter<i class="fas fa-external-link-alt"></i></a></p>
<h1 id="pyecharts中page的使用类似BI大屏展示"><a href="#pyecharts中page的使用类似BI大屏展示" class="headerlink" title="pyecharts中page的使用类似BI大屏展示"></a>pyecharts中page的使用类似BI大屏展示</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page = Page(layout= Page.DraggablePageLayout, page_title= &quot;大屏展示&quot;)</span><br><span class="line"># page = Page()</span><br><span class="line">page.add(</span><br><span class="line">    bar_datazoom_slider(),</span><br><span class="line">    line_markpoint(),</span><br><span class="line">    pie_rosetype(),</span><br><span class="line">    grid_mutil_yaxis(),</span><br><span class="line">    liquid_data_precision(),</span><br><span class="line">    table_base(),</span><br><span class="line">)</span><br><span class="line">page.render(&quot;temp.html&quot;)</span><br></pre></td></tr></table></figure>
<p>然后自己点那开个temp.html文件进行拖拽，缩放，布局称自己想要的样子，最后点击save_config按钮，下载那个chart_config.json文件。</p>
<ul>
<li><p>修改json配置文件，改成百分比主要是为了页面自适应屏幕大小。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df = pd.read_json(&quot;chart_config.json&quot;)</span><br><span class="line">df[&quot;width&quot;] = df.width.apply(lambda x: x[:-2])</span><br><span class="line">df[&quot;height&quot;] = df.height.apply(lambda x: x[:-2])</span><br><span class="line">df[&quot;top&quot;] = df.top.apply(lambda x: x[:-2])</span><br><span class="line">df[&quot;left&quot;] = df.left.apply(lambda x: x[:-2])</span><br><span class="line"># df.astype(&#123;&#x27;width&#x27;:&#x27;float&#x27;,&#x27;height&#x27;:&#x27;float&#x27;,&#x27;top&#x27;:&#x27;float&#x27;,&#x27;height&#x27;:&#x27;float&#x27;&#125;).dtypes</span><br><span class="line">df[&quot;width&quot;]= df.width.apply(lambda x: str(round(float(x)/1256*100,4))+&quot;%&quot;)#这里1256、640是你自己电脑屏幕的px值</span><br><span class="line">df[&quot;height&quot;] = df.height.apply(lambda x: str(round(float(x)/640*100*11/12,4))+&quot;%&quot;)#如果出现右侧滑块，可适当进行缩放，这里按11/12的比例缩放</span><br><span class="line">df[&quot;top&quot;] = df.top.apply(lambda x: str(round(float(x)/640*100*11/12,4))+&quot;%&quot;)</span><br><span class="line">df[&quot;left&quot;] = df.left.apply(lambda x: str(round(float(x)/1256*100,4))+&quot;%&quot;)</span><br><span class="line">df.to_json(&quot;chart_config2.json&quot;,orient = &quot;records&quot;)</span><br></pre></td></tr></table></figure></li>
<li><p>修改好json数据之后，再运行这行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#第一个字段是前面拖拽的html文件名，cfg_file就是你刚save的json文件名，dest是你要生成的文件名</span><br><span class="line">page.save_resize_html( &#x27;temp.html&#x27;, cfg_file= &#x27;chart_config2.json&#x27;,dest= &#x27;设置好位置后的BI看板.html&#x27;)</span><br></pre></td></tr></table></figure>
<p>这样弄完有点问题就是背景页面可能和图片背景有违和感，你可以使用BeautifulSoup再修改下页面背景颜色啥的,相关网课链接<a class="link"   href="https://www.bilibili.com/video/BV1KT4y1c7pb?p=22" >https://www.bilibili.com/video/BV1KT4y1c7pb?p=22<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import os</span><br><span class="line">with open(os.path.join(os.path.abspath(&quot;.&quot;), &quot;设置好位置后的BI看板.html&quot;), &#x27;r+&#x27;, encoding=&quot;utf8&quot;) as html:</span><br><span class="line">    html_bf = BeautifulSoup(html, &quot;lxml&quot;)</span><br><span class="line">    divs = html_bf.find_all(&quot;div&quot;)</span><br><span class="line">    </span><br><span class="line">    body = html_bf.find(&quot;body&quot;)</span><br><span class="line">    body[&quot;style&quot;]=&quot;background-color:#333333;&quot;</span><br><span class="line">#     div_title = &quot;&lt;div align=\&quot;center\&quot; style=\&quot;width:1900px;\&quot;&gt;\n&lt;span style=\&quot;font-size:30px;font face=\&#x27;黑体\&#x27;;color :#FFFFFF\&quot;&gt;&lt;b&gt;CD_NOW数据看板&lt;/b&gt;&lt;/div&gt;&quot;  # 修改页面背景色、追加标题</span><br><span class="line">#     body.insert(0, BeautifulSoup(div_title, &quot;lxml&quot;).div)</span><br><span class="line">    html_new = str(html_bf)</span><br><span class="line">    html.seek(0, 0)</span><br><span class="line">    html.truncate()</span><br><span class="line">    html.write(html_new)</span><br><span class="line">    html.close()</span><br></pre></td></tr></table></figure>
<p>当然也可以把那个json文件里面的值传到对应的样式代码中在HTML页面中进行布局，需要注意的是画图时指定好每个图表的chart_id,便于通过字符串格式进行指定对应图表位置。</p>
</li>
</ul>
<p>注意点：（来自<a class="link"   href="https://www.jianshu.com/p/47e8f056e5cf%EF%BC%89" >https://www.jianshu.com/p/47e8f056e5cf）<i class="fas fa-external-link-alt"></i></a><br>1.由于图片的布局是根据chart_config.json中图片id的对应关系进行布局，因此每张图片均需要指定其id；<br>如：<br>Bar(init_opts=opts.InitOpts(chart_id=1))<br>2.在本次操作工程中，发现Table类中不包含init_opts参数，可以通过修改源码，在D:\Anaconda3\Lib\site-packages\pyecharts\component\table指定char_id,具体修改的代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Table(ChartMixin):</span><br><span class="line">    def __init__(self, page_title: str = CurrentConfig.PAGE_TITLE, js_host: str = &quot;&quot;,chart_id=None):</span><br><span class="line">        self.page_title = page_title</span><br><span class="line">        self.js_host = js_host or CurrentConfig.ONLINE_HOST</span><br><span class="line">        self.js_dependencies: OrderedSet = OrderedSet()</span><br><span class="line">        self.js_functions: OrderedSet = OrderedSet()</span><br><span class="line">        self.title_opts: ComponentTitleOpts = ComponentTitleOpts()</span><br><span class="line">        self.html_content: str = &quot;&quot;</span><br><span class="line">        self._component_type: str = &quot;table&quot;</span><br><span class="line">        if chart_id:</span><br><span class="line">            self.chart_id: str = chart_id</span><br><span class="line">        else:</span><br><span class="line">            self.chart_id: str = uuid.uuid4().hex</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://www.bilibili.com/video/BV1KT4y1c7pb" >https://www.bilibili.com/video/BV1KT4y1c7pb<i class="fas fa-external-link-alt"></i></a> 网课里有资源自己去取</p>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python面向对象习题</title>
    <url>/2019/07/19/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<p>写完对对象这个东西了解很多了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">一：定义一个学生类。有下面的类属性：</span><br><span class="line">1 姓名</span><br><span class="line">2 年龄</span><br><span class="line">3 成绩（语文，数学，英语)[每课成绩的类型为整数]</span><br><span class="line">类方法：</span><br><span class="line">1 获取学生的姓名：get_name() 返回类型:str</span><br><span class="line">2 获取学生的年龄：get_age() 返回类型:int</span><br><span class="line">3 返回3门科目中最高的分数。get_course() 返回类型:int</span><br><span class="line">写好类以后，可以定义2个同学测试下:</span><br><span class="line">zm = Student(&#x27;zhangming&#x27;,20,[69,88,100])</span><br><span class="line">返回结果：</span><br><span class="line">zhangming</span><br><span class="line">20</span><br><span class="line">100</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name, age, scores):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.scores = scores</span><br><span class="line">    def get_name(self):</span><br><span class="line">        return self.name</span><br><span class="line">    def get_age(self):</span><br><span class="line">        return self.age</span><br><span class="line">    def get_course(self):</span><br><span class="line">        return max(self.scores)</span><br><span class="line">zm = Student(&#x27;zhangming&#x27;, 20, [69, 88, 100])</span><br><span class="line">print zm.get_name()</span><br><span class="line">print zm.get_age()</span><br><span class="line">print zm.get_course()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">二：定义一个字典类：dictclass。完成下面的功能：</span><br><span class="line">dict = dictclass(&#123;你需要操作的字典对象&#125;)</span><br><span class="line">1 删除某个key</span><br><span class="line">del_dict(key)</span><br><span class="line">2 判断某个键是否在字典里，如果在返回键对应的值，不存在则返回&quot;not found&quot;</span><br><span class="line">get_dict(key)</span><br><span class="line">3 返回键组成的列表：返回类型;(list)</span><br><span class="line">get_key()</span><br><span class="line">4 合并字典，并且返回合并后字典的values组成的列表。返回类型:(list)</span><br><span class="line">update_dict(&#123;要合并的字典&#125;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class dictclass(object):</span><br><span class="line">    def __init__(self, dict):</span><br><span class="line">        self.dict = dict</span><br><span class="line">    def get_dict(self, key):</span><br><span class="line">        if self.dict. has_key(key):</span><br><span class="line">            return self.dict[key]</span><br><span class="line">        return &#x27;not found&#x27;</span><br><span class="line">    def del_dict(self, key):</span><br><span class="line">        if self.dict.has_key(key):</span><br><span class="line">            self.dict.pop(key)</span><br><span class="line">        else:</span><br><span class="line">            return &#x27;no that key&#x27;</span><br><span class="line">    def get_key(self):</span><br><span class="line">        return self.dict.keys()</span><br><span class="line">    def updata_dict(self, dict2):</span><br><span class="line">        self.dict = dict(self.dict, **dict2)</span><br><span class="line">        return self.dict.values()</span><br><span class="line"> </span><br><span class="line">A = dictclass(&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;)</span><br><span class="line">print A.get_dict(&#x27;c&#x27;)</span><br><span class="line">print A.del_dict(&#x27;c&#x27;)</span><br><span class="line">print A.get_key()</span><br><span class="line">print A.updata_dict(&#123;&#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;)</span><br><span class="line"> </span><br><span class="line"># 关于删除字典中的元素</span><br><span class="line"># pop 删除并返回对应的value值</span><br><span class="line">B = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><span class="line">print B.pop(&#x27;b&#x27;)</span><br><span class="line">print B</span><br><span class="line"># del void不返回值</span><br><span class="line">C = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span><br><span class="line">del C[&#x27;a&#x27;]</span><br><span class="line">print C</span><br><span class="line"># del dict 删除字典，不存在这个字典</span><br><span class="line"># dict.clear()删除字典内所有元素但字典还是存在只是没有元素</span><br><span class="line">D = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span><br><span class="line">D.clear()</span><br><span class="line"># 关于合并字典</span><br><span class="line">A = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span><br><span class="line">B = &#123;&#x27;d&#x27;: 4, &#x27;e&#x27;: 5, &#x27;f&#x27;: 6&#125;</span><br><span class="line">C = dict(A.items() + B.items())</span><br><span class="line">D = dict(A, **B)  # 这种合并方法会比上一种快很多对于重复的key，B会覆盖A</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">定义一个列表的操作类：Listinfo</span><br><span class="line">包括的方法:</span><br><span class="line">1 列表元素添加: add_key(keyname)  [keyname:字符串或者整数类型]</span><br><span class="line">2 列表元素取值：get_key(num) [num:整数类型]</span><br><span class="line">3 列表合并：update_list(list)	  [list:列表类型]</span><br><span class="line">4 删除并且返回最后一个元素：del_key()</span><br><span class="line">list_info = Listinfo([44,222,111,333,454,&#x27;sss&#x27;,&#x27;333&#x27;])</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class Listinfo(object):</span><br><span class="line">    def __init__(self, list_val):</span><br><span class="line">        self.varlist = list_val</span><br><span class="line"> </span><br><span class="line">    def add_key(self, key_name):</span><br><span class="line">        if isinstance(key_name, (str, int)):</span><br><span class="line">            self.varlist.append(key_name)</span><br><span class="line">            return self.varlist</span><br><span class="line">        else:</span><br><span class="line">            return &#x27;error&#x27;</span><br><span class="line"> </span><br><span class="line">    def get_key(self, num):</span><br><span class="line">        if num &gt;= 0 and num &lt; len(self.varlist):</span><br><span class="line">            return self.varlist[num]</span><br><span class="line">        else:</span><br><span class="line">            return &#x27;error&#x27;</span><br><span class="line"> </span><br><span class="line">    def update_list(self, List_et):</span><br><span class="line">        self.varlist.extend(List_et)</span><br><span class="line">        return self.varlist</span><br><span class="line"> </span><br><span class="line">    def del_key(self):</span><br><span class="line">        if len(self.varlist) &gt;= 0:</span><br><span class="line">            return self.varlist.pop(-1)</span><br><span class="line">        else:</span><br><span class="line">            return &#x27;error&#x27;</span><br><span class="line">list_info = Listinfo([44, 222, 111, 333, 454, &#x27;sss&#x27;, &#x27;333&#x27;])</span><br><span class="line">print list_info.add_key(&#x27;1111&#x27;)</span><br><span class="line">print list_info.get_key(4)</span><br><span class="line">print list_info.update_list([&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;])</span><br><span class="line">print list_info.del_key()</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">定义一个集合的操作类：Setinfo</span><br><span class="line">包括的方法:</span><br><span class="line">1 集合元素添加: add_setinfo(keyname)  [keyname:字符串或者整数类型]</span><br><span class="line">2 集合的交集：get_intersection(unioninfo) [unioninfo :集合类型]</span><br><span class="line">3 集合的并集： get_union(unioninfo)[unioninfo :集合类型]</span><br><span class="line">4 集合的差集：del_difference(unioninfo) [unioninfo :集合类型]</span><br><span class="line">set_info =  Setinfo(你要操作的集合)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">class Setinfo(object):</span><br><span class="line">    def __init__(self, my_Set):</span><br><span class="line">        self.Sett = my_Set</span><br><span class="line"> </span><br><span class="line">    def add_setinfo(self, keyname):</span><br><span class="line">        if isinstance(keyname, (int, str)):</span><br><span class="line">            self.Sett.add(keyname)</span><br><span class="line">            return self.Sett</span><br><span class="line">        return &#x27;error&#x27;</span><br><span class="line"> </span><br><span class="line">    def get_intersection(self, unioninfo):</span><br><span class="line">        if isinstance(unioninfo, set):</span><br><span class="line">            return self.Sett &amp; unioninfo</span><br><span class="line">        return &#x27;error&#x27;</span><br><span class="line"> </span><br><span class="line">    def get_union(self, unioninfo):</span><br><span class="line">        if isinstance(unioninfo, set):</span><br><span class="line">            return self.Sett | unioninfo</span><br><span class="line">        return &#x27;error&#x27;</span><br><span class="line"> </span><br><span class="line">    def del_difference(self, unioninfo):</span><br><span class="line">        if isinstance(unioninfo, set):</span><br><span class="line">            return self.Sett - unioninfo</span><br><span class="line">        return &#x27;error&#x27;</span><br><span class="line"> </span><br><span class="line">A = set([1, 2, 3, 4, 5, 2])</span><br><span class="line">B = set([5, 6, 3])</span><br><span class="line">set_info = Setinfo(A)</span><br><span class="line">print set_info.add_setinfo(&#x27;f&#x27;)</span><br><span class="line">print set_info.get_intersection(B)</span><br><span class="line">print set_info.get_union(B)</span><br><span class="line">print set_info.del_difference(B)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">题目一： 写一个网页数据操作类。完成下面的功能：</span><br><span class="line">提示：需要用到urllib模块</span><br><span class="line">get_httpcode()获取网页的状态码，返回结果例如：200,301,404等 类型为int</span><br><span class="line">get_htmlcontent() 获取网页的内容。返回类型:str</span><br><span class="line">get_linknum()计算网页的链接数目。</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import urllib</span><br><span class="line">import urllib2</span><br><span class="line">class page_data(object):</span><br><span class="line">    def __init__(self, url_add):</span><br><span class="line">        self.url = url_add</span><br><span class="line"> </span><br><span class="line">    def get_httpcode(self):</span><br><span class="line">        status = urllib.urlopen(self.url).code</span><br><span class="line">        return status</span><br><span class="line"> </span><br><span class="line">    def get_htmlcontent(self):</span><br><span class="line">        contentstr = urllib2.urlopen(self.url).read()</span><br><span class="line">        return contentstr</span><br><span class="line"> </span><br><span class="line">    def get_linknum(self):</span><br><span class="line">        content = urllib2.urlopen(self.url).read()</span><br><span class="line">        return len(content.split(&#x27;&lt;a href=&#x27;)) - 1</span><br><span class="line"> </span><br><span class="line">A = page_data(&quot;http://www.baidu.com&quot;)</span><br><span class="line">print A.get_httpcode()</span><br><span class="line">print A.get_htmlcontent()</span><br><span class="line">print A.get_linknum()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line">class SchoolMember:</span><br><span class="line">    # Represents any school member.</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        print &#x27;(Initialized SchoolMember: %s)&#x27; % self.name</span><br><span class="line"> </span><br><span class="line">    def tell(self):</span><br><span class="line">        # Tell my details.</span><br><span class="line">        print &#x27;Name:&quot;%s&quot; Age:&quot;%s&quot;&#x27; % (self.name, self.age),</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class Teacher(SchoolMember):</span><br><span class="line">    # Represents a teacher.</span><br><span class="line">    def __init__(self, name, age, salary):</span><br><span class="line">        SchoolMember.__init__(self, name, age)</span><br><span class="line">        self.salary = salary</span><br><span class="line">        print &#x27;(Initialized Teacher: %s)&#x27; % self.name</span><br><span class="line"> </span><br><span class="line">    def tell(self):</span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print &#x27;Salary: &quot;%d&quot;&#x27; % self.salary</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class Student(SchoolMember):</span><br><span class="line">    # Represents a student.</span><br><span class="line">    def __init__(self, name, age, marks):</span><br><span class="line">        SchoolMember.__init__(self, name, age)</span><br><span class="line">        self.marks = marks</span><br><span class="line">        print &#x27;(Initialized Student: %s)&#x27; % self.name</span><br><span class="line"> </span><br><span class="line">    def tell(self):</span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print &#x27;Marks: &quot;%d&quot;&#x27; % self.marks</span><br><span class="line"> </span><br><span class="line">t = Teacher(&#x27;Mrs. Shrividya&#x27;, 40, 30000)</span><br><span class="line">s = Student(&#x27;Swaroop&#x27;, 22, 75)</span><br><span class="line">c = SchoolMember(&#x27;Swar&#x27;, 22)</span><br><span class="line">t.tell()</span><br><span class="line">s.tell()</span><br><span class="line">c.tell()</span><br></pre></td></tr></table></figure>

<p><a class="link"   href="https://blog.csdn.net/bullpride/article/details/52022701" >https://blog.csdn.net/bullpride/article/details/52022701<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python中requests使用中文乱码的解决方案</title>
    <url>/2021/12/02/requests%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<ul>
<li> 中文乱码处理<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://www.baidu.com&quot;</span><br><span class="line">r = requests.get(url)</span><br><span class="line"># 自动选择合适的编码方式</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>
中文乱码显示正常了！！</li>
</ul>
<p>有时候，我们还会遇到通过这个操作后无法解决的情况，比如新浪首页的表现：<br>出现这种情况，据说是使用gzip将网页压缩了，必须先对其解码，使用r.content会自动解码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://www.sina.com.cn/&quot;</span><br><span class="line">r = requests.get(url)</span><br><span class="line"># 指定编码解码方式</span><br><span class="line">html = r.content.decode(&#x27;UTF-8&#x27;)</span><br><span class="line"># r.encoding = &#x27;utf-8&#x27;</span><br></pre></td></tr></table></figure>
<p>其实吧，处理的方式有很多，大家注意一点，那就是看请求的html数据中最前面对的charset设置的是啥！！</p>
<ul>
<li> html实体编码解析<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: s = &#x27;目前玩的挺好的，就&amp;hellip;&amp;hellip;&lt;br&gt;给四星是因为为什么不是同一个服的就不能进社团😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬&#x27;</span><br><span class="line">#可以看到，有个&#x27;&amp;hellip;&#x27;，这玩意是html实体表示省略号&#x27;...&#x27;，因此需要进行处理！</span><br><span class="line">In [2]: import html</span><br><span class="line"></span><br><span class="line">In [3]: html.unescape(s)</span><br><span class="line">Out[3]: &#x27;目前玩的挺好的，就……&lt;br&gt;给四星是因为为什么不是同一个服的就不能进社团😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬😬&#x27;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python电影数据分析</title>
    <url>/2020/03/11/python%E7%94%B5%E5%BD%B1%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3pbn6ny481hc.png"
                     
                ></p>
<h1 id="一、数据概述"><a href="#一、数据概述" class="headerlink" title="一、数据概述"></a>一、数据概述</h1><p>id：标识号<br>imdb_id：IMDB 标识号<br>popularity：在 Movie Database 上的相对页面查看次数<br>budget：预算（美元）<br>revenue：收入（美元）<br>original_title：电影名称<br>cast：演员列表，按 | 分隔，最多 5 名演员<br>homepage：电影首页的 URL<br>director：导演列表，按 | 分隔，最多 5 名导演<br>tagline：电影的标语<br>keywords：与电影相关的关键字，按 | 分隔，最多 5 个关键字<br>overview：剧情摘要<br>runtime：电影时长<br>genres：风格列表，按 | 分隔，最多 5 种风格<br>production_companies：制作公司列表，按 | 分隔，最多 5 家公司<br>release_date：首次上映日期<br>vote_count：评分次数<br>vote_average：平均评分<br>based on novel 是否由小说改编</p>
<h1 id="二、提出问题"><a href="#二、提出问题" class="headerlink" title="二、提出问题"></a>二、提出问题</h1><p>每年上映电影数量、电影总票房表现？<br>电影票房与哪些因素最相关？<br>各类型电影表现？<br>各电影类型之间的关联性<br>原创电影与改编电影有何差异？<br>受众喜好与那些因素有关？电影时长为多少最合适？<br>Universal Pictures与Paramount Pictures两家行业巨头的业绩如何？</p>
<h1 id="三、每年上映电影数量、电影总票房是多少？"><a href="#三、每年上映电影数量、电影总票房是多少？" class="headerlink" title="三、每年上映电影数量、电影总票房是多少？"></a>三、每年上映电影数量、电影总票房是多少？</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6b4rg4rm8f0g.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.2zjbppvcxm2o.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.nkkuasvv4ww.png"
                     
                ></p>
<p>电影工业在最近三十几年呈现稳步式增长，2014年数量最多。虽然电影数量最近二十年内有3次较大的波动，但电影总票房仍然保持在较高的水准，说明电影市场已经成熟，有固定的消费人群，可见投资电影仍然是很好的投资方式。</p>
<h1 id="四、电影票房与哪些因素最相关？"><a href="#四、电影票房与哪些因素最相关？" class="headerlink" title="四、电影票房与哪些因素最相关？"></a>四、电影票房与哪些因素最相关？</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.n21iikmlnb.png"
                     
                ></p>
<p>由以上可知，电影票房与电影预算（0.73），受欢迎度（0.66），评价次数（0.78）存在强相关。 绘制电影票房与受欢迎度，评价次数，电影预算的相关性散点图及其线性回归线。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.402wi8il56kg.png"
                     
                ></p>
<p>如图，电影预算、评分基本与电影票房呈正线性相关的关系，这也符合正常经济规律。</p>
<h1 id="五、各类型电影表现？"><a href="#五、各类型电影表现？" class="headerlink" title="五、各类型电影表现？"></a>五、各类型电影表现？</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4yo6dofyk6bk.png"
                     
                ></p>
<p>约从1992开始，电影市场开始爆发式增长，其中戏剧类（Drama）和喜剧类（Comedy）这两个类型是随时间增长幅度最大的，现在也比较热门。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6w6fy2r0f75s.png"
                     
                ></p>
<p>如上图，可见投资一部电影的话，上图中的类型是最好的选择，尤以comedy和drama最佳。那不同类型电影的盈利能力如何呢？</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.1jep74ld6qgw.png"
                     
                ></p>
<p>电影关键词主要以based on novel（基于小说）、women（女性）、independent film（独立电影）、murder（谋杀）为主</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.64w9itd55j40.png"
                     
                ></p>
<p>由图可知，平均收益前3的电影类型为：冒险类（Adventure）、科幻类（Fantasy）、动画类（Animation），而外国电影类（Foreign）和电视电影类（TV Movie）有亏损的风险。</p>
<h1 id="六、各电影类型之间关联性"><a href="#六、各电影类型之间关联性" class="headerlink" title="六、各电影类型之间关联性"></a>六、各电影类型之间关联性</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.2uu5wutrq6m8.png"
                     
                ></p>
<p>(Animation)与(Family)、(Adventure, Thriller)与(Action)、(Fantasy) 与(Family)、(Thriller, Drama)与(Crime) 在支持度阈值2.5%，提升度为3 的情况下，表现出较强的关联性，也符合人们的生活常识</p>
<h1 id="七、原创电影与改编电影有何差异？"><a href="#七、原创电影与改编电影有何差异？" class="headerlink" title="七、原创电影与改编电影有何差异？"></a>七、原创电影与改编电影有何差异？</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4oeqnee8dpj4.png"
                     
                ></p>
<p>可见，绝大部分电影还是原创为主。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3o19mntggc5c.png"
                     
                ></p>
<p>原创电影的利润与改编电影相差一倍多。</p>
<h1 id="八、受众喜好与那些因素有关？电影时长为多少最合适？"><a href="#八、受众喜好与那些因素有关？电影时长为多少最合适？" class="headerlink" title="八、受众喜好与那些因素有关？电影时长为多少最合适？"></a>八、受众喜好与那些因素有关？电影时长为多少最合适？</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.1cg3xbzwubz4.png"
                     
                ></p>
<p>受众欢迎度较高的电影类型为Adventure，Science Fiction ，Fantasy。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.777udesc9r7k.png"
                     
                ></p>
<p>受众欢迎度较高的电影的时长基本在90-200分钟之间。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.33vaixewp474.png"
                     
                ></p>
<p>受欢迎度高的电影，评分肯定高。反之评分高的电影，受欢迎度可能低，这就是冷门好片的天地。</p>
<h1 id="九、Universal-Pictures与Paramount-Pictures两家行业巨头的业绩如何？"><a href="#九、Universal-Pictures与Paramount-Pictures两家行业巨头的业绩如何？" class="headerlink" title="九、Universal Pictures与Paramount Pictures两家行业巨头的业绩如何？"></a>九、Universal Pictures与Paramount Pictures两家行业巨头的业绩如何？</h1><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.2h5jra486agw.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.26kanvogyxwg.png"
                     
                ></p>
<p>两家公司制作的主要电影类型几乎一致，戏剧类（Drama）、喜剧类（Comedy）、惊悚类（Thriller）、动作类（Action）占据了两家公司制作总量的60%左右，这与总的各类型电影数量分布也是相似的，可供其他公司参考其布局策略。</p>
<h1 id="十、结论"><a href="#十、结论" class="headerlink" title="十、结论"></a>十、结论</h1><p>目前电影市场成熟，产量和票房都处于较高的水平；<br>电影的预算、评价会直接影响电影票房，故一定的电影预算是电影票房成功的基础；<br>(Animation)与(Family)、(Adventure, Thriller)与(Action)、(Fantasy) 与(Family)、(Thriller, Drama)与(Crime) 在给定阈值下有较强的关联性。<br>最受欢迎的电影类型是comedy和drama，投资这两个类型的电影是不错的选择；<br>(Universal Pictures)的电影数量多于(Paramount Pictures)，两者票房表现不相上下。<br>原创电影在电影工业中占绝对主导地位，因此应重视编剧和剧本的选择；<br>电影时长应控制在90～200分钟，最符合观众的观影习惯，也最易获得成功。</p>
<h1 id="十一、Python代码"><a href="#十一、Python代码" class="headerlink" title="十一、Python代码"></a>十一、Python代码</h1><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">import seaborn as sns</span><br><span class="line">from wordcloud import WordCloud</span><br><span class="line">from mlxtend.frequent_patterns import apriori</span><br><span class="line">from mlxtend.frequent_patterns import association_rules</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]#显示中文</span><br><span class="line">plt.style.use(&#x27;ggplot&#x27;)</span><br></pre></td></tr></table></figure>
<h5 id="使用apriori算法进行关联规则挖掘"><a href="#使用apriori算法进行关联规则挖掘" class="headerlink" title="使用apriori算法进行关联规则挖掘"></a>使用apriori算法进行关联规则挖掘</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">path = &#x27;D:/python_data_file/based_on_novel.csv&#x27;</span><br><span class="line">data = pd.read_csv(path)</span><br><span class="line"></span><br><span class="line">movie_genres = pd.DataFrame(data,columns=[&#x27;original_title&#x27;,&#x27;genres&#x27;])</span><br><span class="line">movies_ohe = movie_genres.drop(&#x27;genres&#x27;,1).join(movie_genres.genres.str.get_dummies())</span><br><span class="line"># print(movies_ohe.shape)#(10866, 21)</span><br><span class="line">movies_ohe.set_index([&#x27;original_title&#x27;],inplace=True)</span><br><span class="line"></span><br><span class="line">frequent_itemsets_movies = apriori(movies_ohe,use_colnames=True, min_support=0.025)</span><br><span class="line">result = [i for i in frequent_itemsets_movies.itemsets if len(i)&gt;1]</span><br><span class="line"># len(result)#37</span><br><span class="line">rules_movies =  association_rules(frequent_itemsets_movies, metric=&#x27;lift&#x27;, min_threshold=1.25)</span><br><span class="line"># print(rules_movies)</span><br><span class="line">rules_movies[(rules_movies.lift&gt;3)].sort_values(by=[&#x27;lift&#x27;], ascending=False)</span><br></pre></td></tr></table></figure>
<h5 id="处理数据"><a href="#处理数据" class="headerlink" title="处理数据"></a>处理数据</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xdata = data[[&#x27;id&#x27;,&#x27;popularity&#x27;,&#x27;production_companies&#x27;,</span><br><span class="line">              &#x27;budget&#x27;,&#x27;revenue&#x27;,&#x27;original_title&#x27;,&#x27;runtime&#x27;,&#x27;release_date&#x27;,&#x27;genres&#x27;,&#x27;vote_count&#x27;,&#x27;vote_average&#x27;,&#x27;based on novel&#x27;]]</span><br><span class="line">#要求制造商和电影类型不能为空</span><br><span class="line">clean_xdata = xdata[xdata.production_companies.notnull()&amp;xdata.genres.notnull()].reset_index(drop=True)</span><br><span class="line"># 每年总票房</span><br><span class="line">clean_xdata[&#x27;year&#x27;] = pd.to_datetime(clean_xdata.release_date,format=&#x27;%Y-%m-%d&#x27;).dt.year</span><br><span class="line">year_revenue = clean_xdata.groupby(&#x27;year&#x27;)[&#x27;revenue&#x27;].sum()</span><br><span class="line">def pic_trend(data,tit,xlab,ylab):</span><br><span class="line">    plt.figure(figsize=(12,6))</span><br><span class="line">    data.plot()</span><br><span class="line">    plt.title(tit,fontsize = 20)</span><br><span class="line">    plt.xlabel(xlab,fontsize=15)</span><br><span class="line">    plt.ylabel(ylab,fontsize=15)</span><br><span class="line">    plt.show()</span><br><span class="line">pic_trend(year_revenue,&#x27;每年总票房统计&#x27;,&#x27;年份&#x27;,&#x27;总票房&#x27;)</span><br><span class="line">#每年上映电影数量统计</span><br><span class="line">year_count = clean_xdata.groupby(&#x27;year&#x27;).id.count()</span><br><span class="line">pic_trend(year_count,&#x27;每年上映电影数量统计&#x27;,&#x27;年份&#x27;,&#x27;上映电影数量&#x27;)</span><br><span class="line">#每年上映电影数量饼图</span><br><span class="line">def pic_pie(data,val,gby,tit):</span><br><span class="line">    data = data.reset_index(drop=False)</span><br><span class="line">    fig = plt.figure(figsize=(16,8))</span><br><span class="line">    plt.pie(data[val],labels=data[gby],autopct=&#x27;%.1f%%&#x27;)</span><br><span class="line">    plt.title(tit,fontsize = 15)</span><br><span class="line">pic_pie(year_count,&#x27;id&#x27;,&#x27;year&#x27;,&#x27;每年上映电影数量&#x27;)</span><br></pre></td></tr></table></figure>
<h4 id="画走势图"><a href="#画走势图" class="headerlink" title="画走势图"></a>画走势图</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 随时间推移如何发生变化的</span><br><span class="line">genre_df = clean_xdata.genres.str.get_dummies()#构建虚拟变量，相当于把各电影类型作为列名展开为一个稀疏矩阵</span><br><span class="line">genre_df[&#x27;release_date&#x27;] = clean_xdata[&#x27;year&#x27;]</span><br><span class="line">genre_by_year = genre_df.groupby(&#x27;release_date&#x27;).sum()</span><br><span class="line">fig = plt.figure(figsize=(12,6))</span><br><span class="line">plt.plot(genre_by_year,label = genre_by_year.columns)</span><br><span class="line">plt.legend(genre_by_year)</span><br><span class="line">plt.xticks(range(1950,2020,10))</span><br><span class="line">plt.title(&#x27;电影类型随时间变动趋势图&#x27;,fontsize=20)</span><br><span class="line">plt.xlabel(&#x27;年份&#x27;,fontsize = 20)</span><br><span class="line">plt.ylabel(&#x27;数量&#x27;,fontsize = 20)</span><br><span class="line"></span><br><span class="line"># ②电影类型数量分布</span><br><span class="line">genre_sum = genre_by_year.sum().sort_values(ascending = False)</span><br><span class="line">#这里的label参数加不加在图中没有任何变化</span><br><span class="line">genre_sum.plot.barh(label=&#x27;genre&#x27;,figsize = (12,6))</span><br><span class="line">plt.title(&#x27;电影类型数量分布图&#x27;,fontsize = 20)</span><br><span class="line">plt.xlabel(&#x27;数量&#x27;,fontsize=20)</span><br><span class="line">plt.ylabel(&#x27;电影类型&#x27;,fontsize=20)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h4 id="计算指标"><a href="#计算指标" class="headerlink" title="计算指标"></a>计算指标</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># （二）不同类型电影的盈利能力如何？</span><br><span class="line"># 建立电影类型-利润数据框，计算各电影类型平均收益：</span><br><span class="line">a = clean_xdata.revenue - clean_xdata.budget</span><br><span class="line">profit_df = genre_df.join(pd.DataFrame(a,columns=[&#x27;profit&#x27;]))</span><br><span class="line"></span><br><span class="line">#计算个电影类型的利润平均值</span><br><span class="line">#传递as_index=False，把分组键的类型作为一列返回在DataFrame中，而不是默认True时作为Series的索引返回</span><br><span class="line">genre_set = clean_xdata[&#x27;genres&#x27;].str.get_dummies().columns.unique()</span><br><span class="line">profit_by_genre = pd.Series(index=genre_set)</span><br><span class="line">for genre in genre_set:</span><br><span class="line">    profit_by_genre[genre] = profit_df.groupby(genre,as_index = False).profit.mean().loc[1,&#x27;profit&#x27;]</span><br><span class="line">#画出各电影类型平均收益分布图</span><br><span class="line">profit_by_genre.sort_values().plot.barh(label=&#x27;genre&#x27;,figsize=(12,6))</span><br><span class="line">plt.title(&#x27;各电影类型平均收益分布图&#x27;,fontsize=20)</span><br><span class="line">plt.xlabel(&#x27;利润&#x27;,fontsize=20)</span><br><span class="line">plt.ylabel(&#x27;电影类型&#x27;,fontsize=20)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">original_recompose = pd.DataFrame(clean_xdata[&#x27;budget&#x27;])</span><br><span class="line">original_recompose.loc[:,&#x27;profit&#x27;] = profit_df.profit</span><br><span class="line">original_recompose[&#x27;type&#x27;] = clean_xdata[&#x27;based on novel&#x27;].map(lambda x :1 if x==&#x27;based on novel&#x27; else 0)</span><br><span class="line">#原创或改编电影的预算与利润</span><br><span class="line">#这个地方重新定义新的DataFrame --original_recompose_groupby用来存储各个指标分组后的均值（原创与改编电影概要）</span><br><span class="line">original_recompose_groupby = original_recompose.groupby(&#x27;type&#x27;).mean()</span><br><span class="line">original_recompose_groupby[&#x27;count&#x27;] = original_recompose.groupby(&#x27;type&#x27;).type.count()</span><br><span class="line">original_recompose_groupby[&#x27;profit_rate&#x27;] = original_recompose_groupby.profit/original_recompose_groupby.budget#这里有细节,平均利润率</span><br><span class="line">original_recompose_groupby.rename(index = &#123;0:&#x27;original&#x27;,1:&#x27;recompose&#x27;&#125;,inplace = True)#传递inplace=True会删去原来的索引，否则会保留</span><br><span class="line">#是否原创电影数量对比图</span><br><span class="line">plt.figure(figsize =(12,6))</span><br><span class="line">original_recompose_groupby.loc[original_recompose_groupby.index,&#x27;count&#x27;].plot.bar()#传入loc【】里面的参数不能是；&#x27;type&#x27;,会报错</span><br><span class="line">plt.title(&#x27;原创改编电影数量对比&#x27;,fontsize = 20)</span><br><span class="line">plt.xlabel(&#x27;原创-改变&#x27;,fontsize = 20)</span><br><span class="line">plt.ylabel(&#x27;数量&#x27;,fontsize = 20)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">#绘制利润柱状图</span><br><span class="line">x= list(range(len(original_recompose_groupby.index)))#索引长度序列</span><br><span class="line">xl = original_recompose_groupby.index#xl为索引实际值</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax1=fig.add_subplot(111)</span><br><span class="line">plt.bar(x,original_recompose_groupby.profit)</span><br><span class="line">#接下来有疑问？</span><br><span class="line">plt.xticks(x,xl,rotation = 0,fontsize=12)</span><br><span class="line">plt.yticks(fontsize=15)</span><br><span class="line">ax1.set_title(&#x27;原创与改编电影平均利润对比&#x27;,fontsize = 20)</span><br><span class="line">ax1.set_xlabel(&#x27;原创-改变&#x27;,fontsize = 18)</span><br><span class="line">ax1.set_ylabel(&#x27;利润&#x27;,fontsize = 18)</span><br><span class="line">ax1.legend(loc=2,labels=&#x27;利润&#x27;)</span><br><span class="line"></span><br><span class="line">#绘制利润折线图</span><br><span class="line">import matplotlib.ticker as mtick</span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line">ax2.plot(x,original_recompose_groupby[&#x27;profit_rate&#x27;],&#x27;go-&#x27;,lw=2)</span><br><span class="line">fmt=&#x27;%.2f%%&#x27;</span><br><span class="line">yticks = mtick.FormatStrFormatter(fmt)</span><br><span class="line">ax2.yaxis.set_major_formatter(yticks)#次纵坐标标签设置为百分比显示</span><br><span class="line">plt.yticks(fontsize = 15)</span><br><span class="line">ax2.set_ylabel(&#x27;利润率&#x27;,fontsize = 18)</span><br><span class="line">ax2.legend(loc=4,labels = &#x27;profit_rate&#x27;)#传递labels参数避免警告</span><br></pre></td></tr></table></figure>
<p>#####生成词云</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keywords_data = data[[&#x27;id&#x27;,&#x27;popularity&#x27;,&#x27;production_companies&#x27;,&#x27;budget&#x27;,&#x27;revenue&#x27;,&#x27;original_title&#x27;,&#x27;runtime&#x27;,&#x27;release_date&#x27;,&#x27;genres&#x27;,&#x27;vote_count&#x27;,&#x27;vote_average&#x27;,&#x27;based on novel&#x27;,&#x27;keywords&#x27;]]</span><br><span class="line">keywords_data = data[data.production_companies.notnull()&amp;data.genres.notnull()].reset_index(drop=True)#得到 包含关键字keywords数据的列表</span><br><span class="line">keywords_list1 = []</span><br><span class="line">for x in keywords_data.keywords.dropna():</span><br><span class="line">    keywords_list1.append(x)</span><br><span class="line">keywords_list1 = &#x27;&#x27;.join(keywords_list1)</span><br><span class="line">keywords_list1 = keywords_list1.replace(&#x27;\s&#x27;,&#x27;&#x27;)#去除字符串中空字符串（\s用于匹配空白字符，可能是空格、制表符、其他空白））</span><br><span class="line"></span><br><span class="line">wordcloud = WordCloud(background_color=&#x27;black&#x27;,max_words=3000,scale=1.5).generate(keywords_list1)</span><br><span class="line">plt.figure(figsize=(14,8))</span><br><span class="line">plt.imshow(wordcloud)</span><br><span class="line">plt.axis(&#x27;off&#x27;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">popular_genre_df = pd.concat([genre_df.iloc[:,:-1],clean_xdata.popularity],axis=1)</span><br><span class="line">#计算各类型电影受欢迎度均值</span><br><span class="line">list = []</span><br><span class="line">for genre in genre_set:</span><br><span class="line">    list.append(popular_genre_df.groupby(genre,as_index = False).popularity.mean().loc[1,&#x27;popularity&#x27;])</span><br><span class="line">popular_by_genre= pd.DataFrame(index=genre_set)</span><br><span class="line">popular_by_genre[&#x27;popularity_mean&#x27;] = list</span><br><span class="line">#电影类型受欢迎度分布图</span><br><span class="line">popular_by_genre.sort_values(by=&#x27;popularity_mean&#x27;).plot.barh(figsize=(14,8))</span><br><span class="line">plt.title(&#x27;电影类型受欢迎度分布图&#x27;,fontsize=20)</span><br><span class="line">plt.xlabel(&#x27;受欢迎度&#x27;,fontsize=20)</span><br><span class="line">plt.ylabel(&#x27;电影类型&#x27;,fontsize=20)</span><br><span class="line">plt.show()</span><br><span class="line"># ②电影时长与受众欢迎度</span><br><span class="line">plt.scatter(clean_xdata.runtime,clean_xdata.popularity)</span><br><span class="line">plt.title(&#x27;时长与欢迎度散点图&#x27;,fontsize=20)</span><br><span class="line">plt.xlabel(&#x27;电影时长&#x27;,fontsize=20)</span><br><span class="line">plt.ylabel(&#x27;受欢迎度&#x27;,fontsize=20)</span><br><span class="line">plt.show()</span><br><span class="line"># ③电影评分与受众欢迎度</span><br><span class="line">plt.scatter(clean_xdata.vote_average,clean_xdata.popularity)</span><br><span class="line">plt.title(&#x27;评分与欢迎度散点图&#x27;,fontsize=20)</span><br><span class="line">plt.xlabel(&#x27;电影评分&#x27;,fontsize=20)</span><br><span class="line">plt.ylabel(&#x27;受欢迎度&#x27;,fontsize=20)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h4 id="Universal-Pictures与Paramount-Pictures"><a href="#Universal-Pictures与Paramount-Pictures" class="headerlink" title="Universal Pictures与Paramount Pictures"></a>Universal Pictures与Paramount Pictures</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">companies_list =[&#x27;Universal Pictures&#x27;,&#x27;Paramount Pictures&#x27;]</span><br><span class="line">companies_df = pd.DataFrame()</span><br><span class="line">for company in companies_list:#各电影的电影商是否包含两者中其中一个，是则返回1，否则返回0</span><br><span class="line">    companies_df[company] =clean_xdata.production_companies.str.contains(company).map(lambda x :1 if x else 0)</span><br><span class="line">companies_df = pd.concat([companies_df,genre_df.iloc[:,:-1],profit_df.profit],axis=1)</span><br><span class="line">list = []</span><br><span class="line">for company in companies_list:</span><br><span class="line">    list.append(companies_df.groupby(company,as_index=False).profit.sum().loc[1,&#x27;profit&#x27;])</span><br><span class="line">companies_profit= pd.DataFrame(list,index = companies_list,columns=[&#x27;profit_sum&#x27;])</span><br><span class="line">companies_profit.plot.bar(label = companies_profit.index,figsize=(8,6))</span><br><span class="line">plt.title(&#x27;两家公司利润对比&#x27;,fontsize=20)</span><br><span class="line">plt.xticks(rotation = 0)</span><br><span class="line">plt.ylabel(&#x27;利润&#x27;,fontsize = 20)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">companies_df_1 = companies_df.groupby(&#x27;Universal Pictures&#x27;)[[&#x27;Action&#x27;, &#x27;Adventure&#x27;, &#x27;Animation&#x27;, &#x27;Comedy&#x27;, &#x27;Crime&#x27;, &#x27;Documentary&#x27;,</span><br><span class="line">       &#x27;Drama&#x27;, &#x27;Family&#x27;, &#x27;Fantasy&#x27;, &#x27;Foreign&#x27;, &#x27;History&#x27;, &#x27;Horror&#x27;, &#x27;Music&#x27;,</span><br><span class="line">       &#x27;Mystery&#x27;, &#x27;Romance&#x27;, &#x27;Science Fiction&#x27;, &#x27;TV Movie&#x27;, &#x27;Thriller&#x27;, &#x27;War&#x27;,</span><br><span class="line">       &#x27;Western&#x27;]].sum().loc[1,:]</span><br><span class="line">companies_df_2 = companies_df.groupby(&#x27;Paramount Pictures&#x27;)[[&#x27;Action&#x27;, &#x27;Adventure&#x27;, &#x27;Animation&#x27;, &#x27;Comedy&#x27;, &#x27;Crime&#x27;, &#x27;Documentary&#x27;,</span><br><span class="line">       &#x27;Drama&#x27;, &#x27;Family&#x27;, &#x27;Fantasy&#x27;, &#x27;Foreign&#x27;, &#x27;History&#x27;, &#x27;Horror&#x27;, &#x27;Music&#x27;,</span><br><span class="line">       &#x27;Mystery&#x27;, &#x27;Romance&#x27;, &#x27;Science Fiction&#x27;, &#x27;TV Movie&#x27;, &#x27;Thriller&#x27;, &#x27;War&#x27;,</span><br><span class="line">       &#x27;Western&#x27;]].sum().loc[1,:]</span><br><span class="line">company_genre_df = pd.DataFrame([companies_df_1,companies_df_2],index = [&#x27;Universal Pictures&#x27;,&#x27;Paramount Pictures&#x27;]).T</span><br><span class="line">fig = plt.figure(figsize=(16,8))</span><br><span class="line">ax1 = fig.add_subplot(121)</span><br><span class="line">plt.pie(company_genre_df[&#x27;Universal Pictures&#x27;],labels=company_genre_df.index,autopct=&#x27;%.1f%%&#x27;)</span><br><span class="line">plt.title(&#x27;Universal Pictures&#x27;,fontsize = 15)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(122)</span><br><span class="line">plt.pie(company_genre_df[&#x27;Paramount Pictures&#x27;],labels=company_genre_df.index,autopct=&#x27;%.1f%%&#x27;)</span><br><span class="line">plt.title(&#x27;Paramount Pictures&#x27;,fontsize=15)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 电影票房与哪些因素最相关？</span><br><span class="line">clean_xdata[[&#x27;budget&#x27;,&#x27;popularity&#x27;,&#x27;release_date&#x27;,&#x27;runtime&#x27;,&#x27;vote_average&#x27;,&#x27;vote_count&#x27;,&#x27;revenue&#x27;]].corr()</span><br><span class="line">import seaborn as sns</span><br><span class="line">revenue_corr = clean_xdata[[&#x27;budget&#x27;,&#x27;popularity&#x27;,&#x27;vote_count&#x27;,&#x27;revenue&#x27;]]</span><br><span class="line">fig = plt.figure(figsize=(18,6))</span><br><span class="line">#电影票票房与电影预算相关性散点图</span><br><span class="line"></span><br><span class="line">ax1 = plt.subplot(1,3,1)</span><br><span class="line">ax1 = sns.regplot(x=&#x27;popularity&#x27;, y=&#x27;revenue&#x27;, data=revenue_corr, x_jitter=.1)</span><br><span class="line">ax1.text(400,2e9,&#x27;r=0.64&#x27;,fontsize=15)</span><br><span class="line">plt.title(&#x27;revenue by popularity&#x27;,fontsize=15)</span><br><span class="line">plt.xlabel(&#x27;popularity&#x27;,fontsize=13)</span><br><span class="line">plt.ylabel(&#x27;revenue&#x27;,fontsize=13)</span><br><span class="line"> </span><br><span class="line">ax2 = plt.subplot(1,3,2)</span><br><span class="line">ax2 = sns.regplot(x=&#x27;vote_count&#x27;, y=&#x27;revenue&#x27;, data=revenue_corr, x_jitter=.1,color=&#x27;g&#x27;,marker=&#x27;+&#x27;)</span><br><span class="line">ax2.text(6800,1.1e9,&#x27;r=0.78&#x27;,fontsize=15)</span><br><span class="line">plt.title(&#x27;revenue by vote_count&#x27;,fontsize=15)</span><br><span class="line">plt.xlabel(&#x27;vote_count&#x27;,fontsize=13)</span><br><span class="line">plt.ylabel(&#x27;revenue&#x27;,fontsize=13)</span><br><span class="line"> </span><br><span class="line">ax3 = plt.subplot(1,3,3)</span><br><span class="line">ax3 = sns.regplot(x=&#x27;budget&#x27;, y=&#x27;revenue&#x27;, data=revenue_corr, x_jitter=.1,color=&#x27;r&#x27;,marker=&#x27;^&#x27;)</span><br><span class="line">ax3.text(1.6e8,2.2e9,&#x27;r=0.73&#x27;,fontsize=15)</span><br><span class="line">plt.title(&#x27;revenue by budget&#x27;,fontsize=15)</span><br><span class="line">plt.xlabel(&#x27;budget&#x27;,fontsize=13)</span><br><span class="line">plt.ylabel(&#x27;revenue&#x27;,fontsize=13)</span><br></pre></td></tr></table></figure>
<p>思路要明确，代码要简洁，以后尽量都写成函数。</p>
]]></content>
      <tags>
        <tag>数据分析实战</tag>
      </tags>
  </entry>
  <entry>
    <title>sql互联网游戏数据分析</title>
    <url>/2020/04/20/sql%E4%BA%92%E8%81%94%E7%BD%91%E6%B8%B8%E6%88%8F%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="一、数据概览"><a href="#一、数据概览" class="headerlink" title="一、数据概览"></a>一、数据概览</h1><p>数据共有828934条，108列标签</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.14j5jvjer19c.png"
                     
                ></p>
<p>本文主要对以下10个字段进行分析</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.15fg7qqjowkg.png"
                     
                ></p>
<p>使用工具：Navicat Premium ，jupyter notebook<br>技能要求：SQL掌握到子查询，Python连接数据库（不连也可以）</p>
<h1 id="二、提出问题："><a href="#二、提出问题：" class="headerlink" title="二、提出问题："></a>二、提出问题：</h1><p>1、新增玩家分析：从玩家数量、玩家占比、每日新增玩家数展开分析<br>2、玩家活跃度分析：从不同用户在线时长、分布特征展开分析<br>3、玩家付费情况分析：从PUR（付费比率）、ARPPU（活跃付费用户平均消费金额）等关键指标展开分析<br>4、玩家游戏习惯分析：从不同玩家类型、游戏模式（PVP与PVE）得出的情况来展开分析</p>
<h1 id="三、新增玩家分析"><a href="#三、新增玩家分析" class="headerlink" title="三、新增玩家分析"></a>三、新增玩家分析</h1><p>新增玩家数量：828934人</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT count(DISTINCT user_id) 新增玩家数量 FROM `tap_fun_test`</span><br></pre></td></tr></table></figure>
<p>新增付费玩家数量：19549</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(DISTINCT(user_id))  新增付费玩家数量 from tap_fun_test where pay_price &gt;0;</span><br></pre></td></tr></table></figure>
<p>付费玩家占比:0.0236</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 新增付费玩家/新增玩家数 as 付费玩家占比 from </span><br><span class="line">(SELECT count(distinct user_id) 新增玩家数 from tap_fun_test) as t1 ,</span><br><span class="line">(SELECT count(DISTINCT user_id)  新增付费玩家 from tap_fun_test where pay_price&gt;0) as t2 ;</span><br></pre></td></tr></table></figure>
<p>每日新增用户数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select date(register_time) 日期,count(DISTINCT(user_id)) from tap_fun_test GROUP BY 日期;</span><br></pre></td></tr></table></figure>

<p>每日新增付费用户数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select date(register_time) 日期,count(DISTINCT(user_id)) from tap_fun_test where pay_price&gt;0 GROUP BY 日期;</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.1w7wlbjdniow.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.4v3ad1gpu2v4.png"
                     
                ></p>
<p>每日新增玩家在3月10日有一次大高峰增长，可能举办活动，但活动一过后续新增玩家数并没有显著提升，可见活动没有游戏的人气带来实质性的帮助。<br>活动需要力度加强并保持一定时间维度，给玩家充分时间了解游戏，才能提高秀逸热度。</p>
<p>全部玩家平均在线时长:11.741103057664969</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT avg(avg_online_minutes)  as 全部玩家平均在线时长 from tap_fun_test;</span><br></pre></td></tr></table></figure>
<p>付费玩家平均在线时长:135.8732415946089</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select avg(avg_online_minutes) from tap_fun_test where pay_price&gt;0;</span><br></pre></td></tr></table></figure>
<h1 id="四、玩家活跃度分析"><a href="#四、玩家活跃度分析" class="headerlink" title="四、玩家活跃度分析"></a>四、玩家活跃度分析</h1><p>平均在线时长的分布特点<br>###全部玩家人数的中位数、上下四分位数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select round(count(distinct user_id)/4) as 下四分位数,</span><br><span class="line">round(count(distinct user_id)/2) as 中位数,</span><br><span class="line">round(count(distinct user_id)/4*3) as 上四分位数</span><br><span class="line">from tap_fun_test;</span><br></pre></td></tr></table></figure>
<h4 id="下四分位数：207234-中位数：414467-上四分位数：621701"><a href="#下四分位数：207234-中位数：414467-上四分位数：621701" class="headerlink" title="下四分位数：207234    中位数：414467    上四分位数：621701"></a>下四分位数：207234    中位数：414467    上四分位数：621701</h4><h3 id="全部玩家在线时长箱线图关键值"><a href="#全部玩家在线时长箱线图关键值" class="headerlink" title="全部玩家在线时长箱线图关键值"></a>全部玩家在线时长箱线图关键值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT min(avg_online_minutes) 最小值,</span><br><span class="line">(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 207233,1) as 下四分位数,</span><br><span class="line">(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 414466,1) as 中位数,</span><br><span class="line">(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 621700,1) as 上四分位数,</span><br><span class="line">max( avg_online_minutes) 最大值</span><br><span class="line">FROM `tap_fun_test`	</span><br></pre></td></tr></table></figure>
<h4 id="最小值0-0-下四分位数-0-5-中位数-1-666667，上四分位数：5，最大值：1605-833333"><a href="#最小值0-0-下四分位数-0-5-中位数-1-666667，上四分位数：5，最大值：1605-833333" class="headerlink" title="最小值0.0,下四分位数:0.5,中位数:1.666667，上四分位数：5，最大值：1605.833333"></a>最小值0.0,下四分位数:0.5,中位数:1.666667，上四分位数：5，最大值：1605.833333</h4><h3 id="付费玩家的人数最大值最小值、中位数、上下四分位数"><a href="#付费玩家的人数最大值最小值、中位数、上下四分位数" class="headerlink" title="付费玩家的人数最大值最小值、中位数、上下四分位数"></a>付费玩家的人数最大值最小值、中位数、上下四分位数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select round(count(distinct user_id)/4) as 下四分位数,</span><br><span class="line">round(count(distinct user_id)/2) as 中位数,</span><br><span class="line">round(count(distinct user_id)/4*3) as 上四分位数</span><br><span class="line">from tap_fun_test </span><br><span class="line">WHERE pay_price&gt;0;</span><br></pre></td></tr></table></figure>
<h4 id="下四分位数：4887，-中位数：9775-上四分位数：14662"><a href="#下四分位数：4887，-中位数：9775-上四分位数：14662" class="headerlink" title="下四分位数：4887，    中位数：9775    上四分位数：14662"></a>下四分位数：4887，    中位数：9775    上四分位数：14662</h4><h1 id="付费玩家在线时长箱线图关键值"><a href="#付费玩家在线时长箱线图关键值" class="headerlink" title="付费玩家在线时长箱线图关键值"></a>付费玩家在线时长箱线图关键值</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT min(avg_online_minutes) 最小值,</span><br><span class="line">(select avg_online_minutes from tap_fun_test where pay_price&gt;0 ORDER BY avg_online_minutes LIMIT 4886,1) as 下四分位数,</span><br><span class="line">(select avg_online_minutes from tap_fun_test where pay_price&gt;0 ORDER BY avg_online_minutes LIMIT 9774,1) as 中位数,</span><br><span class="line">(select avg_online_minutes from tap_fun_test where pay_price&gt;0 ORDER BY avg_online_minutes LIMIT 14661,1) as 上四分位数,</span><br><span class="line">max( avg_online_minutes) 最大值</span><br><span class="line">FROM `tap_fun_test` </span><br><span class="line">where pay_price&gt;0;</span><br></pre></td></tr></table></figure>
<h4 id="最小值：0-3333-下四分位数-30-6667-中位数-84-5，上四分位数：191-1667，最大值：1081-5"><a href="#最小值：0-3333-下四分位数-30-6667-中位数-84-5，上四分位数：191-1667，最大值：1081-5" class="headerlink" title="最小值：0.3333 ,下四分位数:30.6667,中位数:84.5，上四分位数：191.1667，最大值：1081.5"></a>最小值：0.3333 ,下四分位数:30.6667,中位数:84.5，上四分位数：191.1667，最大值：1081.5</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.25066jtzv1vk.png"
                     
                ></p>
<p>全部玩家的在线时长箱线图中向下压缩的很厉害，全部玩家上四分位数为5，说明75%的玩家平均在线只有大约5分钟，可能一局游戏都没有玩完，可见玩家流失情况比较严重。<br>付费用户的箱型图中下四分位数为30，中位数84，上四分位数为191，说明付费用户中75%以上的用户在线时长都超过了30分钟。</p>
<h1 id="五、玩家付费情况分析"><a href="#五、玩家付费情况分析" class="headerlink" title="五、玩家付费情况分析"></a>五、玩家付费情况分析</h1><h3 id="关键指标"><a href="#关键指标" class="headerlink" title="关键指标"></a>关键指标</h3><p>AU（active users）活跃用户：游戏时长超过15分钟<br> PU（Paying users）付费用户<br>APA（Active Paying Account）:活跃付费用户数<br>ARPU：平均每个活跃用户的收入，总收入/AU<br> ARPPU：平均活跃付费用户收入,总收入/APU<br> PUR(付费比率)：APA/AU</p>
<h2 id="每个活跃玩家的收入"><a href="#每个活跃玩家的收入" class="headerlink" title="每个活跃玩家的收入"></a>每个活跃玩家的收入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(DISTINCT user_id) as AU,</span><br><span class="line">(select sum(pay_price) from tap_fun_test as 总收入),</span><br><span class="line">(select sum(pay_price) from tap_fun_test) /count(DISTINCT user_id) as 每个活跃玩家收入 </span><br><span class="line">from tap_fun_test </span><br><span class="line">where avg_online_minutes &gt; 15;</span><br><span class="line">#and pay_price&gt;0;每个活跃付费玩家的收入</span><br></pre></td></tr></table></figure>
<h5 id="AU：99846，总收入：556900-04，每个活跃玩家收入ARPU：5-57758989"><a href="#AU：99846，总收入：556900-04，每个活跃玩家收入ARPU：5-57758989" class="headerlink" title="AU：99846，总收入：556900.04，每个活跃玩家收入ARPU：5.57758989"></a>AU：99846，总收入：556900.04，每个活跃玩家收入ARPU：5.57758989</h5><h2 id="每个活跃付费玩家的收入"><a href="#每个活跃付费玩家的收入" class="headerlink" title="每个活跃付费玩家的收入"></a>每个活跃付费玩家的收入</h2><h5 id="APA：16982，总收入：556900-04，每个活跃付费玩家收入ARPPU：32-79354846"><a href="#APA：16982，总收入：556900-04，每个活跃付费玩家收入ARPPU：32-79354846" class="headerlink" title="APA：16982，总收入：556900.04，每个活跃付费玩家收入ARPPU：32.79354846"></a>APA：16982，总收入：556900.04，每个活跃付费玩家收入ARPPU：32.79354846</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.19kx2qgrrty8.png"
                     
                ></p>
<h1 id="付费比率"><a href="#付费比率" class="headerlink" title="付费比率"></a>付费比率</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select count(DISTINCT user_id) as APA ,</span><br><span class="line">(SELECT count(DISTINCT user_id) from tap_fun_test WHERE avg_online_minutes&gt;=15) as AU ,</span><br><span class="line">count(DISTINCT user_id)/(select count(DISTINCT user_id) from tap_fun_test </span><br><span class="line">where avg_online_minutes&gt;=15) as PUR</span><br><span class="line">from tap_fun_test </span><br><span class="line">where avg_online_minutes&gt;=15 and pay_price &gt;0;</span><br></pre></td></tr></table></figure>
<h5 id="APA：17005；AU：100649；活跃玩家的付费率PUR：0-169，全部玩家的付费比率：0-021"><a href="#APA：17005；AU：100649；活跃玩家的付费率PUR：0-169，全部玩家的付费比率：0-021" class="headerlink" title="APA：17005；AU：100649；活跃玩家的付费率PUR：0.169，全部玩家的付费比率：0.021"></a>APA：17005；AU：100649；活跃玩家的付费率PUR：0.169，全部玩家的付费比率：0.021</h5><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.7esl7b48tf28.png"
                     
                ></p>
<p>该游戏的PUR（人均付费率）为0.169较低，且ARPU（活跃玩家平均消费额）为5.58，说明收入表现差；相对于ARPPU，活跃付费用户消费很高，是ARPU的6倍左右，针对这点我们可以做首次消费门槛和专属大V玩家的福利与活动进行调整与优化。</p>
<h1 id="六、玩家游戏习惯分析"><a href="#六、玩家游戏习惯分析" class="headerlink" title="六、玩家游戏习惯分析"></a>六、玩家游戏习惯分析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select AVG(pvp_battle_count) as 平均PVP次数 ,</span><br><span class="line">sum(pvp_lanch_count)/sum(pvp_battle_count) as 主动发起PVP概率,</span><br><span class="line">sum(pvp_win_count)/sum(pvp_battle_count) as PVP获胜概率</span><br><span class="line">from tap_fun_test</span><br><span class="line">where avg_online_minutes&gt;=15;</span><br><span class="line">PVP活跃玩家</span><br><span class="line">平均PVP次数：15.164651412333953；主动发起PVP概率：0.5688357584679884；PVP获胜概率：0.532222547626395</span><br><span class="line">PVP活跃付费玩家(加一个pay_price&gt;0)</span><br><span class="line">平均PVP次数：27.301911202587473；主动发起PVP概率：0.6553937480210826；PVP获胜概率：0.6872459716242092</span><br></pre></td></tr></table></figure>

<p>PVE活跃玩家<br>平均PVE次数：28；主动发起PVE概率：0.9967；PVE获胜概率：0.9041<br>PVE活跃付费玩家<br>平均PVE次数：52；主动发起PVE概率：0.9957；PVE获胜概率：0.9110</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.qcf66hymhfk.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.5z2txq9ht3wg.png"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6ycbt2l7v340.png"
                     
                ></p>
<p>APA（付费活跃用户）玩家的平均PVE和PVP次数都是AU（活跃）玩家次数的两倍左右，显然APA玩家是重要的发展对象。<br>PVP活动中，APA玩家主动发起和胜利的概率都明显高于AU玩家。<br>PVE活动中，APA玩家主动发起和胜利的概率与AU玩家都基本持平，其中主动发起PVE的概率非常高，且二者的PVE胜率高达90%，游戏体验较好。</p>
]]></content>
      <tags>
        <tag>数据分析实战</tag>
      </tags>
  </entry>
  <entry>
    <title>sql数据分析：自动化报表，多场景更新</title>
    <url>/2021/08/06/sql%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%A5%E8%A1%A8%EF%BC%8C%E5%A4%9A%E5%9C%BA%E6%99%AF%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `cd_20210414` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `platform` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT &#x27;&#x27; COMMENT &#x27;平台&#x27;,</span><br><span class="line">  `platform_id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT &#x27;0&#x27; COMMENT &#x27;平台id 即storeid&#x27;,</span><br><span class="line">  `product_id` varchar(255) CHARACTER SET utf8mb4 DEFAULT &#x27;0&#x27; COMMENT &#x27;商品id&#x27;,</span><br><span class="line">  `barcode` varchar(50) CHARACTER SET utf8mb4 DEFAULT &#x27;0&#x27; COMMENT &#x27;商品upc编码&#x27;,	</span><br><span class="line">  `sort_id` int(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;商品排序&#x27;,</span><br><span class="line">  `title` varchar(255) COLLATE utf8mb4_general_ci DEFAULT &#x27;&#x27; COMMENT &#x27;商品名称&#x27;,</span><br><span class="line">  `promotion_price` float(10,2)  DEFAULT null COMMENT &#x27;促销价&#x27;,</span><br><span class="line">  `full_price`  float(10,2)  DEFAULT null COMMENT &#x27;商品原价&#x27;,</span><br><span class="line">  `product_month_sale` varchar(10) DEFAULT null COMMENT &#x27;月销&#x27;,</span><br><span class="line">  `promotion` varchar(255)  CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci COMMENT &#x27;促销活动&#x27;,</span><br><span class="line">  `image_url` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,</span><br><span class="line">  `catname1` varchar(50) CHARACTER SET utf8mb4 DEFAULT &#x27; &#x27;,</span><br><span class="line">`brand` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#x27;品牌&#x27;,</span><br><span class="line">  `time` datetime DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `a` (`platform`,`platform_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>
<h3 id="新增标签列，加索引"><a href="#新增标签列，加索引" class="headerlink" title="新增标签列，加索引"></a>新增标签列，加索引</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table cd_20210414 add COLUMN crawler_id VARCHAR(30);</span><br><span class="line">alter table cd_20210414 add COLUMN detail_full_price float(12,2);</span><br><span class="line">alter table cd_20210414 add index a(sku);</span><br><span class="line">alter table cd_20210414 add index b(platform,platform_id);</span><br></pre></td></tr></table></figure>
<h3 id="查询当月日期及对应上月日期"><a href="#查询当月日期及对应上月日期" class="headerlink" title="查询当月日期及对应上月日期"></a>查询当月日期及对应上月日期</h3><p>mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#当月日期</span><br><span class="line">select DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY),interval -day(DATE_SUB(CURDATE(),INTERVAL 1 DAY))+1 day),</span><br><span class="line">DATE_SUB(CURDATE(),INTERVAL 1 DAY);</span><br><span class="line">#对应上月日期</span><br><span class="line">select DATE_SUB(DATE_ADD(DATE_SUB(CURDATE(),INTERVAL 1 DAY),interval -day(DATE_SUB(CURDATE(),INTERVAL 1 DAY))+1 day),INTERVAL 1 MONTH),</span><br><span class="line">DATE_SUB(DATE_SUB(CURDATE(),INTERVAL 1 DAY),INTERVAL 1 MONTH);</span><br></pre></td></tr></table></figure>

<p>hive</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#昨天</span><br><span class="line">select date_format(date_sub(current_date(),1), &#x27;yyyyMMdd&#x27;);</span><br><span class="line">#当月月初</span><br><span class="line">select concat(from_unixtime(unix_timestamp(), &#x27;yyyyMM&#x27;),&#x27;01&#x27;);</span><br><span class="line">#上月同期</span><br><span class="line">select date_format(add_months(from_unixtime(unix_timestamp(), &#x27;yyyy-MM-dd&#x27;),-1),&#x27;yyyyMMdd&#x27;);</span><br><span class="line">#昨天环比上月同期</span><br><span class="line">select date_format(date_sub(add_months(from_unixtime(unix_timestamp(), &#x27;yyyy-MM-dd&#x27;),-1),1),&#x27;yyyyMMdd&#x27;);</span><br><span class="line">#上月月初</span><br><span class="line">select concat(date_format(add_months(from_unixtime(unix_timestamp(), &#x27;yyyy-MM-dd&#x27;),-1),&#x27;yyyyMM&#x27;),&#x27;01&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="每个部门薪水最高的员工-包含部门名称"><a href="#每个部门薪水最高的员工-包含部门名称" class="headerlink" title="每个部门薪水最高的员工(包含部门名称)"></a>每个部门薪水最高的员工(包含部门名称)</h3><ul>
<li>员工表和部门表进行连接，对部门id进行组内分组根据薪资降序排序，这里使用rank()并列也算</li>
<li>筛选排序序号为1的部门，并查询员工薪资</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * </span><br><span class="line">from </span><br><span class="line">    (SELECT </span><br><span class="line">    employee_id</span><br><span class="line">    ,first_name</span><br><span class="line">    ,e.department_id</span><br><span class="line">    ,department_name</span><br><span class="line">    ,salary </span><br><span class="line">    ,rank() over(partition by department_id order by salary desc) as salary_rank </span><br><span class="line">    FROM `employees` e </span><br><span class="line">    inner join </span><br><span class="line">    `departments` d </span><br><span class="line">    on e.department_id = d.department_id</span><br><span class="line">    ) a </span><br><span class="line">where a.salary_rank=1;</span><br></pre></td></tr></table></figure>
<h3 id="众数、平均数、中位数"><a href="#众数、平均数、中位数" class="headerlink" title="众数、平均数、中位数"></a>众数、平均数、中位数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 求员工工资的众数</span><br><span class="line"></span><br><span class="line">SELECT salary,count(1) AS cnt</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY salary</span><br><span class="line">HAVING count(*) &gt;= ALL(SELECT COUNT(*) FROM employees GROUP BY salary)</span><br><span class="line"></span><br><span class="line">-- 求员工工资的平均数</span><br><span class="line">select AVG(salary) from employees</span><br><span class="line"></span><br><span class="line">select sum(salary)/count(0) as avg_salary </span><br><span class="line">from employees </span><br><span class="line"></span><br><span class="line">-- 求员工工资的中位数</span><br><span class="line">-- 中位数定义：将数从小到大排列，若总数为奇数，取中间位置的数值。若总数为偶数，取中间位置两个数的平均值</span><br><span class="line"></span><br><span class="line">select avg(emp_salary)</span><br><span class="line">from</span><br><span class="line">(#排位次</span><br><span class="line">select salary,</span><br><span class="line"> row_number() over(order by salary) as rn,</span><br><span class="line">count(*) over() as n</span><br><span class="line">from employees</span><br><span class="line">) t </span><br><span class="line">where rn in (floor(n/2)+1,if(mod(n,2) = 0,floor(n/2),floor(n/2)+1))</span><br></pre></td></tr></table></figure>

<h3 id="上、下四分位数"><a href="#上、下四分位数" class="headerlink" title="上、下四分位数"></a>上、下四分位数</h3><ul>
<li>全部玩家人数的中位数、上下四分位数</li>
<li>再根据人数总量细拆 排序好的玩家在线时长表</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select round(count(distinct user_id)/4) as 下四分位数,</span><br><span class="line">round(count(distinct user_id)/2) as 中位数,</span><br><span class="line">round(count(distinct user_id)/4*3) as 上四分位数</span><br><span class="line">from tap_fun_test;</span><br><span class="line">下四分位数：207234 中位数：414467 上四分位数：621701</span><br><span class="line">SELECT min(avg_online_minutes) 最小值,</span><br><span class="line">(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 207233,1) as 下四分位数,</span><br><span class="line">(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 414466,1) as 中位数,</span><br><span class="line">(select avg_online_minutes from tap_fun_test ORDER BY avg_online_minutes LIMIT 621700,1) as 上四分位数,</span><br><span class="line">max( avg_online_minutes) 最大值</span><br><span class="line">FROM `tap_fun_test`	</span><br><span class="line">最小值0.0,下四分位数:0.5,中位数:1.666667，上四分位数：5，最大值：1605.833333</span><br></pre></td></tr></table></figure>



<h3 id="截至当前，每个用户已经连续签到的天数"><a href="#截至当前，每个用户已经连续签到的天数" class="headerlink" title="截至当前，每个用户已经连续签到的天数"></a>截至当前，每个用户已经连续签到的天数</h3><ul>
<li>查出最后一次不登录的日期（即未登录时间的最大值）</li>
<li>与当前日期进行比较，二者差值为几就是连续登录几天</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">user_id ,</span><br><span class="line">max(date),</span><br><span class="line">DATEDIFF(&#x27;2021-02-19&#x27;,max(date)) as max_con_days </span><br><span class="line">from user_attendence </span><br><span class="line">where is_sign = 0 </span><br><span class="line">group by user_id;</span><br></pre></td></tr></table></figure>
<h3 id="计算有史以来用户最大连续签到天数；"><a href="#计算有史以来用户最大连续签到天数；" class="headerlink" title="计算有史以来用户最大连续签到天数；"></a>计算有史以来用户最大连续签到天数；</h3><ul>
<li>对用户分组，按日期进行row_number()over()排序，排序序号为rank;（一个用户一天只能签到一次）</li>
<li>如果日期与序号的差值为相等，按这个差值进行分组并计数，取最大值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">user_id </span><br><span class="line">,max(次数)from </span><br><span class="line">    (select user_id </span><br><span class="line">    ,subdate(a.`date`,a.rn) diff </span><br><span class="line">    ,count(*) 次数</span><br><span class="line">    from </span><br><span class="line">        (select </span><br><span class="line">        user_id </span><br><span class="line">        ,date,</span><br><span class="line">        row_number() over(partition by user_id order by date asc) rn</span><br><span class="line">        from user_attendence  </span><br><span class="line">        where is_sign = 1</span><br><span class="line">        ) a </span><br><span class="line">    group by user_id,diff</span><br><span class="line">    ) b </span><br><span class="line">group by user_id;</span><br></pre></td></tr></table></figure>
<h3 id="用户最大连续购买天数及次数"><a href="#用户最大连续购买天数及次数" class="headerlink" title="用户最大连续购买天数及次数"></a>用户最大连续购买天数及次数</h3><p>最里面子查询先对日期进行聚合，将购买次数求和，然后类比连续签到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">user_id </span><br><span class="line">,max(count_days) `天数`</span><br><span class="line">,sum(sum_user_counts) `次数`</span><br><span class="line">from </span><br><span class="line">    (select user_id </span><br><span class="line">    ,subdate(a.`date`,a.rn) diff </span><br><span class="line">    ,count(*) count_days</span><br><span class="line">		,sum(user_counts) sum_user_counts</span><br><span class="line">    from </span><br><span class="line">        (select </span><br><span class="line">        user_id </span><br><span class="line">        ,`date`</span><br><span class="line">        ,row_number() over(partition by user_id order by `date` asc) rn</span><br><span class="line">				,user_counts</span><br><span class="line">        from (</span><br><span class="line">				select user_id,DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;) `date`,count(`month`) user_counts </span><br><span class="line">				from cd_now </span><br><span class="line">				group by user_id,DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;)</span><br><span class="line">				) m </span><br><span class="line">        ) a </span><br><span class="line">    group by user_id,diff</span><br><span class="line">    ) b </span><br><span class="line">group by user_id;</span><br></pre></td></tr></table></figure>



<h3 id="某一天以及近七天新增用户数"><a href="#某一天以及近七天新增用户数" class="headerlink" title="某一天以及近七天新增用户数"></a>某一天以及近七天新增用户数</h3><ul>
<li>指定当前日期为1998-02-10，使用date_sub确定前七天日期</li>
<li>使用if判定用户是否当日注册，DISTINCT进行去重</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set @date_day = &quot;1998-02-10&quot;;</span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">count(DISTINCT if(DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;)=@date_day,user_id,null)) as new_id</span><br><span class="line">,count(DISTINCT user_id) as user_7</span><br><span class="line">,count(DISTINCT user_id)/7 as avg7_id</span><br><span class="line">from </span><br><span class="line">cd_now </span><br><span class="line">where </span><br><span class="line">DATE_FORMAT(pur_dt,&quot;%Y-%m-%d&quot;) between DATE_SUB(@date_day,INTERVAL 7 day) and @date_day</span><br></pre></td></tr></table></figure>
<h3 id="支付金额在前-20-的用户"><a href="#支付金额在前-20-的用户" class="headerlink" title="支付金额在前 20%的用户"></a>支付金额在前 20%的用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 问题：求支付金额在前 20%的用户</span><br><span class="line">select </span><br><span class="line">a.user_name </span><br><span class="line">,a.sum_amount </span><br><span class="line">from </span><br><span class="line">(select </span><br><span class="line">user_name </span><br><span class="line">,sum(pay_amount) sum_amount </span><br><span class="line">,ntile(5) over(order by sum(pay_amount) desc) sum_amount_rank </span><br><span class="line">-- ,sum(pay_amount) over(order by user_name) cumsum</span><br><span class="line">-- ,round(sum(pay_amount) over(order by user_name)/sum(pay_amount) over(),4) cumsum_rate</span><br><span class="line">from user_sales_table </span><br><span class="line">group by user_name ) a </span><br><span class="line">where a.sum_amount_rank = 1 </span><br></pre></td></tr></table></figure>
<h3 id="每月最受欢迎的前三名"><a href="#每月最受欢迎的前三名" class="headerlink" title="每月最受欢迎的前三名"></a>每月最受欢迎的前三名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">*</span><br><span class="line">from </span><br><span class="line">	(select </span><br><span class="line">	a.品牌</span><br><span class="line">	,a.mon</span><br><span class="line">	,a.num</span><br><span class="line">	,row_number()over(PARTITION by a.mon order by a.num desc) as num_rank	</span><br><span class="line">	from  </span><br><span class="line">		(SELECT </span><br><span class="line">		*</span><br><span class="line">		,date_format(日期,&quot;%Y-%m-01&quot;) mon</span><br><span class="line">		,count(orser_id) num</span><br><span class="line">		FROM `alcohol`</span><br><span class="line">		group by </span><br><span class="line">		date_format(日期,&quot;%Y-%m-01&quot;) ,品牌) a</span><br><span class="line">	) b</span><br><span class="line">where b.num_rank&lt;4 </span><br><span class="line">order by b.mon asc </span><br></pre></td></tr></table></figure>
<h3 id="用户留存"><a href="#用户留存" class="headerlink" title="用户留存"></a>用户留存</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">(case when t3.day_value=1 then &quot;次日留存&quot;</span><br><span class="line">when t3.day_value = 3 then &quot;三日留存&quot;</span><br><span class="line">when t3.day_value = 7 then &quot;七日留存&quot;</span><br><span class="line">else &quot;其他&quot;</span><br><span class="line">end</span><br><span class="line">) as type</span><br><span class="line">,count(t3.user_id) &quot;用户个数&quot;</span><br><span class="line">from </span><br><span class="line">	(select </span><br><span class="line">	t1.user_id</span><br><span class="line">	,t1.first_time</span><br><span class="line">	,t2.last_time</span><br><span class="line">	,datediff(t2.last_time,t1.first_time) day_value</span><br><span class="line">	from</span><br><span class="line">		(select </span><br><span class="line">		user_id</span><br><span class="line">		,date(min(pur_dt)) first_time</span><br><span class="line">		from cd_now </span><br><span class="line">		group by </span><br><span class="line">		user_id) t1</span><br><span class="line">		left join </span><br><span class="line">		(select </span><br><span class="line">		user_id</span><br><span class="line">		,date(max(pur_dt)) last_time</span><br><span class="line">		from cd_now</span><br><span class="line">		group by </span><br><span class="line">		user_id</span><br><span class="line">		) t2</span><br><span class="line">	on t1.user_id=t2.user_id</span><br><span class="line">	) t3</span><br><span class="line">group by </span><br><span class="line">(case when t3.day_value=1 then &quot;次日留存&quot;</span><br><span class="line">when t3.day_value = 3 then &quot;三日留存&quot;</span><br><span class="line">when t3.day_value = 7 then &quot;七日留存&quot;</span><br><span class="line">else &quot;其他&quot;</span><br><span class="line">end</span><br><span class="line">) </span><br></pre></td></tr></table></figure>
<h3 id="新老客-amp-复购"><a href="#新老客-amp-复购" class="headerlink" title="新老客&amp;复购"></a>新老客&amp;复购</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with temp1 as ( # 1、找出每个用户第一次下单的时间和年月</span><br><span class="line">select user_id,min(pur_dt),date_format(min(pur_dt),&#x27;%Y-%m&#x27;) `年月`</span><br><span class="line">from cd_now </span><br><span class="line">group by user_id </span><br><span class="line">),</span><br><span class="line"> temp2 as(# 2、找出每月的新客户数目 </span><br><span class="line">select user_id,`年月`,count(user_id) as `新客户数` </span><br><span class="line">from </span><br><span class="line"> temp1 </span><br><span class="line">group by `年月` </span><br><span class="line"> ),</span><br><span class="line"> temp3 as( # 3.1、找出当月有复购的新客户数目，第一步找出用户在第一次下单的那个月的购买次数</span><br><span class="line">select n.user_id,count(n.order_id) as `次数`,`年月` </span><br><span class="line">from cd_now n </span><br><span class="line"> inner join temp1 </span><br><span class="line">on n.user_id = temp1.user_id and temp1.`年月` = date_format(pur_dt,&quot;%Y-%m&quot;)</span><br><span class="line">group by temp1.user_id</span><br><span class="line"> ),</span><br><span class="line"> temp4 as ( # 3.2、找出当月有复购的新客户数目,第二步是将有复购的新客筛选出来（购买次数&gt;=2）</span><br><span class="line">select `年月`,temp3.user_id,count(temp3.user_id) as `有复购的新客户数目`</span><br><span class="line">from temp3 </span><br><span class="line">where `次数`&gt;=2</span><br><span class="line">group by temp3.`年月`</span><br><span class="line"> ),</span><br><span class="line"> temp5 as ( # 计算复购率</span><br><span class="line">select temp2.`年月`,temp2.`新客户数`,ifnull(temp4.`有复购的新客户数目`,0) `老客户数`,</span><br><span class="line"> ifnull(temp4.`有复购的新客户数目`/temp2.`新客户数`,0) `复购率`</span><br><span class="line"> from temp2</span><br><span class="line"> left join temp4</span><br><span class="line">on temp2.`年月` = temp4.`年月`</span><br><span class="line"> ) select * from temp5</span><br></pre></td></tr></table></figure>
<h3 id="rfm模型"><a href="#rfm模型" class="headerlink" title="rfm模型"></a>rfm模型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 用户id,下单次数,最近下单时间,顾客实付,下单间隔,实付客单,rfm类型,</span><br><span class="line">select </span><br><span class="line">a.user_id</span><br><span class="line">,a.`下单次数`</span><br><span class="line">,a.`最近下单时间`</span><br><span class="line">,a.`顾客实付`</span><br><span class="line">,a.`下单间隔`</span><br><span class="line">,a.`实付客单`</span><br><span class="line">,case </span><br><span class="line">when a.`下单间隔` &gt; 45 and a.`下单次数` &lt;= 1 and a.`实付客单` &lt;=50 then &#x27;111&#x27; </span><br><span class="line">when a.`下单间隔` &gt; 45 and a.`下单次数` &lt;= 1 and a.`实付客单` &gt;50 then &#x27;112&#x27; </span><br><span class="line">when a.`下单间隔` &gt; 45 and a.`下单次数` &gt; 1 and a.`实付客单` &lt;=50 then &#x27;121&#x27; </span><br><span class="line">when a.`下单间隔` &lt;= 45 and a.`下单次数` &lt;= 1 and a.`实付客单` &lt;=50 then &#x27;211&#x27; </span><br><span class="line">when a.`下单间隔` &lt;= 45 and a.`下单次数` &gt; 1 and a.`实付客单` &lt;=50 then &#x27;221&#x27; </span><br><span class="line">when a.`下单间隔` &lt;= 45 and a.`下单次数` &lt;= 1 and a.`实付客单` &gt; 50 then &#x27;212&#x27; </span><br><span class="line">when a.`下单间隔` &lt;= 45 and a.`下单次数` &gt; 1 and a.`实付客单` &gt; 50 then &#x27;222&#x27; </span><br><span class="line">when a.`下单间隔` &gt; 45 and a.`下单次数` &gt; 1 and a.`实付客单` &gt; 50 then &#x27;122&#x27; </span><br><span class="line">end as &#x27;rfm_type&#x27;</span><br><span class="line">from </span><br><span class="line">(select </span><br><span class="line">user_id </span><br><span class="line">,count(pur_dt) `下单次数`</span><br><span class="line">,date_format(max(pur_dt),&quot;%Y-%m-%d&quot;) `最近下单时间`</span><br><span class="line">,sum(pur_amount) `顾客实付`</span><br><span class="line">,datediff(&quot;1998-03-31&quot;,date_format(max(pur_dt),&quot;%Y-%m-%d&quot;)) `下单间隔`</span><br><span class="line">,avg(pur_amount) as `实付客单`</span><br><span class="line">from supermanzwg.cd_now </span><br><span class="line">where date_format(month,&quot;%Y-%m-%d&quot;) between &quot;1998-01-01&quot; and &quot;1998-03-01&quot;</span><br><span class="line">group by </span><br><span class="line">user_id ) a ;</span><br></pre></td></tr></table></figure>

<h3 id="用户行为"><a href="#用户行为" class="headerlink" title="用户行为"></a>用户行为</h3><ul>
<li>有订单事务表、收藏事务表,要求：请用一句SQL取出所有用户对商品的行为特征，特征分为已购买、</li>
<li>购买未收藏、收藏未购买、收藏且购买<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 数据准备</span><br><span class="line">create table redbk_orders(</span><br><span class="line"> `id` int(5),</span><br><span class="line"> `user_id` varchar(10),</span><br><span class="line"> `item_id` int(5),</span><br><span class="line"> `par_time` varchar(30),</span><br><span class="line"> `item_num` int(5)</span><br><span class="line">);</span><br><span class="line">insert into redbk_orders values(1,&#x27;001&#x27;,&#x27;201&#x27;,&#x27;2018-08-31 00:00:01&#x27;,1);</span><br><span class="line">insert into redbk_orders values(2,&#x27;002&#x27;,&#x27;203&#x27;,&#x27;2018-09-02 12:00:02&#x27;,2);</span><br><span class="line">insert into redbk_orders values(3,&#x27;003&#x27;,&#x27;203&#x27;,&#x27;2018-09-01 00:00:01&#x27;,1);</span><br><span class="line">insert into redbk_orders values(4,&#x27;003&#x27;,&#x27;203&#x27;,&#x27;2018-09-04 09:10:30&#x27;,1);</span><br><span class="line">create table redbk_favorites(</span><br><span class="line"> `id` int(5),</span><br><span class="line"> `user_id` varchar(10),</span><br><span class="line"> `item_id` INT(5),</span><br><span class="line"> `fav_time` varchar(30)</span><br><span class="line">);</span><br><span class="line">insert into redbk_favorites values(1,&#x27;001&#x27;,201,&#x27;2018-08-31 00:00:01&#x27;);</span><br><span class="line">insert into redbk_favorites values(2,&#x27;002&#x27;,202,&#x27;2018-09-02 12:00:02&#x27;);</span><br><span class="line">insert into redbk_favorites values(3,&#x27;003&#x27;,204,&#x27;2018-09-01 00:00:01&#x27;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">o.user_id </span><br><span class="line">,o.item_id </span><br><span class="line">,1 as &quot;已购买&quot; </span><br><span class="line">,case when f.item_id is null then 1 else 0 end as &quot;购买未收藏&quot;</span><br><span class="line">,0 as &quot;收藏未购买&quot; </span><br><span class="line">,case when f.item_id is not null then 1 else 0 end as &quot;收藏且购买&quot;</span><br><span class="line">from myemployees.redbk_orders o </span><br><span class="line">left join myemployees.redbk_favorites f </span><br><span class="line">on o.user_id = f.user_id and o.item_id = f.item_id </span><br><span class="line">where o.user_id is not null </span><br><span class="line">union </span><br><span class="line">select </span><br><span class="line">o.user_id </span><br><span class="line">,o.item_id </span><br><span class="line">,case when o.item_id is not null then 1 else 0 end as &quot;已购买&quot; </span><br><span class="line">,0 as &quot;购买未收藏&quot;</span><br><span class="line">,case when o.item_id is null then 1 else 0 end as &quot;收藏未购买&quot; </span><br><span class="line">,case when o.item_id is not null then 1 else 0 end as &quot;收藏且购买&quot;</span><br><span class="line">from myemployees.redbk_favorites f </span><br><span class="line">left join myemployees.redbk_orders o </span><br><span class="line">on o.user_id = f.user_id and o.item_id = f.item_id</span><br><span class="line">where o.user_id is not null;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="贡献度-累计求和"><a href="#贡献度-累计求和" class="headerlink" title="贡献度-累计求和"></a>贡献度-累计求和</h3><ul>
<li>计算各个用户的消费金额综合</li>
<li>对用户消费金额进行累加，并计算累计占比，就是贡献度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">t.*</span><br><span class="line">from</span><br><span class="line">	(select </span><br><span class="line">	user_id </span><br><span class="line">	,round(amount,2) amount</span><br><span class="line">	,round(sum(amount)over(order by amount desc) ,2) cum_amount</span><br><span class="line">	,round(sum(amount)over(order by amount desc)/(select sum(pur_amount) from cd_now),4) as cum_rate</span><br><span class="line">	from </span><br><span class="line">		(select </span><br><span class="line">		user_id </span><br><span class="line">		,sum(pur_amount) amount</span><br><span class="line">		from </span><br><span class="line">		cd_now </span><br><span class="line">		where pur_amount &gt;0</span><br><span class="line">		group by </span><br><span class="line">		user_id ) user_table</span><br><span class="line">	) t</span><br><span class="line">where t.cum_rate&lt;0.8</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="电商类"><a href="#电商类" class="headerlink" title="电商类"></a>电商类</h3><ul>
<li><p>商品活动流水表，表名为event，字段：goods_id， time；</p>
</li>
<li><p>求参加活动次数最多的商品的最近一次参加活动的时间</p>
</li>
</ul>
<p>数据准备：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建 event 表</span><br><span class="line">CREATE TABLE `event` (</span><br><span class="line"> `goods_id` varchar(255),</span><br><span class="line"> `time` varchar(255)</span><br><span class="line"> );</span><br><span class="line">#插入数据</span><br><span class="line">INSERT INTO `event` VALUES (&#x27;可口可乐&#x27;, &#x27;2021-02-22&#x27;);</span><br><span class="line">INSERT INTO `event` VALUES (&#x27;雪碧&#x27;, &#x27;2021-03-01&#x27;);</span><br><span class="line">INSERT INTO `event` VALUES (&#x27;可口可乐&#x27;, &#x27;2021-03-04&#x27;);</span><br><span class="line">INSERT INTO `event` VALUES (&#x27;东鹏特饮&#x27;, &#x27;2021-03-06&#x27;);</span><br><span class="line">INSERT INTO `event` VALUES (&#x27;雪碧&#x27;, &#x27;2021-03-07&#x27;);</span><br><span class="line">INSERT INTO `event` VALUES (&#x27;红牛&#x27;, &#x27;2021-03-07&#x27;);</span><br><span class="line">INSERT INTO `event` VALUES (&#x27;东鹏特饮&#x27;, &#x27;2021-03-08&#x27;);</span><br><span class="line">INSERT INTO `event` VALUES (&#x27;雪碧&#x27;, &#x27;2021-03-08&#x27;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 求参加活动次数最多的商品的最近一次参加活动的时间</span><br><span class="line">-- 统计每种商品参加活动的次数，以及最近一次参与活动的时间</span><br><span class="line">select </span><br><span class="line">*</span><br><span class="line">from </span><br><span class="line">(select </span><br><span class="line">goods_id</span><br><span class="line">,count(*) goods_num</span><br><span class="line">,max(time) max_time</span><br><span class="line">from event </span><br><span class="line">group by goods_id) a </span><br><span class="line">order by goods_num desc limit 1</span><br></pre></td></tr></table></figure>

<ul>
<li>新老客 <code>trans</code>和<code>profile</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 请计算每一类客户在2019年每月产生的销售(即购买金额大于0，及发生购买的人数(客户类型分为:新客，老客；新客:2019年产生第一次购买；老客:2019年之前已经购买过)</span><br><span class="line">-- 先分清新老客,在分类统计</span><br><span class="line">select </span><br><span class="line">month(purchase_date) `月份`</span><br><span class="line">,customer_type  </span><br><span class="line">,sum(Quantity*Unit_price) `金额`</span><br><span class="line">,count(*)</span><br><span class="line">from </span><br><span class="line">(select </span><br><span class="line">t.*</span><br><span class="line">,case when year(p.FIRST_PUR_DATE)=2019 then &#x27;新客&#x27; else &#x27;老客&#x27; end as `customer_type`</span><br><span class="line">from `trans` t </span><br><span class="line">left join `profile` p</span><br><span class="line">on t.Customer_ID = p.Customer_ID</span><br><span class="line">where year(purchase_date)=2019) a</span><br><span class="line">group by month(purchase_date),customer_type;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 现要给2019年新客发送A、B小样，线上新客发放A小样，线下新客发放B小样，请编写程序抽取相应的名单</span><br><span class="line">-- 字段 COUNTERID : offline 线下，online 线上</span><br><span class="line">select </span><br><span class="line">*</span><br><span class="line">,case when COUNTER_ID like &#x27;online%&#x27; then &#x27;A&#x27; else &#x27;B&#x27; end as &#x27;demo_type&#x27;</span><br><span class="line">from </span><br><span class="line">(select </span><br><span class="line">t.*</span><br><span class="line">,case when year(p.FIRST_PUR_DATE)=2019 then &#x27;新客&#x27; else &#x27;老客&#x27; end as `customer_type`</span><br><span class="line">from `trans` t </span><br><span class="line">left join `profile` p</span><br><span class="line">on t.Customer_ID = p.Customer_ID</span><br><span class="line">where year(purchase_date)=2019) a</span><br><span class="line">where `customer_type`=&#x27;新客&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="相邻座位互换"><a href="#相邻座位互换" class="headerlink" title="相邻座位互换"></a>相邻座位互换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create TABLE </span><br><span class="line">`Seat` (</span><br><span class="line">	`id` VARCHAR(255),</span><br><span class="line">	`employee` VARCHAR(255)</span><br><span class="line">);</span><br><span class="line">insert INTO `Seat` VALUES (&#x27;1&#x27;, &#x27;Jack&#x27;);</span><br><span class="line">INSERT INTO `Seat` VALUES (&#x27;2&#x27;, &#x27;Scott&#x27;);</span><br><span class="line">INSERT INTO `Seat` VALUES (&#x27;3&#x27;, &#x27;Emery&#x27;);</span><br><span class="line">INSERT INTO `Seat` VALUES (&#x27;4&#x27;, &#x27;Green&#x27;);</span><br><span class="line">INSERT INTO `Seat` VALUES (&#x27;5&#x27;, &#x27;Linda&#x27;);</span><br><span class="line">INSERT INTO `Seat` VALUES (&#x27;6&#x27;, &#x27;Jane&#x27;);</span><br><span class="line"></span><br><span class="line">#查询每两个相邻的座位互换（可以看作是两两相邻奇数和偶数呼唤，奇数下移，偶数上移）</span><br><span class="line">select </span><br><span class="line">(case </span><br><span class="line">when mod(id,2)!=0 and id!=a.counts then id+1 </span><br><span class="line">when mod(id,2)!=0 and id=a.counts then id </span><br><span class="line">else id-1 end) as id </span><br><span class="line">,employee</span><br><span class="line">from </span><br><span class="line">`Seat`,(select count(*) counts from `Seat`) a</span><br><span class="line">order by id;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>sql数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>sql排名函数</title>
    <url>/2021/12/23/sql%E6%8E%92%E5%90%8D%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<ul>
<li><p>rank()排名是不连续的，出现同名的排序序号会相同(比较常规的排序)，存在并列，且序号会跳跃</p>
<p>适合求第一名，名次这类</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">employee_id</span><br><span class="line">,last_name</span><br><span class="line">,department_id</span><br><span class="line">,salary</span><br><span class="line">,rank() over(partition by department_id order by salary desc) </span><br><span class="line">from employees</span><br></pre></td></tr></table></figure>
<ul>
<li><p>row_number()排名是连续的,出现同名的序号仍然会连续，不存在并列和跳跃</p>
<p>适合计算个数，位置，连续购买场景</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">employee_id </span><br><span class="line">,last_name </span><br><span class="line">,department_id </span><br><span class="line">,salary </span><br><span class="line">,row_number() over(partition by department_id order by salary desc) </span><br><span class="line">from employees </span><br></pre></td></tr></table></figure>
<ul>
<li><p>dense_rank()排名是连续的，出现同名的序号会相同，存在并列，且序号不会跳跃</p>
<p>（用的比较少的，单纯需要排名且存在并列也不跳跃）</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">employee_id </span><br><span class="line">,last_name </span><br><span class="line">,department_id </span><br><span class="line">,salary </span><br><span class="line">,dense_rank() over(partition by department_id order by salary desc) </span><br><span class="line">from employees </span><br></pre></td></tr></table></figure>
<p>– ntile()根据排序指定数量进行分区编号（分区编号排序）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">employee_id </span><br><span class="line">,last_name </span><br><span class="line">,department_id </span><br><span class="line">,salary </span><br><span class="line">,ntile(3) over(partition by department_id order by salary desc) </span><br><span class="line">from employees </span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>sql数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>大学三年，写给那个迟到的人</title>
    <url>/2018/11/19/%E5%A4%A7%E5%AD%A6%E4%B8%89%E5%B9%B4%EF%BC%8C%E5%86%99%E7%BB%99%E9%82%A3%E4%B8%AA%E8%BF%9F%E5%88%B0%E7%9A%84%E4%BA%BA/</url>
    <content><![CDATA[<p>亲爱的X姑娘：</p>
<p>你好！给你写这封信的时候，我正在学校的机电楼B301上第一节课。看了简书里好多给异性朋友写信的文章，我也心血来潮，忍不住想要和你说说话了。</p>
<p>—1—</p>
<p>早上醒的很早，在床上平躺到闹铃声响起，依旧照常的起床，洗漱，整理好出门。</p>
<p>没有胃口，不太想吃饭。但想到将来要在你面前呈现一个健康阳光的自己，还是买了一份豆浆和两个早餐包。</p>
<p>吃完走进教室，已经零零散散的坐满了一些人，我打开耳机里的纯音乐，想着舒缓下情绪，来迎接这节并不怎么让我心动的课程。</p>
<p>邻桌有一对情侣坐得很近，我看着老师走进教室，紧接着用余光一瞥到他们有说有笑的样子，顿时心生怅惘。</p>
<p>如果，我想说是如果，你在后面轻轻地拍一下我的肩膀，我回头看到一个嘴角微微上扬的弧度，那这节课我一定带着满满的能量。</p>
<p>或者，你就只是静静地坐在我的前面，我看着你，心生欢喜，脸上也应该会不自觉的泛起笑容……</p>
<p>有时候我会一个人坐在三个座位的中间，就好像潜意识里给你留了一个位置一样。</p>
<p>其实，一个人，一个座位，一支沙沙作响的笔，一个低下视线的背影。总是会显得孤零零的，在周围整齐的人群背景下，不免会有些格格不入…</p>
<p>—2—</p>
<p>你知道吗，我已经习惯了一个人走在去图书馆的路上，我听着音乐，看着一路沿途的风景，为了包裹住心中的孤独，我昂首挺胸，略显悠闲、惬意的走着。</p>
<p>但是，如果是你和我一起，我可能会满含笑意地和你谈天说地，像个孩子一样大大方方的走着…</p>
<p>又或是，你挽着我的手，不需要讲太多话，一起慢悠悠的走在石头小路上。就像《成都》里描绘的意境那样：”你会挽着我的衣袖，我会把手揣进裤兜……”</p>
<p>有一个秘密要告诉你，我会用吉他弹唱这首歌了，不知道在你面前的时候，我能不能饱含深情的唱出来带给你浪漫的感觉。</p>
<p>从图书馆出来，我们一起去食堂买饭，我会想先去你喜欢的窗口排队，你是想拿着书包去寻找空着的座位，还是想和我走在一起呢…</p>
<p>你知道吗，平时都是和舍友一起吃饭，聊的也都是各自的事情。但是如果是和你一起，我想不但胃口会大涨，我们还可以有更多的故事一起回忆…</p>
<p>吃完饭，我们坐在图书馆旁林荫小道的长凳上，听微风拂过耳边的声音，看那阳光沐浴下的一片绿林。</p>
<p>你慢慢地把头靠在我的臂弯，我低头捕捉你眸底似海一般的温柔…</p>
<p>我会想调皮地刮你的鼻子，你会闭上眼睛满意地笑吗，还是轻轻的戳我一下。</p>
<p>你知道吗，就这样一个简单的动作，也会让我的整个世界都开满了花。</p>
<p>—3—</p>
<p>﻿假期的时候你会去哪玩呢！是在宿舍刷刷剧，和朋友聊聊天，还是出去旅游，拍照，发朋友圈，或是和我一样会去商业街兼职呢！﻿</p>
<p>﻿我也会想着挣钱去买自己喜欢的东西呀，或是旅游去一个心驰神往的地方呢，又或者是，和我爱的人一起去吃顿火锅怎么样！oh！ that’s a good idea!﻿</p>
<p>﻿当然，有时候他也会把握不好分寸，甚至不愿意安排自己学习的时间，逃课去做一些他感兴趣的东西呢。﻿</p>
<p>﻿他觉得，要是有个心思细腻的你在身边的话，他们一起，一定能过着更有节奏、充实的生活！﻿</p>
<p>﻿节日的时候我们去看场电影吧！要是去的比较早，那就在休息区玩一个超级有趣的双人小游戏怎么样！你知道怎么玩吗，不会？那我教你好了…﻿</p>
<p>﻿我会宠爱地喂你爆米花，你会不会依偎在我的肩膀呢！不然的话我可能会把送到你嘴边的零食马上缩回到我嘴边哦！啊！你别生气，还是给你吃好了…</p>
<p>﻿你知道吗，从这个时候起，在他期待的未来里，全都将是你……</p>
<p>—4—</p>
<p>晚上你喜欢出去逛逛吗！下自习后我常常会去超市，即便只买那几样东西，我也会在里面多逛一小会儿，可能是因为那里有浓浓的生活气息吧。</p>
<p>愿在将来的某一天，我推着购物车，你牵着我的手，走在喧闹的商场。我悄悄把你喜欢的零食放进车里，你认真地挑着我爱吃的水果，然后我们拎着这简单而平凡的幸福，满载而归。</p>
<p>我还有个夜跑的小习惯，我也希望和你一起，趁着夜幕降临，去草坪上繁星点点的操场。戴上耳机，跟着音乐的节奏，在皎洁的月光下挥洒汗水。</p>
<p>一圈一圈的轮回，甩掉心中所有的不愉快，接着再去澡堂，冲去一天中纷乱的小情绪…</p>
<p>又或是，我带着吉他，你当我的专属观众，在柔软舒适的草坪席地而坐，弹唱那些为你学过的歌好不好呢！</p>
<p>你和我一起唱怎么样，可不能放过你那被天使吻过的嗓子，还有我可能会跑调哦，你会笑吗，还是大声一点，带回我跑偏的部分呢…</p>
<p>想到这个唯美的画面，也会让我感动的红了眼。</p>
<p>忙着为下一段人生做准备，好久都不去KTV了，好像也没有那种想在人前表现的冲动了，只希望现在的拼搏能为余生发掘出与众不凡的核心竞争力。</p>
<p>不知道你是不是也正处于人生的某一个风口浪尖呢，你是不是已经完成蜕变了呢，你憧憬的未来里有没有一个像我这样的人呢。</p>
<p>我相信，你肯定正走在和我相遇的路上呢。而我，也正在寻找着那一份懂你的资格呀。</p>
<p>﻿突然间，清晨的一缕阳光掠过窗帘的缝隙撞到我的手上，照在这些热烈而又抽象的文字上，我顿下笔来，多想能永远保存此刻心里正诞生的阵阵暖意…</p>
<p>他多么希望可以有一个人陪他看陌生城市里的每一个落日，他们一起去听喜欢的课程。一起规划未来，一起带着足够的知识，去闯荡这色彩斑斓的平凡世界。</p>
<p>——你东半球官方指定唯一的男朋友</p>
]]></content>
      <tags>
        <tag>成长，旧时光</tag>
      </tags>
  </entry>
  <entry>
    <title>至少你，存在过我的记忆</title>
    <url>/2018/10/19/%E8%87%B3%E5%B0%91%E4%BD%A0%EF%BC%8C%E5%AD%98%E5%9C%A8%E8%BF%87%E6%88%91%E7%9A%84%E8%AE%B0%E5%BF%86/</url>
    <content><![CDATA[<p>人海中错过的那个人，至少，在我失眠梦呓间，脑海里还是会依稀浮现出你的容颜。</p>
<p>贝蒂，我是里克。最近你的城市下雨了吗，我这里的温度有些难过，不知道你过得怎么样。</p>
<p>济南的天照旧那样调皮，就像世界末日里的那句歌词，Why dose the sun go on shining一样，一次又一次地挑战着我出门的勇气，还好我坐的地方阳光有所收敛，不然我炽热的内心暴露在烈日下，真不知道会发生什么化学反应。</p>
<p>家庭生活的原因，我很早就开始了一个人的生活，可能除了自己，没有谁能左右我的想法了。一个人无拘无束，一个人天马行空，一个人桀骜不驯，一个人胆怯如鼠。</p>
<p>周国平说，在多数场合，我不是觉得对方乏味，就是害怕对方觉得我乏味，我既不愿意忍受对方的乏味，又不愿意费劲使自己有趣，所以我选择独处，那就自己承受自己的乏味，不累及他人。我大概就是这样一种人吧，得意的时候手舞足蹈，逢场作戏，可稍不如意就黯然失色，冷若冰霜，你说乏味不乏味。</p>
<p>浮躁的生活中让人有太多无法控制的遐想，也许，我应该找到一个更好的娱乐方式，以至于不会在休息的时候，不由自主的沦陷。</p>
<p>每次听到廖俊涛的那首《谁》，特别想拿起吉他练琴，弹着弹着，就忘记了后天还要考试的束缚感。有时候真希望时间定格在这一刻，不用去想其他任何事情。</p>
<p>当然也好羡慕那些在架子鼓上不可一世的乐手们，想学习打鼓，一直追求这样的发泄方式，可是生活总归会有些小遗憾，习惯了时光静好，心情似乎一直都波澜不惊。</p>
<p>最近经历了一连串的考核，带着满满的用心，和一丁点慌张，完成着之前感觉惊天动地的事情。</p>
<p>前段时间帮驾校招生，拿到了辛苦换来的一点小回报。不过贝蒂，很多次的社会经验使我觉得，人们好像都不愿意看到别人变好的样子，他们尽可能与遭遇苦难的人找到共鸣，要么保持缄默，要么施以怜悯。当他们发现别人的好时，它们立刻感到毛骨悚然。</p>
<p>贝蒂，你说像我这样的人，会活成自己想要成为的样子吗，我要学习的东西在需要通过考试拿到的学分面前，已经搁浅了一阵时间。我想，过完这一阵，我会继续坚持。因为，在这场游戏中，并没有什么其他的角色供我选择。</p>
<p>当然我相信，这些很快就会过去的。时间总是这样无情地切割我们的生命，夜里想着心事，第二天的闹铃就响了；下几次雨，夏天也结束了；等反应过来的时候，那个穿着开裆裤在邻居家乱跑的小屁孩，都长这么大了。</p>
]]></content>
      <tags>
        <tag>成长，旧时光</tag>
      </tags>
  </entry>
  <entry>
    <title>sql查询连续签到天数</title>
    <url>/2021/12/20/sql%E6%9F%A5%E8%AF%A2%E8%BF%9E%E7%BB%AD%E7%AD%BE%E5%88%B0%E5%A4%A9%E6%95%B0/</url>
    <content><![CDATA[<p>先建表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table user_attendence(</span><br><span class="line">user_id bigint comment &#x27;用户名&#x27;, </span><br><span class="line">date TIMESTAMP comment &#x27;日期&#x27; ,</span><br><span class="line">is_sign bigint comment &#x27;是否登录，0为否，1为是&#x27;);</span><br><span class="line">-- delete from user_attendence;</span><br></pre></td></tr></table></figure>
<p>接下来用python自己导入随机数据,500个用户、时间2021-1-1~2021-5-5。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">import pandas as pd</span><br><span class="line">from sqlalchemy import create_engine</span><br><span class="line">import numpy as np</span><br><span class="line">df = pd.DataFrame()</span><br><span class="line">date = pd.date_range(&#x27;2021-1-1&#x27;,&#x27;2021-5-5&#x27;).strftime(&#x27;%Y-%m-%d&#x27;)</span><br><span class="line">df[&quot;user_id&quot;]=[i for i in np.arange(1,500)]*len(date)</span><br><span class="line">df[&#x27;date&#x27;] = [i for i in date]*len(np.arange(1,500))</span><br><span class="line">df[&quot;is_sign&quot;] = [np.random.choice([0,1]) for i in range(len(df))]</span><br><span class="line">df = df.sort_values(by=[&#x27;user_id&#x27;,&#x27;date&#x27;],na_position=&#x27;first&#x27;)</span><br><span class="line">#写入数据库</span><br><span class="line">con = &#x27;mysql+pymysql://root:3333@localhost:3306/supermanzwg?charset=utf8&#x27;</span><br><span class="line">#如果出现字符串编码错误记得在Navicat运行alter table 表名 convert to character set utf8mb4;</span><br><span class="line">df.to_sql(name=&#x27;user_attendence&#x27;,con=con,if_exists=&#x27;append&#x27;,index = False)</span><br></pre></td></tr></table></figure>
<p>#截至当前，每个用户已经连续签到的天数<br>查出最后一次不登录的日期，与当前日期进行比较，二者差值为几就是连续登录几天</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select max(date) from user_attendence;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">user_id ,</span><br><span class="line">max(date),</span><br><span class="line">DATEDIFF(&#x27;2021-02-19&#x27;,max(date)) as max_con_days</span><br><span class="line">from user_attendence </span><br><span class="line">where is_sign = 0 </span><br><span class="line">group by user_id;</span><br></pre></td></tr></table></figure>
<p>#计算有史以来用户最大连续签到天数；<br>对用户分组，按日期进行排序，排序序号为rank;<br>如果日期与序号的差值为相等，按这个差值进行分组并计数，取最大值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">user_id</span><br><span class="line">,max(次数)from </span><br><span class="line">	(select user_id</span><br><span class="line">	,date,rn</span><br><span class="line">	,a.date-a.rn diff</span><br><span class="line">	,count(*) 次数</span><br><span class="line">	from </span><br><span class="line">		(select </span><br><span class="line">		user_id</span><br><span class="line">		,date,</span><br><span class="line">		row_number() over(partition by user_id order by date asc) rn</span><br><span class="line">		from user_attendence  </span><br><span class="line">		where is_sign = 1</span><br><span class="line">		) a </span><br><span class="line">	group by user_id,diff</span><br><span class="line">	) b </span><br><span class="line">group by user_id;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>sql数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>大学里，最丧的时候</title>
    <url>/2018/10/18/%E5%A4%A7%E5%AD%A6%E9%87%8C%EF%BC%8C%E6%9C%80%E4%B8%A7%E7%9A%84%E6%97%B6%E5%80%99/</url>
    <content><![CDATA[<p>—1—</p>
<p>看到香港大学孙教授的一段话：</p>
<p>﻿﻿“大学，就应该是早起吃点早餐；跑跑步；专业课认真听；公共课看看自己喜欢的杂志；中午小睡一会儿；下午参加个社团活动或打打篮球；晚上陪着喜欢的人散散步；或去自习室安静地看看书……  社会不需要学霸，也不认什么学生会主席，更不希望看到学生放弃学业去创业。你只要能平稳完整地读完大学，寻找到自己所爱的人和兴趣，多去没有目的的看些能丰富自己思想的书，认识几个好的不成样子的朋友，锻炼或是塑造自己的身体，学精自己想要从事事业的专业知识…… 做到这些，平淡地度过大学这几年你就已经足够优秀了。 ”</p>
<p>可为什么今年大三的我，感觉这辈子算是完了。</p>
<p>—2—</p>
<p>大学，是一段没有烟火气的生活，是一个比毕业后舒服的状态。</p>
<p>调剂到一个一眼无缘的理科专业，而你做的最无力的抗拒，就是在课上看自己感兴趣的东西，在宿舍听歌，看电影，打游戏，一日三餐，南来北往。渐渐，这成了一个司空见惯的事情。失落的时候练下吉他，你也曾想活在音乐的小世界里无人问津…</p>
<p>每天坚持吃早饭，天气暖和会去操场跑步，中午很难睡着，晚上精力旺盛到连开玩笑都尤其认真，每一次赶作业都是一场和时间赛跑的特殊行动，当然你还可以在期末的时候完成一些感觉惊天动地的事情﻿…</p>
<p>你慢慢疏远书本理论里面的成就感，开始厌倦众口一词的最佳答案，逃避一次又一次选择中的唯唯诺诺，沉醉在自己对于儿时梦境的美好想往里…</p>
<p>你不是学霸也没进学生会，你总是庆幸地以为低分通过就是比那个挂了科的室友强，你甚至想着在学校待上四年然后发财，慢慢地，你变得不愿意参加带着利益性质炫耀嘲讽的社团活动，没有能力去美化人家的游戏体验…</p>
<p>这是一个记忆稍纵即逝的年纪，你读的那些感觉挺有意思的书，随着旋转的时间轴忘得所剩无几。你做了一些兼职，挣了一点小钱，在同学面前过得洋洋洒洒。你去过几个地方，认识了好少好少可以交心的人，每次吃饭想说心里话的时候，你总害怕别人抓住你的软肋而欲言又止。你还考了几个希望能给未来生活带来惊喜的证书……</p>
<p>做到这些，平淡的度过大学，你也很害怕平凡的你一无所成。﻿﻿</p>
<p>—3—</p>
<p>这是一个花里胡哨的时代，你可能永远都不会知道，那个在朋友圈里高大上的陌生人，在真实里，究竟是怎样的际遇。﻿﻿</p>
<p>你尽可能的在人前把自己装点得光鲜亮丽，绅士般的接受所有的缘行渐远。你变得害怕承诺，躲避爱情，却又不愿意享受孤独，独当一面…﻿﻿</p>
<p>你见识到的世界的确比父辈要大，可是对自我的认知却很浅。</p>
<p>你每天在爆炸的信息中学习各种道理，通过网络你知道了身边好多人赢，于是你变得更加不甘平凡，时而凝神聚气的笃定，时而云淡风轻的随意，在对比中渐渐迷失﻿…﻿﻿</p>
<p>﻿你感觉自己变成了一台机器，可以不对生活付诸任何情感，他能一直工作，只是会越来越慢。﻿﻿</p>
<p>如果现在有一个可以看到的决定，未来你会在世界的某一个角落，从事一份称心如意的职业，可能你就不会在错过一节专业课的时候坐立不安，更不会因为身边的人活的体面潇洒而心惊胆战了。﻿﻿</p>
<p>也许正是因为这种人生的不确定性，才愈加增大了人们对未来五彩缤纷的构想吧。﻿﻿</p>
<p>克莱顿在《你要如何衡量你的人生》中提到，人对自己一生的规划，无非是周密战略和意外机遇相结合的产物，关键是要走出去，并行动起来，直到你明白应该将自己的聪明才智，兴趣和重点放在哪里，再将应急战略转化为周密战略。</p>
<p>我希望你，在试图跳出规则之前，能做出关于自己本心的选择，愿你强大到能冲破社会的桎梏，以自己愿意的姿态生活下去。﻿﻿﻿</p>
]]></content>
      <tags>
        <tag>成长，旧时光</tag>
      </tags>
  </entry>
  <entry>
    <title>我们这样的人，谈爱都太奢侈</title>
    <url>/2020/09/24/%E6%88%91%E4%BB%AC%E8%BF%99%E6%A0%B7%E7%9A%84%E4%BA%BA%EF%BC%8C%E8%B0%88%E7%88%B1%E9%83%BD%E5%A4%AA%E5%A5%A2%E4%BE%88/</url>
    <content><![CDATA[<p>爱是人类的本能，可是成年人的世界里，所谓的真心，更多的换来的却是失落与沮丧，渐渐的他们学会了伪装与克制，变得沉默且凉薄。前几天和朋友闲聊，突然听到现如今找女朋友就像找大熊猫一样，哈哈哈，还是大学的时候投资好啊，现在估计早都不担心了。</p>
<p>房子带来的安稳，汽车带来的便捷，手机平板带来的时尚，不早不晚的都让九零后赶上了，他们也许是物质体验最丰富的一代人，但同时也会是对物质需求最挑剔的一代人。同学不满领导安排毅然辞去了干了不满五个月的工作；朋友上次分手后，突然告诉我决定今年国庆结婚，和一个认识半年左右的女孩；从小一起长大的兄弟在犹豫该不该留在大城市发展，毕竟对于房价有时候也会低声苦笑。</p>
<p>雷军先生说过：“现在的物质已经很丰富了，现在的年轻人面对的可能更多的是精神上的痛苦”。人口比例失衡带来的红利，就像是资本家看上的蓝海市场，在物质与精神的两相施压下，猫猫狗狗都成了家居必备物种。谁能想到许多年后的今天人类会隔着彩色的屏幕去感受人情冷暖，体验世态炎凉。物欲横流的世界，浮躁成了这个时代最真实的写照。我们都想要牵了手就能结婚的爱情，却活在了一个上了床都不一定有结果的年代。那个男人他终究还是没有活成你希望的样子，可是你知道吗，在他会鼓起勇气和你表达之前，真的是会考虑现在和未来的呀。为了能配得上你，都还在沉住气不停的坚持呢。</p>
<p>有时候会有一种奇怪的感受，如果说读书时代遇到问题所面对的失落，是为了锻炼克服困难的能力，从而学习到更好的思维方式；参加高考上大学遭遇就业压力所承受的焦虑，是要鞭策自己为了过上更好的生活实现所谓的个人理想而努力。但当你真正走上社会的那一霎那，发现一切都不像你想象得那么有条有理，你可能还是会需要蛰伏很长一段时间。你拼尽全力的想要去缩短需要奋斗的距离，却还是会难以扛住资本家构造蓝图时行业给出的亲民价。我们这样的人，谈爱都太奢侈。</p>
<p>就写到这吧，闲来几笔，一个人还是要心无所恃，随遇而安。</p>
]]></content>
      <tags>
        <tag>成长，旧时光</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次面试题：excel数据处理</title>
    <url>/2019/03/19/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9Aexcel%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>Sales表：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.42u5kgldrn0g.png"
                     
                ></p>
<p>Institution表：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.hsivqtazg0o.png"
                     
                ></p>
<p>Product表：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.57axgsalziio.png"
                     
                ></p>
<p>Price表：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.3hfa2v3xoukg.png"
                     
                ></p>
<p>Question：求各省份2017全年销售金额(全部产品)Top1的医院；(请保留计算过程)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import openpyxl </span><br><span class="line">path = r&#x27;C:\Users\supermanzwg\Desktop\Excel能力测试解答.xlsx&#x27;</span><br><span class="line">df = pd.read_excel(path,sheet_name= &#x27;Sales&#x27;)</span><br><span class="line">df = df[pd.to_datetime(df.SalesDate,format=&#x27;%Y-%m-%d&#x27;).dt.year==2017]</span><br><span class="line">df2 = pd.read_excel(path,sheet_name= &#x27;Institution&#x27;)</span><br><span class="line"># print(df2.info())</span><br><span class="line">#检查并发现两表之间连接键出现不一致</span><br><span class="line">for i in range(len(df)):</span><br><span class="line">    if df.loc[i,&#x27;InstitutionCode&#x27;]== &#x27;F6302 &#x27;:</span><br><span class="line">        df.loc[i,&#x27;InstitutionCode&#x27;] = &#x27;F6302&#x27;</span><br><span class="line">    else:</span><br><span class="line">        pass</span><br><span class="line">df_12 = pd.merge(df,df2,on=&#x27;InstitutionCode&#x27;,how=&#x27;left&#x27;)</span><br><span class="line"># print(df_12.info())</span><br><span class="line"># a = df_12[df_12.Province.isnull()] 检查是否还存在缺失值</span><br><span class="line"># a.InstitutionCode.unique()</span><br><span class="line">df4 = pd.read_excel(path,sheet_name= &#x27;Price&#x27;)</span><br><span class="line">df4 = df4[pd.to_datetime(df4.EffectiveDate,format=&#x27;%Y-%m-%d&#x27;).dt.year==2017]</span><br><span class="line">df4 = df4.drop_duplicates([&#x27;SKU&#x27;])#删去重复SKU值</span><br><span class="line">ddff = pd.merge(df_12,df4,on=&#x27;SKU&#x27;)</span><br><span class="line">ddff[&#x27;money&#x27;] = ddff[&#x27;Quantity&#x27;]*ddff[&#x27;Price&#x27;]</span><br><span class="line"># print(ddff.money.sum())#销售额总和</span><br><span class="line">groupby_ddff = ddff.groupby([&#x27;Province&#x27;,&#x27;InstitutionName&#x27;])[&#x27;money&#x27;].sum().reset_index()</span><br><span class="line">groupby_ddff[&#x27;group_sort&#x27;]=groupby_ddff[&#x27;money&#x27;].groupby(groupby_ddff[&#x27;Province&#x27;]).rank(ascending=False,method=&#x27;first&#x27;)</span><br><span class="line">groupby_ddff_top1 = groupby_ddff[groupby_ddff[&#x27;group_sort&#x27;]==1]</span><br><span class="line">groupby_ddff_top1</span><br></pre></td></tr></table></figure>
<p>写入到原excel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># import xlwings as xw</span><br><span class="line">book = openpyxl.load_workbook(path)   #读取你要写入的workbook</span><br><span class="line">#和pd.read_excel() 用于将Dataframe写入excel。xls用xlwt。xlsx用openpyxl</span><br><span class="line">writer = pd.ExcelWriter(path, engine=&#x27;openpyxl&#x27;)   </span><br><span class="line">##此时的writer里还只是读写器. 然后将上面读取的book复制给writer  </span><br><span class="line">writer.book = book</span><br><span class="line">#转化为字典的形式</span><br><span class="line">writer.sheets = dict((ws.title, ws) for ws in book.worksheets)</span><br><span class="line">#将data写入writer</span><br><span class="line">groupby_ddff_top1.to_excel(writer,sheet_name=&quot;Answer_Python&quot;,index=False)</span><br><span class="line">writer.save()</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.jsdelivr.net/gh/zhang18340082962/image-rick@master/image-rick/%E5%9B%BE%E7%89%87.6qq9z1446rs.png"
                     
                ></p>
]]></content>
      <tags>
        <tag>python数据分析</tag>
      </tags>
  </entry>
</search>
